// Generated C++ testbench for CXXRTL
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
#include "m_caseeq_demo.cc" // CXXRTL generated header for the module

#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdint>
#include <string>
#include <sstream>
#include <type_traits>

// Template helpers to detect and work with both value<> and wire<> types
template<typename T>
struct has_curr {
    template<typename U>
    static auto test(int) -> decltype(std::declval<U>().curr, std::true_type{});
    template<typename>
    static std::false_type test(...);
    using type = decltype(test<T>(0));
    static constexpr bool value = type::value;
};

// Helper function to get port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.curr.template get<T>();
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.template get<T>();
}

// Helper function to get port bit - works with both value<> and wire<>
template<typename PortType>
typename std::enable_if<has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.curr.bit(bit);
}

template<typename PortType>
typename std::enable_if<!has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.bit(bit);
}

// Helper function to get wide port value - works with both value<> and wire<>
template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<has_curr<PortType>::value, decltype(port.curr)>::type {
    return port.curr;
}

template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<!has_curr<PortType>::value, PortType>::type {
    return port;
}

// Helper function to set port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.next.template set<T>(value);
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.template set<T>(value);
}

// Helper function to set wide port value - works with both value<> and wire<>
template<typename PortType, typename ValueType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port.next = value;
}

template<typename PortType, typename ValueType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port = value;
}

int main(int argc, char** argv) {
    cxxrtl_design::p_m__caseeq__demo m_caseeq_demo_i; // DUT instance

    // Declare input variables
    bool clk;
    bool in;
    bool inj_condition_m10_1755351743672_470;
    uint16_t inj_data_in_pl_1755351743721_249;
    uint16_t inj_dcac_start_val_1755351743527_742;
    uint8_t inj_in1_1755351743486_683;
    uint8_t inj_in1_1755351743714_553;
    uint8_t inj_in2_1755351743486_583;
    uint8_t inj_in3_1755351743714_88;
    uint8_t inj_in_val_m10_1755351743672_115;
    uint32_t inj_val_false_1755351743831_806;
    uint32_t inj_val_true_1755351743831_159;
    bool rst;


    // Read input values
    std::ifstream clk_file("input_clk.hex");
    if (!clk_file.is_open()) {
        std::cerr << "Failed to open input file for clk: input_clk.hex" << std::endl;
        return 1;
    }
    std::string clk_hex_str;
    clk_file >> clk_hex_str;
    if (clk_file.fail() && !clk_file.eof()) {
        std::cerr << "Failed to read hex string for clk from input file: input_clk.hex" << std::endl;
        clk_file.close();
        return 1;
    }
    std::stringstream ss_clk;
    ss_clk << std::hex << clk_hex_str;
    unsigned int temp_clk;
    if (!(ss_clk >> temp_clk)) {
        std::cerr << "Failed to parse hex value for clk: " << clk_hex_str << std::endl;
        clk_file.close();
        return 1;
    }
    clk = static_cast<bool>(temp_clk);
    clk_file.close();

    std::ifstream in_file("input_in.hex");
    if (!in_file.is_open()) {
        std::cerr << "Failed to open input file for in: input_in.hex" << std::endl;
        return 1;
    }
    std::string in_hex_str;
    in_file >> in_hex_str;
    if (in_file.fail() && !in_file.eof()) {
        std::cerr << "Failed to read hex string for in from input file: input_in.hex" << std::endl;
        in_file.close();
        return 1;
    }
    std::stringstream ss_in;
    ss_in << std::hex << in_hex_str;
    unsigned int temp_in;
    if (!(ss_in >> temp_in)) {
        std::cerr << "Failed to parse hex value for in: " << in_hex_str << std::endl;
        in_file.close();
        return 1;
    }
    in = static_cast<bool>(temp_in);
    in_file.close();

    std::ifstream inj_condition_m10_1755351743672_470_file("input_inj_condition_m10_1755351743672_470.hex");
    if (!inj_condition_m10_1755351743672_470_file.is_open()) {
        std::cerr << "Failed to open input file for inj_condition_m10_1755351743672_470: input_inj_condition_m10_1755351743672_470.hex" << std::endl;
        return 1;
    }
    std::string inj_condition_m10_1755351743672_470_hex_str;
    inj_condition_m10_1755351743672_470_file >> inj_condition_m10_1755351743672_470_hex_str;
    if (inj_condition_m10_1755351743672_470_file.fail() && !inj_condition_m10_1755351743672_470_file.eof()) {
        std::cerr << "Failed to read hex string for inj_condition_m10_1755351743672_470 from input file: input_inj_condition_m10_1755351743672_470.hex" << std::endl;
        inj_condition_m10_1755351743672_470_file.close();
        return 1;
    }
    std::stringstream ss_inj_condition_m10_1755351743672_470;
    ss_inj_condition_m10_1755351743672_470 << std::hex << inj_condition_m10_1755351743672_470_hex_str;
    unsigned int temp_inj_condition_m10_1755351743672_470;
    if (!(ss_inj_condition_m10_1755351743672_470 >> temp_inj_condition_m10_1755351743672_470)) {
        std::cerr << "Failed to parse hex value for inj_condition_m10_1755351743672_470: " << inj_condition_m10_1755351743672_470_hex_str << std::endl;
        inj_condition_m10_1755351743672_470_file.close();
        return 1;
    }
    inj_condition_m10_1755351743672_470 = static_cast<bool>(temp_inj_condition_m10_1755351743672_470);
    inj_condition_m10_1755351743672_470_file.close();

    std::ifstream inj_data_in_pl_1755351743721_249_file("input_inj_data_in_pl_1755351743721_249.hex");
    if (!inj_data_in_pl_1755351743721_249_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data_in_pl_1755351743721_249: input_inj_data_in_pl_1755351743721_249.hex" << std::endl;
        return 1;
    }
    std::string inj_data_in_pl_1755351743721_249_hex_str;
    inj_data_in_pl_1755351743721_249_file >> inj_data_in_pl_1755351743721_249_hex_str;
    if (inj_data_in_pl_1755351743721_249_file.fail() && !inj_data_in_pl_1755351743721_249_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data_in_pl_1755351743721_249 from input file: input_inj_data_in_pl_1755351743721_249.hex" << std::endl;
        inj_data_in_pl_1755351743721_249_file.close();
        return 1;
    }
    std::stringstream ss_inj_data_in_pl_1755351743721_249;
    ss_inj_data_in_pl_1755351743721_249 << std::hex << inj_data_in_pl_1755351743721_249_hex_str;
    if (!(ss_inj_data_in_pl_1755351743721_249 >> inj_data_in_pl_1755351743721_249)) {
        std::cerr << "Failed to parse hex value for inj_data_in_pl_1755351743721_249: " << inj_data_in_pl_1755351743721_249_hex_str << std::endl;
        inj_data_in_pl_1755351743721_249_file.close();
        return 1;
    }
    inj_data_in_pl_1755351743721_249_file.close();

    std::ifstream inj_dcac_start_val_1755351743527_742_file("input_inj_dcac_start_val_1755351743527_742.hex");
    if (!inj_dcac_start_val_1755351743527_742_file.is_open()) {
        std::cerr << "Failed to open input file for inj_dcac_start_val_1755351743527_742: input_inj_dcac_start_val_1755351743527_742.hex" << std::endl;
        return 1;
    }
    std::string inj_dcac_start_val_1755351743527_742_hex_str;
    inj_dcac_start_val_1755351743527_742_file >> inj_dcac_start_val_1755351743527_742_hex_str;
    if (inj_dcac_start_val_1755351743527_742_file.fail() && !inj_dcac_start_val_1755351743527_742_file.eof()) {
        std::cerr << "Failed to read hex string for inj_dcac_start_val_1755351743527_742 from input file: input_inj_dcac_start_val_1755351743527_742.hex" << std::endl;
        inj_dcac_start_val_1755351743527_742_file.close();
        return 1;
    }
    std::stringstream ss_inj_dcac_start_val_1755351743527_742;
    ss_inj_dcac_start_val_1755351743527_742 << std::hex << inj_dcac_start_val_1755351743527_742_hex_str;
    if (!(ss_inj_dcac_start_val_1755351743527_742 >> inj_dcac_start_val_1755351743527_742)) {
        std::cerr << "Failed to parse hex value for inj_dcac_start_val_1755351743527_742: " << inj_dcac_start_val_1755351743527_742_hex_str << std::endl;
        inj_dcac_start_val_1755351743527_742_file.close();
        return 1;
    }
    inj_dcac_start_val_1755351743527_742_file.close();

    std::ifstream inj_in1_1755351743486_683_file("input_inj_in1_1755351743486_683.hex");
    if (!inj_in1_1755351743486_683_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in1_1755351743486_683: input_inj_in1_1755351743486_683.hex" << std::endl;
        return 1;
    }
    std::string inj_in1_1755351743486_683_hex_str;
    inj_in1_1755351743486_683_file >> inj_in1_1755351743486_683_hex_str;
    if (inj_in1_1755351743486_683_file.fail() && !inj_in1_1755351743486_683_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in1_1755351743486_683 from input file: input_inj_in1_1755351743486_683.hex" << std::endl;
        inj_in1_1755351743486_683_file.close();
        return 1;
    }
    std::stringstream ss_inj_in1_1755351743486_683;
    ss_inj_in1_1755351743486_683 << std::hex << inj_in1_1755351743486_683_hex_str;
    unsigned int temp_inj_in1_1755351743486_683;
    if (!(ss_inj_in1_1755351743486_683 >> temp_inj_in1_1755351743486_683)) {
        std::cerr << "Failed to parse hex value for inj_in1_1755351743486_683: " << inj_in1_1755351743486_683_hex_str << std::endl;
        inj_in1_1755351743486_683_file.close();
        return 1;
    }
    inj_in1_1755351743486_683 = static_cast<uint8_t>(temp_inj_in1_1755351743486_683);
    inj_in1_1755351743486_683_file.close();

    std::ifstream inj_in1_1755351743714_553_file("input_inj_in1_1755351743714_553.hex");
    if (!inj_in1_1755351743714_553_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in1_1755351743714_553: input_inj_in1_1755351743714_553.hex" << std::endl;
        return 1;
    }
    std::string inj_in1_1755351743714_553_hex_str;
    inj_in1_1755351743714_553_file >> inj_in1_1755351743714_553_hex_str;
    if (inj_in1_1755351743714_553_file.fail() && !inj_in1_1755351743714_553_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in1_1755351743714_553 from input file: input_inj_in1_1755351743714_553.hex" << std::endl;
        inj_in1_1755351743714_553_file.close();
        return 1;
    }
    std::stringstream ss_inj_in1_1755351743714_553;
    ss_inj_in1_1755351743714_553 << std::hex << inj_in1_1755351743714_553_hex_str;
    unsigned int temp_inj_in1_1755351743714_553;
    if (!(ss_inj_in1_1755351743714_553 >> temp_inj_in1_1755351743714_553)) {
        std::cerr << "Failed to parse hex value for inj_in1_1755351743714_553: " << inj_in1_1755351743714_553_hex_str << std::endl;
        inj_in1_1755351743714_553_file.close();
        return 1;
    }
    inj_in1_1755351743714_553 = static_cast<uint8_t>(temp_inj_in1_1755351743714_553);
    inj_in1_1755351743714_553_file.close();

    std::ifstream inj_in2_1755351743486_583_file("input_inj_in2_1755351743486_583.hex");
    if (!inj_in2_1755351743486_583_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in2_1755351743486_583: input_inj_in2_1755351743486_583.hex" << std::endl;
        return 1;
    }
    std::string inj_in2_1755351743486_583_hex_str;
    inj_in2_1755351743486_583_file >> inj_in2_1755351743486_583_hex_str;
    if (inj_in2_1755351743486_583_file.fail() && !inj_in2_1755351743486_583_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in2_1755351743486_583 from input file: input_inj_in2_1755351743486_583.hex" << std::endl;
        inj_in2_1755351743486_583_file.close();
        return 1;
    }
    std::stringstream ss_inj_in2_1755351743486_583;
    ss_inj_in2_1755351743486_583 << std::hex << inj_in2_1755351743486_583_hex_str;
    unsigned int temp_inj_in2_1755351743486_583;
    if (!(ss_inj_in2_1755351743486_583 >> temp_inj_in2_1755351743486_583)) {
        std::cerr << "Failed to parse hex value for inj_in2_1755351743486_583: " << inj_in2_1755351743486_583_hex_str << std::endl;
        inj_in2_1755351743486_583_file.close();
        return 1;
    }
    inj_in2_1755351743486_583 = static_cast<uint8_t>(temp_inj_in2_1755351743486_583);
    inj_in2_1755351743486_583_file.close();

    std::ifstream inj_in3_1755351743714_88_file("input_inj_in3_1755351743714_88.hex");
    if (!inj_in3_1755351743714_88_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in3_1755351743714_88: input_inj_in3_1755351743714_88.hex" << std::endl;
        return 1;
    }
    std::string inj_in3_1755351743714_88_hex_str;
    inj_in3_1755351743714_88_file >> inj_in3_1755351743714_88_hex_str;
    if (inj_in3_1755351743714_88_file.fail() && !inj_in3_1755351743714_88_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in3_1755351743714_88 from input file: input_inj_in3_1755351743714_88.hex" << std::endl;
        inj_in3_1755351743714_88_file.close();
        return 1;
    }
    std::stringstream ss_inj_in3_1755351743714_88;
    ss_inj_in3_1755351743714_88 << std::hex << inj_in3_1755351743714_88_hex_str;
    unsigned int temp_inj_in3_1755351743714_88;
    if (!(ss_inj_in3_1755351743714_88 >> temp_inj_in3_1755351743714_88)) {
        std::cerr << "Failed to parse hex value for inj_in3_1755351743714_88: " << inj_in3_1755351743714_88_hex_str << std::endl;
        inj_in3_1755351743714_88_file.close();
        return 1;
    }
    inj_in3_1755351743714_88 = static_cast<uint8_t>(temp_inj_in3_1755351743714_88);
    inj_in3_1755351743714_88_file.close();

    std::ifstream inj_in_val_m10_1755351743672_115_file("input_inj_in_val_m10_1755351743672_115.hex");
    if (!inj_in_val_m10_1755351743672_115_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_val_m10_1755351743672_115: input_inj_in_val_m10_1755351743672_115.hex" << std::endl;
        return 1;
    }
    std::string inj_in_val_m10_1755351743672_115_hex_str;
    inj_in_val_m10_1755351743672_115_file >> inj_in_val_m10_1755351743672_115_hex_str;
    if (inj_in_val_m10_1755351743672_115_file.fail() && !inj_in_val_m10_1755351743672_115_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_val_m10_1755351743672_115 from input file: input_inj_in_val_m10_1755351743672_115.hex" << std::endl;
        inj_in_val_m10_1755351743672_115_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_val_m10_1755351743672_115;
    ss_inj_in_val_m10_1755351743672_115 << std::hex << inj_in_val_m10_1755351743672_115_hex_str;
    unsigned int temp_inj_in_val_m10_1755351743672_115;
    if (!(ss_inj_in_val_m10_1755351743672_115 >> temp_inj_in_val_m10_1755351743672_115)) {
        std::cerr << "Failed to parse hex value for inj_in_val_m10_1755351743672_115: " << inj_in_val_m10_1755351743672_115_hex_str << std::endl;
        inj_in_val_m10_1755351743672_115_file.close();
        return 1;
    }
    inj_in_val_m10_1755351743672_115 = static_cast<uint8_t>(temp_inj_in_val_m10_1755351743672_115);
    inj_in_val_m10_1755351743672_115_file.close();

    std::ifstream inj_val_false_1755351743831_806_file("input_inj_val_false_1755351743831_806.hex");
    if (!inj_val_false_1755351743831_806_file.is_open()) {
        std::cerr << "Failed to open input file for inj_val_false_1755351743831_806: input_inj_val_false_1755351743831_806.hex" << std::endl;
        return 1;
    }
    std::string inj_val_false_1755351743831_806_hex_str;
    inj_val_false_1755351743831_806_file >> inj_val_false_1755351743831_806_hex_str;
    if (inj_val_false_1755351743831_806_file.fail() && !inj_val_false_1755351743831_806_file.eof()) {
        std::cerr << "Failed to read hex string for inj_val_false_1755351743831_806 from input file: input_inj_val_false_1755351743831_806.hex" << std::endl;
        inj_val_false_1755351743831_806_file.close();
        return 1;
    }
    std::stringstream ss_inj_val_false_1755351743831_806;
    ss_inj_val_false_1755351743831_806 << std::hex << inj_val_false_1755351743831_806_hex_str;
    if (!(ss_inj_val_false_1755351743831_806 >> inj_val_false_1755351743831_806)) {
        std::cerr << "Failed to parse hex value for inj_val_false_1755351743831_806: " << inj_val_false_1755351743831_806_hex_str << std::endl;
        inj_val_false_1755351743831_806_file.close();
        return 1;
    }
    inj_val_false_1755351743831_806_file.close();

    std::ifstream inj_val_true_1755351743831_159_file("input_inj_val_true_1755351743831_159.hex");
    if (!inj_val_true_1755351743831_159_file.is_open()) {
        std::cerr << "Failed to open input file for inj_val_true_1755351743831_159: input_inj_val_true_1755351743831_159.hex" << std::endl;
        return 1;
    }
    std::string inj_val_true_1755351743831_159_hex_str;
    inj_val_true_1755351743831_159_file >> inj_val_true_1755351743831_159_hex_str;
    if (inj_val_true_1755351743831_159_file.fail() && !inj_val_true_1755351743831_159_file.eof()) {
        std::cerr << "Failed to read hex string for inj_val_true_1755351743831_159 from input file: input_inj_val_true_1755351743831_159.hex" << std::endl;
        inj_val_true_1755351743831_159_file.close();
        return 1;
    }
    std::stringstream ss_inj_val_true_1755351743831_159;
    ss_inj_val_true_1755351743831_159 << std::hex << inj_val_true_1755351743831_159_hex_str;
    if (!(ss_inj_val_true_1755351743831_159 >> inj_val_true_1755351743831_159)) {
        std::cerr << "Failed to parse hex value for inj_val_true_1755351743831_159: " << inj_val_true_1755351743831_159_hex_str << std::endl;
        inj_val_true_1755351743831_159_file.close();
        return 1;
    }
    inj_val_true_1755351743831_159_file.close();

    std::ifstream rst_file("input_rst.hex");
    if (!rst_file.is_open()) {
        std::cerr << "Failed to open input file for rst: input_rst.hex" << std::endl;
        return 1;
    }
    std::string rst_hex_str;
    rst_file >> rst_hex_str;
    if (rst_file.fail() && !rst_file.eof()) {
        std::cerr << "Failed to read hex string for rst from input file: input_rst.hex" << std::endl;
        rst_file.close();
        return 1;
    }
    std::stringstream ss_rst;
    ss_rst << std::hex << rst_hex_str;
    unsigned int temp_rst;
    if (!(ss_rst >> temp_rst)) {
        std::cerr << "Failed to parse hex value for rst: " << rst_hex_str << std::endl;
        rst_file.close();
        return 1;
    }
    rst = static_cast<bool>(temp_rst);
    rst_file.close();



    // Apply inputs to DUT
    _set_port_value<bool>(m_caseeq_demo_i.p_clk, clk);
    _set_port_value<bool>(m_caseeq_demo_i.p_in, in);
    _set_port_value<bool>(m_caseeq_demo_i.p_inj__condition__m10__1755351743672__470, inj_condition_m10_1755351743672_470);
    _set_port_value<uint16_t>(m_caseeq_demo_i.p_inj__data__in__pl__1755351743721__249, inj_data_in_pl_1755351743721_249);
    _set_port_value<uint16_t>(m_caseeq_demo_i.p_inj__dcac__start__val__1755351743527__742, inj_dcac_start_val_1755351743527_742);
    _set_port_value<uint8_t>(m_caseeq_demo_i.p_inj__in1__1755351743486__683, inj_in1_1755351743486_683);
    _set_port_value<uint8_t>(m_caseeq_demo_i.p_inj__in1__1755351743714__553, inj_in1_1755351743714_553);
    _set_port_value<uint8_t>(m_caseeq_demo_i.p_inj__in2__1755351743486__583, inj_in2_1755351743486_583);
    _set_port_value<uint8_t>(m_caseeq_demo_i.p_inj__in3__1755351743714__88, inj_in3_1755351743714_88);
    _set_port_value<uint8_t>(m_caseeq_demo_i.p_inj__in__val__m10__1755351743672__115, inj_in_val_m10_1755351743672_115);
    _set_port_value<uint32_t>(m_caseeq_demo_i.p_inj__val__false__1755351743831__806, inj_val_false_1755351743831_806);
    _set_port_value<uint32_t>(m_caseeq_demo_i.p_inj__val__true__1755351743831__159, inj_val_true_1755351743831_159);
    _set_port_value<bool>(m_caseeq_demo_i.p_rst, rst);
    // Input application


    // Handle reset, clock toggling, and evaluation

    // Toggle reset signal p_rst
    m_caseeq_demo_i.p_rst.set<bool>(true); // Assert reset (active high)
    m_caseeq_demo_i.step(); // Step to propagate reset assertion
    m_caseeq_demo_i.p_rst.set<bool>(false); // De-assert reset
    m_caseeq_demo_i.step(); // Step to propagate reset de-assertion
    m_caseeq_demo_i.step(); // Extra step for settling after reset

    // Clock toggling with bounded cycles to prevent infinite loops
    for (int cycle = 0; cycle < 50; cycle++) {
        _set_port_value<bool>(m_caseeq_demo_i.p_clk, false);
        m_caseeq_demo_i.step(); // clock low
        _set_port_value<bool>(m_caseeq_demo_i.p_clk, true);
        m_caseeq_demo_i.step(); // clock high
    }

    // Bounded evaluation steps to ensure all logic settles (max 20 steps)
    for (int settle_step = 0; settle_step < 20; settle_step++) {
        m_caseeq_demo_i.step();
    }


    // Write outputs from DUT
    std::ofstream eq_file("output_eq.hex");
    if (!eq_file.is_open()) {
        std::cerr << "Failed to open output file for eq: output_eq.hex" << std::endl;
        return 1;
    }
    eq_file << (_get_port_value(m_caseeq_demo_i.p_eq, 0) ? '1' : '0') << std::endl;
    eq_file.close();

    std::ofstream inj_d_out_1755351743739_966_file("output_inj_d_out_1755351743739_966.hex");
    if (!inj_d_out_1755351743739_966_file.is_open()) {
        std::cerr << "Failed to open output file for inj_d_out_1755351743739_966: output_inj_d_out_1755351743739_966.hex" << std::endl;
        return 1;
    }
    inj_d_out_1755351743739_966_file << (_get_port_value(m_caseeq_demo_i.p_inj__d__out__1755351743739__966, 0) ? '1' : '0') << std::endl;
    inj_d_out_1755351743739_966_file.close();

    std::ofstream inj_data_out_pl_1755351743721_740_file("output_inj_data_out_pl_1755351743721_740.hex");
    if (!inj_data_out_pl_1755351743721_740_file.is_open()) {
        std::cerr << "Failed to open output file for inj_data_out_pl_1755351743721_740: output_inj_data_out_pl_1755351743721_740.hex" << std::endl;
        return 1;
    }
    for (int i = 4; i >= 0; --i) {
        inj_data_out_pl_1755351743721_740_file << (_get_port_value(m_caseeq_demo_i.p_inj__data__out__pl__1755351743721__740, i) ? '1' : '0');
    }
    inj_data_out_pl_1755351743721_740_file << std::endl;
    inj_data_out_pl_1755351743721_740_file.close();

    std::ofstream inj_dcac_end_val_1755351743527_10_file("output_inj_dcac_end_val_1755351743527_10.hex");
    if (!inj_dcac_end_val_1755351743527_10_file.is_open()) {
        std::cerr << "Failed to open output file for inj_dcac_end_val_1755351743527_10: output_inj_dcac_end_val_1755351743527_10.hex" << std::endl;
        return 1;
    }
    for (int i = 15; i >= 0; --i) {
        inj_dcac_end_val_1755351743527_10_file << (_get_port_value(m_caseeq_demo_i.p_inj__dcac__end__val__1755351743527__10, i) ? '1' : '0');
    }
    inj_dcac_end_val_1755351743527_10_file << std::endl;
    inj_dcac_end_val_1755351743527_10_file.close();

    std::ofstream inj_nand_out_1755351743714_339_file("output_inj_nand_out_1755351743714_339.hex");
    if (!inj_nand_out_1755351743714_339_file.is_open()) {
        std::cerr << "Failed to open output file for inj_nand_out_1755351743714_339: output_inj_nand_out_1755351743714_339.hex" << std::endl;
        return 1;
    }
    inj_nand_out_1755351743714_339_file << (_get_port_value(m_caseeq_demo_i.p_inj__nand__out__1755351743714__339, 0) ? '1' : '0') << std::endl;
    inj_nand_out_1755351743714_339_file.close();

    std::ofstream inj_nor_out_1755351743714_351_file("output_inj_nor_out_1755351743714_351.hex");
    if (!inj_nor_out_1755351743714_351_file.is_open()) {
        std::cerr << "Failed to open output file for inj_nor_out_1755351743714_351: output_inj_nor_out_1755351743714_351.hex" << std::endl;
        return 1;
    }
    inj_nor_out_1755351743714_351_file << (_get_port_value(m_caseeq_demo_i.p_inj__nor__out__1755351743714__351, 0) ? '1' : '0') << std::endl;
    inj_nor_out_1755351743714_351_file.close();

    std::ofstream inj_out1_1755351743486_508_file("output_inj_out1_1755351743486_508.hex");
    if (!inj_out1_1755351743486_508_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out1_1755351743486_508: output_inj_out1_1755351743486_508.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out1_1755351743486_508_file << (_get_port_value(m_caseeq_demo_i.p_inj__out1__1755351743486__508, i) ? '1' : '0');
    }
    inj_out1_1755351743486_508_file << std::endl;
    inj_out1_1755351743486_508_file.close();

    std::ofstream inj_out2_1755351743486_898_file("output_inj_out2_1755351743486_898.hex");
    if (!inj_out2_1755351743486_898_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out2_1755351743486_898: output_inj_out2_1755351743486_898.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out2_1755351743486_898_file << (_get_port_value(m_caseeq_demo_i.p_inj__out2__1755351743486__898, i) ? '1' : '0');
    }
    inj_out2_1755351743486_898_file << std::endl;
    inj_out2_1755351743486_898_file.close();

    std::ofstream inj_out_val_1755351743831_180_file("output_inj_out_val_1755351743831_180.hex");
    if (!inj_out_val_1755351743831_180_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_val_1755351743831_180: output_inj_out_val_1755351743831_180.hex" << std::endl;
        return 1;
    }
    for (int i = 31; i >= 0; --i) {
        inj_out_val_1755351743831_180_file << (_get_port_value(m_caseeq_demo_i.p_inj__out__val__1755351743831__180, i) ? '1' : '0');
    }
    inj_out_val_1755351743831_180_file << std::endl;
    inj_out_val_1755351743831_180_file.close();

    std::ofstream inj_out_val_m10_1755351743672_256_file("output_inj_out_val_m10_1755351743672_256.hex");
    if (!inj_out_val_m10_1755351743672_256_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_val_m10_1755351743672_256: output_inj_out_val_m10_1755351743672_256.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_val_m10_1755351743672_256_file << (_get_port_value(m_caseeq_demo_i.p_inj__out__val__m10__1755351743672__256, i) ? '1' : '0');
    }
    inj_out_val_m10_1755351743672_256_file << std::endl;
    inj_out_val_m10_1755351743672_256_file.close();

    std::ofstream inj_xnor_out_1755351743714_231_file("output_inj_xnor_out_1755351743714_231.hex");
    if (!inj_xnor_out_1755351743714_231_file.is_open()) {
        std::cerr << "Failed to open output file for inj_xnor_out_1755351743714_231: output_inj_xnor_out_1755351743714_231.hex" << std::endl;
        return 1;
    }
    inj_xnor_out_1755351743714_231_file << (_get_port_value(m_caseeq_demo_i.p_inj__xnor__out__1755351743714__231, 0) ? '1' : '0') << std::endl;
    inj_xnor_out_1755351743714_231_file.close();

    std::ofstream neq_file("output_neq.hex");
    if (!neq_file.is_open()) {
        std::cerr << "Failed to open output file for neq: output_neq.hex" << std::endl;
        return 1;
    }
    neq_file << (_get_port_value(m_caseeq_demo_i.p_neq, 0) ? '1' : '0') << std::endl;
    neq_file.close();



    return 0;
}
