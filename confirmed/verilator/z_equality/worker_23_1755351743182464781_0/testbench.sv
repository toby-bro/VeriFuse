// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go

module top;
    logic clk;
    logic in;
    logic inj_condition_m10_1755351743672_470;
    logic [9:0] inj_data_in_pl_1755351743721_249;
    logic [15:0] inj_dcac_start_val_1755351743527_742;
    logic [7:0] inj_in1_1755351743486_683;
    logic [7:0] inj_in1_1755351743714_553;
    logic [7:0] inj_in2_1755351743486_583;
    logic [7:0] inj_in3_1755351743714_88;
    logic [7:0] inj_in_val_m10_1755351743672_115;
    logic [31:0] inj_val_false_1755351743831_806;
    logic [31:0] inj_val_true_1755351743831_159;
    logic rst;
    logic eq;
    logic inj_d_out_1755351743739_966;
    logic [4:0] inj_data_out_pl_1755351743721_740;
    logic [15:0] inj_dcac_end_val_1755351743527_10;
    logic inj_nand_out_1755351743714_339;
    logic inj_nor_out_1755351743714_351;
    logic [7:0] inj_out1_1755351743486_508;
    logic [7:0] inj_out2_1755351743486_898;
    logic [31:0] inj_out_val_1755351743831_180;
    logic [7:0] inj_out_val_m10_1755351743672_256;
    logic inj_xnor_out_1755351743714_231;
    logic neq;

    m_caseeq_demo dut (
        .clk(clk),
        .in(in),
        .inj_condition_m10_1755351743672_470(inj_condition_m10_1755351743672_470),
        .inj_data_in_pl_1755351743721_249(inj_data_in_pl_1755351743721_249),
        .inj_dcac_start_val_1755351743527_742(inj_dcac_start_val_1755351743527_742),
        .inj_in1_1755351743486_683(inj_in1_1755351743486_683),
        .inj_in1_1755351743714_553(inj_in1_1755351743714_553),
        .inj_in2_1755351743486_583(inj_in2_1755351743486_583),
        .inj_in3_1755351743714_88(inj_in3_1755351743714_88),
        .inj_in_val_m10_1755351743672_115(inj_in_val_m10_1755351743672_115),
        .inj_val_false_1755351743831_806(inj_val_false_1755351743831_806),
        .inj_val_true_1755351743831_159(inj_val_true_1755351743831_159),
        .rst(rst),
        .eq(eq),
        .inj_d_out_1755351743739_966(inj_d_out_1755351743739_966),
        .inj_data_out_pl_1755351743721_740(inj_data_out_pl_1755351743721_740),
        .inj_dcac_end_val_1755351743527_10(inj_dcac_end_val_1755351743527_10),
        .inj_nand_out_1755351743714_339(inj_nand_out_1755351743714_339),
        .inj_nor_out_1755351743714_351(inj_nor_out_1755351743714_351),
        .inj_out1_1755351743486_508(inj_out1_1755351743486_508),
        .inj_out2_1755351743486_898(inj_out2_1755351743486_898),
        .inj_out_val_1755351743831_180(inj_out_val_1755351743831_180),
        .inj_out_val_m10_1755351743672_256(inj_out_val_m10_1755351743672_256),
        .inj_xnor_out_1755351743714_231(inj_xnor_out_1755351743714_231),
        .neq(neq)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 11 input files
        clk = 0;

        fd = $fopen("input_in.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_in.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", in);
        $fclose(fd);

        fd = $fopen("input_inj_condition_m10_1755351743672_470.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_condition_m10_1755351743672_470.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_condition_m10_1755351743672_470);
        $fclose(fd);

        fd = $fopen("input_inj_data_in_pl_1755351743721_249.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_data_in_pl_1755351743721_249.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_data_in_pl_1755351743721_249);
        $fclose(fd);

        fd = $fopen("input_inj_dcac_start_val_1755351743527_742.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_dcac_start_val_1755351743527_742.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_dcac_start_val_1755351743527_742);
        $fclose(fd);

        fd = $fopen("input_inj_in1_1755351743486_683.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in1_1755351743486_683.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in1_1755351743486_683);
        $fclose(fd);

        fd = $fopen("input_inj_in1_1755351743714_553.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in1_1755351743714_553.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in1_1755351743714_553);
        $fclose(fd);

        fd = $fopen("input_inj_in2_1755351743486_583.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in2_1755351743486_583.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in2_1755351743486_583);
        $fclose(fd);

        fd = $fopen("input_inj_in3_1755351743714_88.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in3_1755351743714_88.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in3_1755351743714_88);
        $fclose(fd);

        fd = $fopen("input_inj_in_val_m10_1755351743672_115.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in_val_m10_1755351743672_115.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in_val_m10_1755351743672_115);
        $fclose(fd);

        fd = $fopen("input_inj_val_false_1755351743831_806.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_val_false_1755351743831_806.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_val_false_1755351743831_806);
        $fclose(fd);

        fd = $fopen("input_inj_val_true_1755351743831_159.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_val_true_1755351743831_159.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_val_true_1755351743831_159);
        $fclose(fd);
        rst = 0;


        // Toggle reset if a reset signal was identified

        // Toggle reset signal rst
        rst = 1; // Assert reset (active high)
        #10;
        rst = 0; // De-assert reset
        #10; // Wait after de-asserting reset


        // Toggle clock signals

        // Toggle clocks for several cycles with timeout protection
        // Set simulation timeout to prevent infinite loops
        fork
            begin
                #780;
                $display("ERROR: Simulation timeout after 780 time units");
                $finish;
            end
            begin
                repeat (50) begin
                    clk = 0;
                    #5;
                    clk = 1;
                    #5;
                end
            end
        join_any
        disable fork; // Kill timeout process


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 12 output files

        fd = $fopen("output_eq.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_eq.hex' for port 'eq'.", "output_eq.hex", "eq");
            $finish;
        end
        $fwrite(fd, "%b\n", eq);
        $fclose(fd);

        fd = $fopen("output_inj_d_out_1755351743739_966.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_d_out_1755351743739_966.hex' for port 'inj_d_out_1755351743739_966'.", "output_inj_d_out_1755351743739_966.hex", "inj_d_out_1755351743739_966");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_d_out_1755351743739_966);
        $fclose(fd);

        fd = $fopen("output_inj_data_out_pl_1755351743721_740.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_data_out_pl_1755351743721_740.hex' for port 'inj_data_out_pl_1755351743721_740'.", "output_inj_data_out_pl_1755351743721_740.hex", "inj_data_out_pl_1755351743721_740");
            $finish;
        end
        for (int i = 4; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_data_out_pl_1755351743721_740[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_dcac_end_val_1755351743527_10.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_dcac_end_val_1755351743527_10.hex' for port 'inj_dcac_end_val_1755351743527_10'.", "output_inj_dcac_end_val_1755351743527_10.hex", "inj_dcac_end_val_1755351743527_10");
            $finish;
        end
        for (int i = 15; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_dcac_end_val_1755351743527_10[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_nand_out_1755351743714_339.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_nand_out_1755351743714_339.hex' for port 'inj_nand_out_1755351743714_339'.", "output_inj_nand_out_1755351743714_339.hex", "inj_nand_out_1755351743714_339");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_nand_out_1755351743714_339);
        $fclose(fd);

        fd = $fopen("output_inj_nor_out_1755351743714_351.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_nor_out_1755351743714_351.hex' for port 'inj_nor_out_1755351743714_351'.", "output_inj_nor_out_1755351743714_351.hex", "inj_nor_out_1755351743714_351");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_nor_out_1755351743714_351);
        $fclose(fd);

        fd = $fopen("output_inj_out1_1755351743486_508.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out1_1755351743486_508.hex' for port 'inj_out1_1755351743486_508'.", "output_inj_out1_1755351743486_508.hex", "inj_out1_1755351743486_508");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_out1_1755351743486_508[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_out2_1755351743486_898.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out2_1755351743486_898.hex' for port 'inj_out2_1755351743486_898'.", "output_inj_out2_1755351743486_898.hex", "inj_out2_1755351743486_898");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_out2_1755351743486_898[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_out_val_1755351743831_180.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out_val_1755351743831_180.hex' for port 'inj_out_val_1755351743831_180'.", "output_inj_out_val_1755351743831_180.hex", "inj_out_val_1755351743831_180");
            $finish;
        end
        for (int i = 31; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_out_val_1755351743831_180[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_out_val_m10_1755351743672_256.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out_val_m10_1755351743672_256.hex' for port 'inj_out_val_m10_1755351743672_256'.", "output_inj_out_val_m10_1755351743672_256.hex", "inj_out_val_m10_1755351743672_256");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_out_val_m10_1755351743672_256[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_xnor_out_1755351743714_231.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_xnor_out_1755351743714_231.hex' for port 'inj_xnor_out_1755351743714_231'.", "output_inj_xnor_out_1755351743714_231.hex", "inj_xnor_out_1755351743714_231");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_xnor_out_1755351743714_231);
        $fclose(fd);

        fd = $fopen("output_neq.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_neq.hex' for port 'neq'.", "output_neq.hex", "neq");
            $finish;
        end
        $fwrite(fd, "%b\n", neq);
        $fclose(fd);


        $finish;
    end
endmodule