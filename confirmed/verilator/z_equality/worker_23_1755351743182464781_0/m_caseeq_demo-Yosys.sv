// Yosys script used:
// read_verilog -sv dist/worker_23_1755351743182464781_0/m_caseeq_demo.sv; prep -top m_caseeq_demo; opt_lut; fsm_opt; hierarchy; opt_dff -nodffe; fsm_map; opt_expr -keepdc; opt_reduce; opt_expr -fine; write_verilog -sv -noattr dist/worker_23_1755351743182464781_0/m_caseeq_demo-Yosys.sv
/* Generated by Yosys 0.55+23 (git sha1 e57a2b944, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

module m_caseeq_demo(clk, in, inj_condition_m10_1755351743672_470, inj_data_in_pl_1755351743721_249, inj_dcac_start_val_1755351743527_742, inj_in1_1755351743486_683, inj_in1_1755351743714_553, inj_in2_1755351743486_583, inj_in3_1755351743714_88, inj_in_val_m10_1755351743672_115, inj_val_false_1755351743831_806, inj_val_true_1755351743831_159, rst, eq, inj_d_out_1755351743739_966, inj_data_out_pl_1755351743721_740, inj_dcac_end_val_1755351743527_10, inj_nand_out_1755351743714_339, inj_nor_out_1755351743714_351, inj_out1_1755351743486_508, inj_out2_1755351743486_898
, inj_out_val_1755351743831_180, inj_out_val_m10_1755351743672_256, inj_xnor_out_1755351743714_231, neq);
  input clk;
  wire clk;
  output eq;
  wire eq;
  input in;
  wire in;
  input inj_condition_m10_1755351743672_470;
  wire inj_condition_m10_1755351743672_470;
  output inj_d_out_1755351743739_966;
  wire inj_d_out_1755351743739_966;
  input [9:0] inj_data_in_pl_1755351743721_249;
  wire [9:0] inj_data_in_pl_1755351743721_249;
  output [4:0] inj_data_out_pl_1755351743721_740;
  wire [4:0] inj_data_out_pl_1755351743721_740;
  output [15:0] inj_dcac_end_val_1755351743527_10;
  wire [15:0] inj_dcac_end_val_1755351743527_10;
  input [15:0] inj_dcac_start_val_1755351743527_742;
  wire [15:0] inj_dcac_start_val_1755351743527_742;
  input [7:0] inj_in1_1755351743486_683;
  wire [7:0] inj_in1_1755351743486_683;
  input [7:0] inj_in1_1755351743714_553;
  wire [7:0] inj_in1_1755351743714_553;
  input [7:0] inj_in2_1755351743486_583;
  wire [7:0] inj_in2_1755351743486_583;
  input [7:0] inj_in3_1755351743714_88;
  wire [7:0] inj_in3_1755351743714_88;
  input [7:0] inj_in_val_m10_1755351743672_115;
  wire [7:0] inj_in_val_m10_1755351743672_115;
  output inj_nand_out_1755351743714_339;
  wire inj_nand_out_1755351743714_339;
  output inj_nor_out_1755351743714_351;
  wire inj_nor_out_1755351743714_351;
  output [7:0] inj_out1_1755351743486_508;
  wire [7:0] inj_out1_1755351743486_508;
  output [7:0] inj_out2_1755351743486_898;
  wire [7:0] inj_out2_1755351743486_898;
  output [31:0] inj_out_val_1755351743831_180;
  wire [31:0] inj_out_val_1755351743831_180;
  output [7:0] inj_out_val_m10_1755351743672_256;
  wire [7:0] inj_out_val_m10_1755351743672_256;
  input [31:0] inj_val_false_1755351743831_806;
  wire [31:0] inj_val_false_1755351743831_806;
  input [31:0] inj_val_true_1755351743831_159;
  wire [31:0] inj_val_true_1755351743831_159;
  output inj_xnor_out_1755351743714_231;
  wire inj_xnor_out_1755351743714_231;
  wire [9:0] my_packed_logic_ts1755351743721;
  output neq;
  wire neq;
  input rst;
  wire rst;
  wire [15:0] t11_ts1755351743527;
  wire [15:0] t13_ts1755351743527;
  wire [15:0] t14_ts1755351743527;
  wire [15:0] t15_ts1755351743527;
  wire [15:0] t20_ts1755351743527;
  wire [15:0] t25_ts1755351743527;
  wire [15:0] t26_ts1755351743527;
  wire t27_ts1755351743527;
  wire t28_ts1755351743527;
  wire t29_ts1755351743527;
  wire [15:0] t30_ts1755351743527;
  wire [15:0] t31_ts1755351743527;
  wire [4:0] t32_ts1755351743527;
  wire [15:0] t33_ts1755351743527;
  wire [15:0] t34_ts1755351743527;
  wire [15:0] t35_ts1755351743527;
  wire [15:0] t36_ts1755351743527;
  wire [15:0] t37_ts1755351743527;
  wire [15:0] t38_ts1755351743527;
  wire [15:0] t39_ts1755351743527;
  wire [15:0] t40_ts1755351743527;
  wire [15:0] t5_ts1755351743527;
  wire [15:0] t6_ts1755351743527;
  wire tri_sig;
  assign eq = in === 1'hz;
  assign neq = in !== 1'hz;
  assign inj_out_val_1755351743831_180 = in ? inj_val_true_1755351743831_159 : inj_val_false_1755351743831_806;
  multi_always_comb multi_always_comb_inst_1755351743486_2125 (
    .in1(inj_in1_1755351743486_683),
    .in2(inj_in2_1755351743486_583),
    .out1(inj_out1_1755351743486_508),
    .out2(inj_out2_1755351743486_898)
  );
  remaining_reduction_ops remaining_reduction_ops_inst_1755351743714_5811 (
    .in1(inj_in1_1755351743714_553),
    .in2(inj_in_val_m10_1755351743672_115),
    .in3(inj_in3_1755351743714_88),
    .nand_out(inj_nand_out_1755351743714_339),
    .nor_out(inj_nor_out_1755351743714_351),
    .xnor_out(inj_xnor_out_1755351743714_231)
  );
  unsupported_cond_expr unsupported_cond_expr_inst_1755351743672_127 (
    .condition_m10(inj_condition_m10_1755351743672_470),
    .in_val_m10(inj_in_val_m10_1755351743672_115),
    .out_val_m10(inj_out_val_m10_1755351743672_256)
  );
  assign inj_d_out_1755351743739_966 = inj_condition_m10_1755351743672_470;
  assign inj_data_out_pl_1755351743721_740 = { inj_data_in_pl_1755351743721_249[4:1], inj_data_in_pl_1755351743721_249[1] };
  assign inj_dcac_end_val_1755351743527_10 = 16'h01fe;
  assign my_packed_logic_ts1755351743721 = { inj_data_in_pl_1755351743721_249[9:1], in };
  assign t11_ts1755351743527[15:1] = 15'h0005;
  assign t13_ts1755351743527[14:5] = { t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15] };
  assign { t14_ts1755351743527[15:4], t14_ts1755351743527[0] } = { t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[4], t13_ts1755351743527[0] };
  assign t15_ts1755351743527 = { t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[15], t13_ts1755351743527[4], 4'hf };
  assign { t20_ts1755351743527[4], t20_ts1755351743527[2] } = 2'h3;
  assign { t25_ts1755351743527[2], t25_ts1755351743527[0] } = 2'h3;
  assign { t26_ts1755351743527[15:2], t26_ts1755351743527[0] } = 15'h0002;
  assign t27_ts1755351743527 = 1'h1;
  assign t28_ts1755351743527 = 1'h1;
  assign t29_ts1755351743527 = 1'h0;
  assign { t30_ts1755351743527[3], t30_ts1755351743527[1:0] } = 3'h6;
  assign t31_ts1755351743527 = 16'h000a;
  assign t32_ts1755351743527 = 5'h16;
  assign t33_ts1755351743527 = 16'h0009;
  assign { t34_ts1755351743527[15:4], t34_ts1755351743527[0] } = 13'h0001;
  assign t35_ts1755351743527 = 16'h000f;
  assign t36_ts1755351743527 = 16'h001f;
  assign t37_ts1755351743527 = 16'h020f;
  assign t38_ts1755351743527 = 16'h01fd;
  assign { t39_ts1755351743527[15:5], t39_ts1755351743527[3:0] } = 15'h00fe;
  assign t40_ts1755351743527 = 16'h01fe;
  assign { t5_ts1755351743527[2], t5_ts1755351743527[0] } = 2'h3;
  assign { t6_ts1755351743527[15:2], t6_ts1755351743527[0] } = 15'h0002;
  assign tri_sig = 1'hz;
endmodule

module multi_always_comb(in1, in2, out1, out2);
  input [7:0] in1;
  wire [7:0] in1;
  input [7:0] in2;
  wire [7:0] in2;
  wire [7:0] intermediate1;
  wire [7:0] intermediate2;
  output [7:0] out1;
  wire [7:0] out1;
  output [7:0] out2;
  wire [7:0] out2;
  assign out1 = intermediate1 + 1'h1;
  assign intermediate1 = in1 & in2;
  assign intermediate2 = in1 | in2;
  assign out2 = intermediate2 - 1'h1;
endmodule

module remaining_reduction_ops(in1, in2, in3, nand_out, nor_out, xnor_out);
  wire _0_;
  wire _1_;
  input [7:0] in1;
  wire [7:0] in1;
  input [7:0] in2;
  wire [7:0] in2;
  input [7:0] in3;
  wire [7:0] in3;
  output nand_out;
  wire nand_out;
  output nor_out;
  wire nor_out;
  output xnor_out;
  wire xnor_out;
  assign nand_out = ! _0_;
  assign nor_out = ! _1_;
  assign _0_ = & in1;
  assign _1_ = | in2;
  assign xnor_out = ~^ in3;
endmodule

module unsupported_cond_expr(condition_m10, in_val_m10, out_val_m10);
  input condition_m10;
  wire condition_m10;
  input [7:0] in_val_m10;
  wire [7:0] in_val_m10;
  output [7:0] out_val_m10;
  wire [7:0] out_val_m10;
  assign out_val_m10 = in_val_m10;
endmodule
