// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go

module top;
    logic clk;
    logic in;
    logic [3:0] inj_control_1755304758505_57;
    logic [7:0] inj_data_a_1755304758505_682;
    logic [7:0] inj_data_b_1755304758505_655;
    logic [1:0] inj_in_val_1755304758570_619;
    logic rst;
    logic eq;
    logic [7:0] inj_o_sum_1755304758694_598;
    logic inj_out_b_1755304758633_602;
    logic inj_out_res_1755304758570_971;
    logic [7:0] inj_result1_1755304758505_998;
    logic [7:0] inj_result2_1755304758505_658;
    logic neq;

    m_caseeq_demo dut (
        .clk(clk),
        .in(in),
        .inj_control_1755304758505_57(inj_control_1755304758505_57),
        .inj_data_a_1755304758505_682(inj_data_a_1755304758505_682),
        .inj_data_b_1755304758505_655(inj_data_b_1755304758505_655),
        .inj_in_val_1755304758570_619(inj_in_val_1755304758570_619),
        .rst(rst),
        .eq(eq),
        .inj_o_sum_1755304758694_598(inj_o_sum_1755304758694_598),
        .inj_out_b_1755304758633_602(inj_out_b_1755304758633_602),
        .inj_out_res_1755304758570_971(inj_out_res_1755304758570_971),
        .inj_result1_1755304758505_998(inj_result1_1755304758505_998),
        .inj_result2_1755304758505_658(inj_result2_1755304758505_658),
        .neq(neq)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 5 input files
        clk = 0;

        fd = $fopen("input_in.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_in.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", in);
        $fclose(fd);

        fd = $fopen("input_inj_control_1755304758505_57.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_control_1755304758505_57.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_control_1755304758505_57);
        $fclose(fd);

        fd = $fopen("input_inj_data_a_1755304758505_682.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_data_a_1755304758505_682.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_data_a_1755304758505_682);
        $fclose(fd);

        fd = $fopen("input_inj_data_b_1755304758505_655.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_data_b_1755304758505_655.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_data_b_1755304758505_655);
        $fclose(fd);

        fd = $fopen("input_inj_in_val_1755304758570_619.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in_val_1755304758570_619.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in_val_1755304758570_619);
        $fclose(fd);
        rst = 0;


        // Toggle reset if a reset signal was identified

        // Toggle reset signal rst
        rst = 1; // Assert reset (active high)
        #10;
        rst = 0; // De-assert reset
        #10; // Wait after de-asserting reset


        // Toggle clock signals

        // Toggle clocks for several cycles with timeout protection
        // Set simulation timeout to prevent infinite loops
        fork
            begin
                #780;
                $display("ERROR: Simulation timeout after 780 time units");
                $finish;
            end
            begin
                repeat (50) begin
                    clk = 0;
                    #5;
                    clk = 1;
                    #5;
                end
            end
        join_any
        disable fork; // Kill timeout process


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 7 output files

        fd = $fopen("output_eq.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_eq.hex' for port 'eq'.", "output_eq.hex", "eq");
            $finish;
        end
        $fwrite(fd, "%b\n", eq);
        $fclose(fd);

        fd = $fopen("output_inj_o_sum_1755304758694_598.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_o_sum_1755304758694_598.hex' for port 'inj_o_sum_1755304758694_598'.", "output_inj_o_sum_1755304758694_598.hex", "inj_o_sum_1755304758694_598");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_o_sum_1755304758694_598[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_out_b_1755304758633_602.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out_b_1755304758633_602.hex' for port 'inj_out_b_1755304758633_602'.", "output_inj_out_b_1755304758633_602.hex", "inj_out_b_1755304758633_602");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_out_b_1755304758633_602);
        $fclose(fd);

        fd = $fopen("output_inj_out_res_1755304758570_971.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out_res_1755304758570_971.hex' for port 'inj_out_res_1755304758570_971'.", "output_inj_out_res_1755304758570_971.hex", "inj_out_res_1755304758570_971");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_out_res_1755304758570_971);
        $fclose(fd);

        fd = $fopen("output_inj_result1_1755304758505_998.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_result1_1755304758505_998.hex' for port 'inj_result1_1755304758505_998'.", "output_inj_result1_1755304758505_998.hex", "inj_result1_1755304758505_998");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_result1_1755304758505_998[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_result2_1755304758505_658.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_result2_1755304758505_658.hex' for port 'inj_result2_1755304758505_658'.", "output_inj_result2_1755304758505_658.hex", "inj_result2_1755304758505_658");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_result2_1755304758505_658[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_neq.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_neq.hex' for port 'neq'.", "output_neq.hex", "neq");
            $finish;
        end
        $fwrite(fd, "%b\n", neq);
        $fclose(fd);


        $finish;
    end
endmodule