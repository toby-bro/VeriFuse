// Yosys script used:
// read_verilog -sv dist/worker_0_1755304758197631370_0/m_caseeq_demo.sv; prep -top m_caseeq_demo; opt_dff; abc; opt_lut; opt_merge -nomux; fsm_extract; hierarchy; write_verilog -sv -noattr dist/worker_0_1755304758197631370_0/m_caseeq_demo-Yosys.sv
/* Generated by Yosys 0.55+23 (git sha1 e57a2b944, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

module case_default(in_val, out_res);
  wire _0_;
  input [1:0] in_val;
  wire [1:0] in_val;
  output out_res;
  wire out_res;
  assign out_res = _0_ ? 1'h0 : 1'h1;
  assign _0_ = in_val == 2'h2;
endmodule

module dup_cond(control, data_a, data_b, result1, result2);
  wire [7:0] _00_;
  wire [7:0] _01_;
  wire [7:0] _02_;
  wire [7:0] _03_;
  wire [7:0] _04_;
  wire [7:0] _05_;
  wire [7:0] _06_;
  wire [7:0] _07_;
  wire _08_;
  wire _09_;
  wire [31:0] _10_;
  wire _11_;
  wire _12_;
  wire [7:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire [7:0] _18_;
  input [3:0] control;
  wire [3:0] control;
  input [7:0] data_a;
  wire [7:0] data_a;
  input [7:0] data_b;
  wire [7:0] data_b;
  output [7:0] result1;
  wire [7:0] result1;
  output [7:0] result2;
  wire [7:0] result2;
  assign _05_ = data_a + data_b;
  assign _06_ = _02_ + 1'h1;
  assign _07_ = data_a & data_b;
  assign _08_ = | { _15_, _14_ };
  assign _09_ = | { _17_, _16_ };
  assign _11_ = control[0] == control[1];
  assign _12_ = control[2] != control[3];
  assign _13_ = data_a | data_b;
  assign _04_ = _12_ ? _10_[7:0] : _03_;
  assign result1 = _11_ ? _06_ : _02_;
  assign result2 = _11_ ? _03_ : _04_;
  function [7:0] _30_;
    input [7:0] a;
    input [23:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _30_ = b[7:0];
      3'b?1?:
        _30_ = b[15:8];
      3'b1??:
        _30_ = b[23:16];
      default:
        _30_ = a;
    endcase
  endfunction
  assign _02_ = _30_(8'hxx, { _07_, _13_, _00_ }, { _17_, _16_, _08_ });
  assign _14_ = control[3:2] == 2'h3;
  assign _15_ = control[3:2] == 2'h2;
  assign _16_ = control[3:2] == 1'h1;
  assign _17_ = ! control[3:2];
  function [7:0] _35_;
    input [7:0] a;
    input [23:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _35_ = b[7:0];
      3'b?1?:
        _35_ = b[15:8];
      3'b1??:
        _35_ = b[23:16];
      default:
        _35_ = a;
    endcase
  endfunction
  assign _03_ = _35_(8'hxx, { _01_, _07_, _13_ }, { _09_, _15_, _14_ });
  assign _01_ = control[1] ? _18_ : _05_;
  assign _00_ = control[0] ? _05_ : _18_;
  assign _18_ = data_a - data_b;
  assign _10_[7:0] = _03_ - 1'h1;
endmodule

module m_caseeq_demo(clk, in, inj_control_1755304758505_57, inj_data_a_1755304758505_682, inj_data_b_1755304758505_655, inj_in_val_1755304758570_619, rst, eq, inj_o_sum_1755304758694_598, inj_out_b_1755304758633_602, inj_out_res_1755304758570_971, inj_result1_1755304758505_998, inj_result2_1755304758505_658, neq);
  input clk;
  wire clk;
  output eq;
  wire eq;
  input in;
  wire in;
  input [3:0] inj_control_1755304758505_57;
  wire [3:0] inj_control_1755304758505_57;
  input [7:0] inj_data_a_1755304758505_682;
  wire [7:0] inj_data_a_1755304758505_682;
  input [7:0] inj_data_b_1755304758505_655;
  wire [7:0] inj_data_b_1755304758505_655;
  input [1:0] inj_in_val_1755304758570_619;
  wire [1:0] inj_in_val_1755304758570_619;
  output [7:0] inj_o_sum_1755304758694_598;
  wire [7:0] inj_o_sum_1755304758694_598;
  output inj_out_b_1755304758633_602;
  wire inj_out_b_1755304758633_602;
  output inj_out_res_1755304758570_971;
  wire inj_out_res_1755304758570_971;
  output [7:0] inj_result1_1755304758505_998;
  wire [7:0] inj_result1_1755304758505_998;
  output [7:0] inj_result2_1755304758505_658;
  wire [7:0] inj_result2_1755304758505_658;
  output neq;
  wire neq;
  input rst;
  wire rst;
  wire tri_sig;
  assign eq = in === 1'hz;
  assign neq = in !== 1'hz;
  case_default case_default_inst_1755304758570_8438 (
    .in_val(inj_in_val_1755304758570_619),
    .out_res(inj_out_res_1755304758570_971)
  );
  dup_cond dup_cond_inst_1755304758505_2928 (
    .control(inj_control_1755304758505_57),
    .data_a(inj_data_a_1755304758505_682),
    .data_b(inj_data_b_1755304758505_655),
    .result1(inj_result1_1755304758505_998),
    .result2(inj_result2_1755304758505_658)
  );
  param_local_port param_local_port_inst_1755304758694_5650 (
    .i_reset(rst),
    .o_sum(inj_o_sum_1755304758694_598)
  );
  assign inj_out_b_1755304758633_602 = in;
  assign tri_sig = 1'hz;
endmodule

module param_local_port(i_reset, o_sum);
  input i_reset;
  wire i_reset;
  output [7:0] o_sum;
  wire [7:0] o_sum;
  assign o_sum = i_reset ? 8'h00 : 8'h96;
endmodule
