// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go

module top;
    logic clk;
    logic in;
    logic [1:0] inj_large_data_in_1755425167553_111;
    logic rst;
    logic eq;
    logic [7:0] inj_large_sum_out_1755425167553_885;
    logic neq;

    m_caseeq_demo dut (
        .clk(clk),
        .in(in),
        .inj_large_data_in_1755425167553_111(inj_large_data_in_1755425167553_111),
        .rst(rst),
        .eq(eq),
        .inj_large_sum_out_1755425167553_885(inj_large_sum_out_1755425167553_885),
        .neq(neq)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 2 input files
        clk = 0;

        fd = $fopen("input_in.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_in.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", in);
        $fclose(fd);

        fd = $fopen("input_inj_large_data_in_1755425167553_111.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_large_data_in_1755425167553_111.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_large_data_in_1755425167553_111);
        $fclose(fd);
        rst = 0;


        // Toggle reset if a reset signal was identified

        // Toggle reset signal rst
        rst = 1; // Assert reset (active high)
        #10;
        rst = 0; // De-assert reset
        #10; // Wait after de-asserting reset


        // Toggle clock signals

        // Toggle clocks for several cycles with timeout protection
        // Set simulation timeout to prevent infinite loops
        fork
            begin
                #780;
                $display("ERROR: Simulation timeout after 780 time units");
                $finish;
            end
            begin
                repeat (50) begin
                    clk = 0;
                    #5;
                    clk = 1;
                    #5;
                end
            end
        join_any
        disable fork; // Kill timeout process


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 3 output files

        fd = $fopen("output_eq.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_eq.hex' for port 'eq'.", "output_eq.hex", "eq");
            $finish;
        end
        $fwrite(fd, "%b\n", eq);
        $fclose(fd);

        fd = $fopen("output_inj_large_sum_out_1755425167553_885.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_large_sum_out_1755425167553_885.hex' for port 'inj_large_sum_out_1755425167553_885'.", "output_inj_large_sum_out_1755425167553_885.hex", "inj_large_sum_out_1755425167553_885");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_large_sum_out_1755425167553_885[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_neq.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_neq.hex' for port 'neq'.", "output_neq.hex", "neq");
            $finish;
        end
        $fwrite(fd, "%b\n", neq);
        $fclose(fd);


        $finish;
    end
endmodule