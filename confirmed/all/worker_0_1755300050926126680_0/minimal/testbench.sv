// Code your testbench here
// or browse Examples
// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go

module top;
    logic rst;
    logic [15:0] crc_o;
    logic clk;
    logic [31:0] data_i;
    logic [7:0] id_i;

    class_user dut (
        .rst(rst),
        .crc_o(crc_o),
        .clk(clk),
        .data_i(data_i),
        .id_i(id_i)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 4 input files
        rst = 'h0;
        clk = 'h0;
        data_i = 'hffffffff;
        id_i = 'hf7;


        // Toggle reset if a reset signal was identified

        // Toggle reset signal rst
        rst = 1; // Assert reset (active high)
        #10;
        rst = 0; // De-assert reset
        #10; // Wait after de-asserting reset


        // Toggle clock signals

        // Toggle clocks for several cycles with timeout protection
        // Set simulation timeout to prevent infinite loops
        fork
            begin
                #780;
                $display("ERROR: Simulation timeout after 780 time units");
                $finish;
            end
            begin
                repeat (50) begin
                    clk = 0;
                    #5;
                    clk = 1;
                    #5;
                end
            end
        join_any
        disable fork; // Kill timeout process


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 1 output files

        $display("CRC_O: %16b", crc_o);
        $finish;
    end
endmodule