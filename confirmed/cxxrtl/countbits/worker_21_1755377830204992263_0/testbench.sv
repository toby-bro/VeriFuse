// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go

module top;
    logic clk;
    logic [7:0] in_d;
    logic [3:0] inj_case_inside_val_1755377830573_7;
    logic inj_in_a_1755377830652_305;
    logic inj_in_b_1755377830652_350;
    logic [31:0] inj_p_in1_1755377830570_818;
    logic [31:0] inj_p_in2_1755377830570_72;
    logic [1:0] inj_p_mode_1755377830570_231;
    logic rst;
    logic [3:0] cnt;
    logic [4:0] inj_internal_out_1755377830573_477;
    logic inj_out_c_1755377830652_372;
    logic [31:0] inj_p_out_1755377830570_901;

    countbits_ops dut (
        .clk(clk),
        .in_d(in_d),
        .inj_case_inside_val_1755377830573_7(inj_case_inside_val_1755377830573_7),
        .inj_in_a_1755377830652_305(inj_in_a_1755377830652_305),
        .inj_in_b_1755377830652_350(inj_in_b_1755377830652_350),
        .inj_p_in1_1755377830570_818(inj_p_in1_1755377830570_818),
        .inj_p_in2_1755377830570_72(inj_p_in2_1755377830570_72),
        .inj_p_mode_1755377830570_231(inj_p_mode_1755377830570_231),
        .rst(rst),
        .cnt(cnt),
        .inj_internal_out_1755377830573_477(inj_internal_out_1755377830573_477),
        .inj_out_c_1755377830652_372(inj_out_c_1755377830652_372),
        .inj_p_out_1755377830570_901(inj_p_out_1755377830570_901)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 7 input files
        clk = 0;

        fd = $fopen("input_in_d.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_in_d.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", in_d);
        $fclose(fd);

        fd = $fopen("input_inj_case_inside_val_1755377830573_7.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_case_inside_val_1755377830573_7.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_case_inside_val_1755377830573_7);
        $fclose(fd);

        fd = $fopen("input_inj_in_a_1755377830652_305.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in_a_1755377830652_305.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in_a_1755377830652_305);
        $fclose(fd);

        fd = $fopen("input_inj_in_b_1755377830652_350.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in_b_1755377830652_350.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in_b_1755377830652_350);
        $fclose(fd);

        fd = $fopen("input_inj_p_in1_1755377830570_818.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_p_in1_1755377830570_818.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_p_in1_1755377830570_818);
        $fclose(fd);

        fd = $fopen("input_inj_p_in2_1755377830570_72.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_p_in2_1755377830570_72.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_p_in2_1755377830570_72);
        $fclose(fd);

        fd = $fopen("input_inj_p_mode_1755377830570_231.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_p_mode_1755377830570_231.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_p_mode_1755377830570_231);
        $fclose(fd);
        rst = 0;


        // Toggle reset if a reset signal was identified

        // Toggle reset signal rst
        rst = 1; // Assert reset (active high)
        #10;
        rst = 0; // De-assert reset
        #10; // Wait after de-asserting reset


        // Toggle clock signals

        // Toggle clocks for several cycles with timeout protection
        // Set simulation timeout to prevent infinite loops
        fork
            begin
                #780;
                $display("ERROR: Simulation timeout after 780 time units");
                $finish;
            end
            begin
                repeat (50) begin
                    clk = 0;
                    #5;
                    clk = 1;
                    #5;
                end
            end
        join_any
        disable fork; // Kill timeout process


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 4 output files

        fd = $fopen("output_cnt.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_cnt.hex' for port 'cnt'.", "output_cnt.hex", "cnt");
            $finish;
        end
        for (int i = 3; i >= 0; i--) begin
            $fwrite(fd, "%b", cnt[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_internal_out_1755377830573_477.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_internal_out_1755377830573_477.hex' for port 'inj_internal_out_1755377830573_477'.", "output_inj_internal_out_1755377830573_477.hex", "inj_internal_out_1755377830573_477");
            $finish;
        end
        for (int i = 4; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_internal_out_1755377830573_477[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_out_c_1755377830652_372.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out_c_1755377830652_372.hex' for port 'inj_out_c_1755377830652_372'.", "output_inj_out_c_1755377830652_372.hex", "inj_out_c_1755377830652_372");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_out_c_1755377830652_372);
        $fclose(fd);

        fd = $fopen("output_inj_p_out_1755377830570_901.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_p_out_1755377830570_901.hex' for port 'inj_p_out_1755377830570_901'.", "output_inj_p_out_1755377830570_901.hex", "inj_p_out_1755377830570_901");
            $finish;
        end
        for (int i = 31; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_p_out_1755377830570_901[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);


        $finish;
    end
endmodule