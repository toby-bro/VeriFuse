// Generated C++ testbench for CXXRTL
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
#include "countbits_ops.cc" // CXXRTL generated header for the module

#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdint>
#include <string>
#include <sstream>
#include <type_traits>

// Template helpers to detect and work with both value<> and wire<> types
template<typename T>
struct has_curr {
    template<typename U>
    static auto test(int) -> decltype(std::declval<U>().curr, std::true_type{});
    template<typename>
    static std::false_type test(...);
    using type = decltype(test<T>(0));
    static constexpr bool value = type::value;
};

// Helper function to get port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.curr.template get<T>();
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.template get<T>();
}

// Helper function to get port bit - works with both value<> and wire<>
template<typename PortType>
typename std::enable_if<has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.curr.bit(bit);
}

template<typename PortType>
typename std::enable_if<!has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.bit(bit);
}

// Helper function to get wide port value - works with both value<> and wire<>
template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<has_curr<PortType>::value, decltype(port.curr)>::type {
    return port.curr;
}

template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<!has_curr<PortType>::value, PortType>::type {
    return port;
}

// Helper function to set port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.next.template set<T>(value);
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.template set<T>(value);
}

// Helper function to set wide port value - works with both value<> and wire<>
template<typename PortType, typename ValueType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port.next = value;
}

template<typename PortType, typename ValueType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port = value;
}

int main(int argc, char** argv) {
    cxxrtl_design::p_countbits__ops countbits_ops_i; // DUT instance

    // Declare input variables
    bool clk;
    uint8_t in_d;
    bool inj_condition_y_1755425388970_81;
    uint8_t inj_in_val_1755425388934_179;
    bool rst;


    // Read input values
    std::ifstream clk_file("input_clk.hex");
    if (!clk_file.is_open()) {
        std::cerr << "Failed to open input file for clk: input_clk.hex" << std::endl;
        return 1;
    }
    std::string clk_hex_str;
    clk_file >> clk_hex_str;
    if (clk_file.fail() && !clk_file.eof()) {
        std::cerr << "Failed to read hex string for clk from input file: input_clk.hex" << std::endl;
        clk_file.close();
        return 1;
    }
    std::stringstream ss_clk;
    ss_clk << std::hex << clk_hex_str;
    unsigned int temp_clk;
    if (!(ss_clk >> temp_clk)) {
        std::cerr << "Failed to parse hex value for clk: " << clk_hex_str << std::endl;
        clk_file.close();
        return 1;
    }
    clk = static_cast<bool>(temp_clk);
    clk_file.close();

    std::ifstream in_d_file("input_in_d.hex");
    if (!in_d_file.is_open()) {
        std::cerr << "Failed to open input file for in_d: input_in_d.hex" << std::endl;
        return 1;
    }
    std::string in_d_hex_str;
    in_d_file >> in_d_hex_str;
    if (in_d_file.fail() && !in_d_file.eof()) {
        std::cerr << "Failed to read hex string for in_d from input file: input_in_d.hex" << std::endl;
        in_d_file.close();
        return 1;
    }
    std::stringstream ss_in_d;
    ss_in_d << std::hex << in_d_hex_str;
    unsigned int temp_in_d;
    if (!(ss_in_d >> temp_in_d)) {
        std::cerr << "Failed to parse hex value for in_d: " << in_d_hex_str << std::endl;
        in_d_file.close();
        return 1;
    }
    in_d = static_cast<uint8_t>(temp_in_d);
    in_d_file.close();

    std::ifstream inj_condition_y_1755425388970_81_file("input_inj_condition_y_1755425388970_81.hex");
    if (!inj_condition_y_1755425388970_81_file.is_open()) {
        std::cerr << "Failed to open input file for inj_condition_y_1755425388970_81: input_inj_condition_y_1755425388970_81.hex" << std::endl;
        return 1;
    }
    std::string inj_condition_y_1755425388970_81_hex_str;
    inj_condition_y_1755425388970_81_file >> inj_condition_y_1755425388970_81_hex_str;
    if (inj_condition_y_1755425388970_81_file.fail() && !inj_condition_y_1755425388970_81_file.eof()) {
        std::cerr << "Failed to read hex string for inj_condition_y_1755425388970_81 from input file: input_inj_condition_y_1755425388970_81.hex" << std::endl;
        inj_condition_y_1755425388970_81_file.close();
        return 1;
    }
    std::stringstream ss_inj_condition_y_1755425388970_81;
    ss_inj_condition_y_1755425388970_81 << std::hex << inj_condition_y_1755425388970_81_hex_str;
    unsigned int temp_inj_condition_y_1755425388970_81;
    if (!(ss_inj_condition_y_1755425388970_81 >> temp_inj_condition_y_1755425388970_81)) {
        std::cerr << "Failed to parse hex value for inj_condition_y_1755425388970_81: " << inj_condition_y_1755425388970_81_hex_str << std::endl;
        inj_condition_y_1755425388970_81_file.close();
        return 1;
    }
    inj_condition_y_1755425388970_81 = static_cast<bool>(temp_inj_condition_y_1755425388970_81);
    inj_condition_y_1755425388970_81_file.close();

    std::ifstream inj_in_val_1755425388934_179_file("input_inj_in_val_1755425388934_179.hex");
    if (!inj_in_val_1755425388934_179_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_val_1755425388934_179: input_inj_in_val_1755425388934_179.hex" << std::endl;
        return 1;
    }
    std::string inj_in_val_1755425388934_179_hex_str;
    inj_in_val_1755425388934_179_file >> inj_in_val_1755425388934_179_hex_str;
    if (inj_in_val_1755425388934_179_file.fail() && !inj_in_val_1755425388934_179_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_val_1755425388934_179 from input file: input_inj_in_val_1755425388934_179.hex" << std::endl;
        inj_in_val_1755425388934_179_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_val_1755425388934_179;
    ss_inj_in_val_1755425388934_179 << std::hex << inj_in_val_1755425388934_179_hex_str;
    unsigned int temp_inj_in_val_1755425388934_179;
    if (!(ss_inj_in_val_1755425388934_179 >> temp_inj_in_val_1755425388934_179)) {
        std::cerr << "Failed to parse hex value for inj_in_val_1755425388934_179: " << inj_in_val_1755425388934_179_hex_str << std::endl;
        inj_in_val_1755425388934_179_file.close();
        return 1;
    }
    inj_in_val_1755425388934_179 = static_cast<uint8_t>(temp_inj_in_val_1755425388934_179);
    inj_in_val_1755425388934_179_file.close();

    std::ifstream rst_file("input_rst.hex");
    if (!rst_file.is_open()) {
        std::cerr << "Failed to open input file for rst: input_rst.hex" << std::endl;
        return 1;
    }
    std::string rst_hex_str;
    rst_file >> rst_hex_str;
    if (rst_file.fail() && !rst_file.eof()) {
        std::cerr << "Failed to read hex string for rst from input file: input_rst.hex" << std::endl;
        rst_file.close();
        return 1;
    }
    std::stringstream ss_rst;
    ss_rst << std::hex << rst_hex_str;
    unsigned int temp_rst;
    if (!(ss_rst >> temp_rst)) {
        std::cerr << "Failed to parse hex value for rst: " << rst_hex_str << std::endl;
        rst_file.close();
        return 1;
    }
    rst = static_cast<bool>(temp_rst);
    rst_file.close();



    // Apply inputs to DUT
    _set_port_value<bool>(countbits_ops_i.p_clk, clk);
    _set_port_value<uint8_t>(countbits_ops_i.p_in__d, in_d);
    _set_port_value<bool>(countbits_ops_i.p_inj__condition__y__1755425388970__81, inj_condition_y_1755425388970_81);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__in__val__1755425388934__179, inj_in_val_1755425388934_179);
    _set_port_value<bool>(countbits_ops_i.p_rst, rst);
    // Input application


    // Handle reset, clock toggling, and evaluation

    // Toggle reset signal p_rst
    countbits_ops_i.p_rst.set<bool>(true); // Assert reset (active high)
    countbits_ops_i.step(); // Step to propagate reset assertion
    countbits_ops_i.p_rst.set<bool>(false); // De-assert reset
    countbits_ops_i.step(); // Step to propagate reset de-assertion
    countbits_ops_i.step(); // Extra step for settling after reset

    // Clock toggling with bounded cycles to prevent infinite loops
    for (int cycle = 0; cycle < 50; cycle++) {
        _set_port_value<bool>(countbits_ops_i.p_clk, false);
        countbits_ops_i.step(); // clock low
        _set_port_value<bool>(countbits_ops_i.p_clk, true);
        countbits_ops_i.step(); // clock high
    }

    // Bounded evaluation steps to ensure all logic settles (max 20 steps)
    for (int settle_step = 0; settle_step < 20; settle_step++) {
        countbits_ops_i.step();
    }


    // Write outputs from DUT
    std::ofstream cnt_file("output_cnt.hex");
    if (!cnt_file.is_open()) {
        std::cerr << "Failed to open output file for cnt: output_cnt.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        cnt_file << (_get_port_value(countbits_ops_i.p_cnt, i) ? '1' : '0');
    }
    cnt_file << std::endl;
    cnt_file.close();

    std::ofstream inj_data_b_1755425388969_538_file("output_inj_data_b_1755425388969_538.hex");
    if (!inj_data_b_1755425388969_538_file.is_open()) {
        std::cerr << "Failed to open output file for inj_data_b_1755425388969_538: output_inj_data_b_1755425388969_538.hex" << std::endl;
        return 1;
    }
    inj_data_b_1755425388969_538_file << (_get_port_value(countbits_ops_i.p_inj__data__b__1755425388969__538, 0) ? '1' : '0') << std::endl;
    inj_data_b_1755425388969_538_file.close();

    std::ofstream inj_out_res_1755425388934_531_file("output_inj_out_res_1755425388934_531.hex");
    if (!inj_out_res_1755425388934_531_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_res_1755425388934_531: output_inj_out_res_1755425388934_531.hex" << std::endl;
        return 1;
    }
    inj_out_res_1755425388934_531_file << (_get_port_value(countbits_ops_i.p_inj__out__res__1755425388934__531, 0) ? '1' : '0') << std::endl;
    inj_out_res_1755425388934_531_file.close();

    std::ofstream inj_out_vec_y_1755425388970_237_file("output_inj_out_vec_y_1755425388970_237.hex");
    if (!inj_out_vec_y_1755425388970_237_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_vec_y_1755425388970_237: output_inj_out_vec_y_1755425388970_237.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_vec_y_1755425388970_237_file << (_get_port_value(countbits_ops_i.p_inj__out__vec__y__1755425388970__237, i) ? '1' : '0');
    }
    inj_out_vec_y_1755425388970_237_file << std::endl;
    inj_out_vec_y_1755425388970_237_file.close();



    return 0;
}
