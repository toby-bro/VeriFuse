// Generated C++ testbench for CXXRTL
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
#include "countbits_ops.cc" // CXXRTL generated header for the module

#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdint>
#include <string>
#include <sstream>
#include <type_traits>

// Template helpers to detect and work with both value<> and wire<> types
template<typename T>
struct has_curr {
    template<typename U>
    static auto test(int) -> decltype(std::declval<U>().curr, std::true_type{});
    template<typename>
    static std::false_type test(...);
    using type = decltype(test<T>(0));
    static constexpr bool value = type::value;
};

// Helper function to get port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.curr.template get<T>();
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.template get<T>();
}

// Helper function to get port bit - works with both value<> and wire<>
template<typename PortType>
typename std::enable_if<has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.curr.bit(bit);
}

template<typename PortType>
typename std::enable_if<!has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.bit(bit);
}

// Helper function to get wide port value - works with both value<> and wire<>
template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<has_curr<PortType>::value, decltype(port.curr)>::type {
    return port.curr;
}

template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<!has_curr<PortType>::value, PortType>::type {
    return port;
}

// Helper function to set port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.next.template set<T>(value);
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.template set<T>(value);
}

// Helper function to set wide port value - works with both value<> and wire<>
template<typename PortType, typename ValueType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port.next = value;
}

template<typename PortType, typename ValueType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port = value;
}

int main(int argc, char** argv) {
    cxxrtl_design::p_countbits__ops countbits_ops_i; // DUT instance

    // Declare input variables
    bool clk;
    uint8_t in_d;
    uint8_t inj_c_1755327926877_515;
    bool inj_condition_m10_1755327926899_772;
    bool inj_in_a_1755327926597_456;
    bool inj_in_b_1755327926597_288;
    uint32_t inj_in_val_1755327926679_968;
    uint8_t inj_in_val_1755327927134_292;
    uint8_t inj_wdata_1755327926605_780;
    uint64_t inj_wide_a_1755327927347_668;
    uint64_t inj_wide_b_1755327927347_670;
    bool rst;


    // Read input values
    std::ifstream clk_file("input_clk.hex");
    if (!clk_file.is_open()) {
        std::cerr << "Failed to open input file for clk: input_clk.hex" << std::endl;
        return 1;
    }
    std::string clk_hex_str;
    clk_file >> clk_hex_str;
    if (clk_file.fail() && !clk_file.eof()) {
        std::cerr << "Failed to read hex string for clk from input file: input_clk.hex" << std::endl;
        clk_file.close();
        return 1;
    }
    std::stringstream ss_clk;
    ss_clk << std::hex << clk_hex_str;
    unsigned int temp_clk;
    if (!(ss_clk >> temp_clk)) {
        std::cerr << "Failed to parse hex value for clk: " << clk_hex_str << std::endl;
        clk_file.close();
        return 1;
    }
    clk = static_cast<bool>(temp_clk);
    clk_file.close();

    std::ifstream in_d_file("input_in_d.hex");
    if (!in_d_file.is_open()) {
        std::cerr << "Failed to open input file for in_d: input_in_d.hex" << std::endl;
        return 1;
    }
    std::string in_d_hex_str;
    in_d_file >> in_d_hex_str;
    if (in_d_file.fail() && !in_d_file.eof()) {
        std::cerr << "Failed to read hex string for in_d from input file: input_in_d.hex" << std::endl;
        in_d_file.close();
        return 1;
    }
    std::stringstream ss_in_d;
    ss_in_d << std::hex << in_d_hex_str;
    unsigned int temp_in_d;
    if (!(ss_in_d >> temp_in_d)) {
        std::cerr << "Failed to parse hex value for in_d: " << in_d_hex_str << std::endl;
        in_d_file.close();
        return 1;
    }
    in_d = static_cast<uint8_t>(temp_in_d);
    in_d_file.close();

    std::ifstream inj_c_1755327926877_515_file("input_inj_c_1755327926877_515.hex");
    if (!inj_c_1755327926877_515_file.is_open()) {
        std::cerr << "Failed to open input file for inj_c_1755327926877_515: input_inj_c_1755327926877_515.hex" << std::endl;
        return 1;
    }
    std::string inj_c_1755327926877_515_hex_str;
    inj_c_1755327926877_515_file >> inj_c_1755327926877_515_hex_str;
    if (inj_c_1755327926877_515_file.fail() && !inj_c_1755327926877_515_file.eof()) {
        std::cerr << "Failed to read hex string for inj_c_1755327926877_515 from input file: input_inj_c_1755327926877_515.hex" << std::endl;
        inj_c_1755327926877_515_file.close();
        return 1;
    }
    std::stringstream ss_inj_c_1755327926877_515;
    ss_inj_c_1755327926877_515 << std::hex << inj_c_1755327926877_515_hex_str;
    unsigned int temp_inj_c_1755327926877_515;
    if (!(ss_inj_c_1755327926877_515 >> temp_inj_c_1755327926877_515)) {
        std::cerr << "Failed to parse hex value for inj_c_1755327926877_515: " << inj_c_1755327926877_515_hex_str << std::endl;
        inj_c_1755327926877_515_file.close();
        return 1;
    }
    inj_c_1755327926877_515 = static_cast<uint8_t>(temp_inj_c_1755327926877_515);
    inj_c_1755327926877_515_file.close();

    std::ifstream inj_condition_m10_1755327926899_772_file("input_inj_condition_m10_1755327926899_772.hex");
    if (!inj_condition_m10_1755327926899_772_file.is_open()) {
        std::cerr << "Failed to open input file for inj_condition_m10_1755327926899_772: input_inj_condition_m10_1755327926899_772.hex" << std::endl;
        return 1;
    }
    std::string inj_condition_m10_1755327926899_772_hex_str;
    inj_condition_m10_1755327926899_772_file >> inj_condition_m10_1755327926899_772_hex_str;
    if (inj_condition_m10_1755327926899_772_file.fail() && !inj_condition_m10_1755327926899_772_file.eof()) {
        std::cerr << "Failed to read hex string for inj_condition_m10_1755327926899_772 from input file: input_inj_condition_m10_1755327926899_772.hex" << std::endl;
        inj_condition_m10_1755327926899_772_file.close();
        return 1;
    }
    std::stringstream ss_inj_condition_m10_1755327926899_772;
    ss_inj_condition_m10_1755327926899_772 << std::hex << inj_condition_m10_1755327926899_772_hex_str;
    unsigned int temp_inj_condition_m10_1755327926899_772;
    if (!(ss_inj_condition_m10_1755327926899_772 >> temp_inj_condition_m10_1755327926899_772)) {
        std::cerr << "Failed to parse hex value for inj_condition_m10_1755327926899_772: " << inj_condition_m10_1755327926899_772_hex_str << std::endl;
        inj_condition_m10_1755327926899_772_file.close();
        return 1;
    }
    inj_condition_m10_1755327926899_772 = static_cast<bool>(temp_inj_condition_m10_1755327926899_772);
    inj_condition_m10_1755327926899_772_file.close();

    std::ifstream inj_in_a_1755327926597_456_file("input_inj_in_a_1755327926597_456.hex");
    if (!inj_in_a_1755327926597_456_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_a_1755327926597_456: input_inj_in_a_1755327926597_456.hex" << std::endl;
        return 1;
    }
    std::string inj_in_a_1755327926597_456_hex_str;
    inj_in_a_1755327926597_456_file >> inj_in_a_1755327926597_456_hex_str;
    if (inj_in_a_1755327926597_456_file.fail() && !inj_in_a_1755327926597_456_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_a_1755327926597_456 from input file: input_inj_in_a_1755327926597_456.hex" << std::endl;
        inj_in_a_1755327926597_456_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_a_1755327926597_456;
    ss_inj_in_a_1755327926597_456 << std::hex << inj_in_a_1755327926597_456_hex_str;
    unsigned int temp_inj_in_a_1755327926597_456;
    if (!(ss_inj_in_a_1755327926597_456 >> temp_inj_in_a_1755327926597_456)) {
        std::cerr << "Failed to parse hex value for inj_in_a_1755327926597_456: " << inj_in_a_1755327926597_456_hex_str << std::endl;
        inj_in_a_1755327926597_456_file.close();
        return 1;
    }
    inj_in_a_1755327926597_456 = static_cast<bool>(temp_inj_in_a_1755327926597_456);
    inj_in_a_1755327926597_456_file.close();

    std::ifstream inj_in_b_1755327926597_288_file("input_inj_in_b_1755327926597_288.hex");
    if (!inj_in_b_1755327926597_288_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_b_1755327926597_288: input_inj_in_b_1755327926597_288.hex" << std::endl;
        return 1;
    }
    std::string inj_in_b_1755327926597_288_hex_str;
    inj_in_b_1755327926597_288_file >> inj_in_b_1755327926597_288_hex_str;
    if (inj_in_b_1755327926597_288_file.fail() && !inj_in_b_1755327926597_288_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_b_1755327926597_288 from input file: input_inj_in_b_1755327926597_288.hex" << std::endl;
        inj_in_b_1755327926597_288_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_b_1755327926597_288;
    ss_inj_in_b_1755327926597_288 << std::hex << inj_in_b_1755327926597_288_hex_str;
    unsigned int temp_inj_in_b_1755327926597_288;
    if (!(ss_inj_in_b_1755327926597_288 >> temp_inj_in_b_1755327926597_288)) {
        std::cerr << "Failed to parse hex value for inj_in_b_1755327926597_288: " << inj_in_b_1755327926597_288_hex_str << std::endl;
        inj_in_b_1755327926597_288_file.close();
        return 1;
    }
    inj_in_b_1755327926597_288 = static_cast<bool>(temp_inj_in_b_1755327926597_288);
    inj_in_b_1755327926597_288_file.close();

    std::ifstream inj_in_val_1755327926679_968_file("input_inj_in_val_1755327926679_968.hex");
    if (!inj_in_val_1755327926679_968_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_val_1755327926679_968: input_inj_in_val_1755327926679_968.hex" << std::endl;
        return 1;
    }
    std::string inj_in_val_1755327926679_968_hex_str;
    inj_in_val_1755327926679_968_file >> inj_in_val_1755327926679_968_hex_str;
    if (inj_in_val_1755327926679_968_file.fail() && !inj_in_val_1755327926679_968_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_val_1755327926679_968 from input file: input_inj_in_val_1755327926679_968.hex" << std::endl;
        inj_in_val_1755327926679_968_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_val_1755327926679_968;
    ss_inj_in_val_1755327926679_968 << std::hex << inj_in_val_1755327926679_968_hex_str;
    if (!(ss_inj_in_val_1755327926679_968 >> inj_in_val_1755327926679_968)) {
        std::cerr << "Failed to parse hex value for inj_in_val_1755327926679_968: " << inj_in_val_1755327926679_968_hex_str << std::endl;
        inj_in_val_1755327926679_968_file.close();
        return 1;
    }
    inj_in_val_1755327926679_968_file.close();

    std::ifstream inj_in_val_1755327927134_292_file("input_inj_in_val_1755327927134_292.hex");
    if (!inj_in_val_1755327927134_292_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_val_1755327927134_292: input_inj_in_val_1755327927134_292.hex" << std::endl;
        return 1;
    }
    std::string inj_in_val_1755327927134_292_hex_str;
    inj_in_val_1755327927134_292_file >> inj_in_val_1755327927134_292_hex_str;
    if (inj_in_val_1755327927134_292_file.fail() && !inj_in_val_1755327927134_292_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_val_1755327927134_292 from input file: input_inj_in_val_1755327927134_292.hex" << std::endl;
        inj_in_val_1755327927134_292_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_val_1755327927134_292;
    ss_inj_in_val_1755327927134_292 << std::hex << inj_in_val_1755327927134_292_hex_str;
    unsigned int temp_inj_in_val_1755327927134_292;
    if (!(ss_inj_in_val_1755327927134_292 >> temp_inj_in_val_1755327927134_292)) {
        std::cerr << "Failed to parse hex value for inj_in_val_1755327927134_292: " << inj_in_val_1755327927134_292_hex_str << std::endl;
        inj_in_val_1755327927134_292_file.close();
        return 1;
    }
    inj_in_val_1755327927134_292 = static_cast<uint8_t>(temp_inj_in_val_1755327927134_292);
    inj_in_val_1755327927134_292_file.close();

    std::ifstream inj_wdata_1755327926605_780_file("input_inj_wdata_1755327926605_780.hex");
    if (!inj_wdata_1755327926605_780_file.is_open()) {
        std::cerr << "Failed to open input file for inj_wdata_1755327926605_780: input_inj_wdata_1755327926605_780.hex" << std::endl;
        return 1;
    }
    std::string inj_wdata_1755327926605_780_hex_str;
    inj_wdata_1755327926605_780_file >> inj_wdata_1755327926605_780_hex_str;
    if (inj_wdata_1755327926605_780_file.fail() && !inj_wdata_1755327926605_780_file.eof()) {
        std::cerr << "Failed to read hex string for inj_wdata_1755327926605_780 from input file: input_inj_wdata_1755327926605_780.hex" << std::endl;
        inj_wdata_1755327926605_780_file.close();
        return 1;
    }
    std::stringstream ss_inj_wdata_1755327926605_780;
    ss_inj_wdata_1755327926605_780 << std::hex << inj_wdata_1755327926605_780_hex_str;
    unsigned int temp_inj_wdata_1755327926605_780;
    if (!(ss_inj_wdata_1755327926605_780 >> temp_inj_wdata_1755327926605_780)) {
        std::cerr << "Failed to parse hex value for inj_wdata_1755327926605_780: " << inj_wdata_1755327926605_780_hex_str << std::endl;
        inj_wdata_1755327926605_780_file.close();
        return 1;
    }
    inj_wdata_1755327926605_780 = static_cast<uint8_t>(temp_inj_wdata_1755327926605_780);
    inj_wdata_1755327926605_780_file.close();

    std::ifstream inj_wide_a_1755327927347_668_file("input_inj_wide_a_1755327927347_668.hex");
    if (!inj_wide_a_1755327927347_668_file.is_open()) {
        std::cerr << "Failed to open input file for inj_wide_a_1755327927347_668: input_inj_wide_a_1755327927347_668.hex" << std::endl;
        return 1;
    }
    std::string inj_wide_a_1755327927347_668_hex_str;
    inj_wide_a_1755327927347_668_file >> inj_wide_a_1755327927347_668_hex_str;
    if (inj_wide_a_1755327927347_668_file.fail() && !inj_wide_a_1755327927347_668_file.eof()) {
        std::cerr << "Failed to read hex string for inj_wide_a_1755327927347_668 from input file: input_inj_wide_a_1755327927347_668.hex" << std::endl;
        inj_wide_a_1755327927347_668_file.close();
        return 1;
    }
    std::stringstream ss_inj_wide_a_1755327927347_668;
    ss_inj_wide_a_1755327927347_668 << std::hex << inj_wide_a_1755327927347_668_hex_str;
    if (!(ss_inj_wide_a_1755327927347_668 >> inj_wide_a_1755327927347_668)) {
        std::cerr << "Failed to parse hex value for inj_wide_a_1755327927347_668: " << inj_wide_a_1755327927347_668_hex_str << std::endl;
        inj_wide_a_1755327927347_668_file.close();
        return 1;
    }
    inj_wide_a_1755327927347_668_file.close();

    std::ifstream inj_wide_b_1755327927347_670_file("input_inj_wide_b_1755327927347_670.hex");
    if (!inj_wide_b_1755327927347_670_file.is_open()) {
        std::cerr << "Failed to open input file for inj_wide_b_1755327927347_670: input_inj_wide_b_1755327927347_670.hex" << std::endl;
        return 1;
    }
    std::string inj_wide_b_1755327927347_670_hex_str;
    inj_wide_b_1755327927347_670_file >> inj_wide_b_1755327927347_670_hex_str;
    if (inj_wide_b_1755327927347_670_file.fail() && !inj_wide_b_1755327927347_670_file.eof()) {
        std::cerr << "Failed to read hex string for inj_wide_b_1755327927347_670 from input file: input_inj_wide_b_1755327927347_670.hex" << std::endl;
        inj_wide_b_1755327927347_670_file.close();
        return 1;
    }
    std::stringstream ss_inj_wide_b_1755327927347_670;
    ss_inj_wide_b_1755327927347_670 << std::hex << inj_wide_b_1755327927347_670_hex_str;
    if (!(ss_inj_wide_b_1755327927347_670 >> inj_wide_b_1755327927347_670)) {
        std::cerr << "Failed to parse hex value for inj_wide_b_1755327927347_670: " << inj_wide_b_1755327927347_670_hex_str << std::endl;
        inj_wide_b_1755327927347_670_file.close();
        return 1;
    }
    inj_wide_b_1755327927347_670_file.close();

    std::ifstream rst_file("input_rst.hex");
    if (!rst_file.is_open()) {
        std::cerr << "Failed to open input file for rst: input_rst.hex" << std::endl;
        return 1;
    }
    std::string rst_hex_str;
    rst_file >> rst_hex_str;
    if (rst_file.fail() && !rst_file.eof()) {
        std::cerr << "Failed to read hex string for rst from input file: input_rst.hex" << std::endl;
        rst_file.close();
        return 1;
    }
    std::stringstream ss_rst;
    ss_rst << std::hex << rst_hex_str;
    unsigned int temp_rst;
    if (!(ss_rst >> temp_rst)) {
        std::cerr << "Failed to parse hex value for rst: " << rst_hex_str << std::endl;
        rst_file.close();
        return 1;
    }
    rst = static_cast<bool>(temp_rst);
    rst_file.close();



    // Apply inputs to DUT
    _set_port_value<bool>(countbits_ops_i.p_clk, clk);
    _set_port_value<uint8_t>(countbits_ops_i.p_in__d, in_d);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__c__1755327926877__515, inj_c_1755327926877_515);
    _set_port_value<bool>(countbits_ops_i.p_inj__condition__m10__1755327926899__772, inj_condition_m10_1755327926899_772);
    _set_port_value<bool>(countbits_ops_i.p_inj__in__a__1755327926597__456, inj_in_a_1755327926597_456);
    _set_port_value<bool>(countbits_ops_i.p_inj__in__b__1755327926597__288, inj_in_b_1755327926597_288);
    _set_port_value<uint32_t>(countbits_ops_i.p_inj__in__val__1755327926679__968, inj_in_val_1755327926679_968);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__in__val__1755327927134__292, inj_in_val_1755327927134_292);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__wdata__1755327926605__780, inj_wdata_1755327926605_780);
    _set_port_value<uint64_t>(countbits_ops_i.p_inj__wide__a__1755327927347__668, inj_wide_a_1755327927347_668);
    _set_port_value<uint64_t>(countbits_ops_i.p_inj__wide__b__1755327927347__670, inj_wide_b_1755327927347_670);
    _set_port_value<bool>(countbits_ops_i.p_rst, rst);
    // Input application


    // Handle reset, clock toggling, and evaluation

    // Toggle reset signal p_rst
    countbits_ops_i.p_rst.set<bool>(true); // Assert reset (active high)
    countbits_ops_i.step(); // Step to propagate reset assertion
    countbits_ops_i.p_rst.set<bool>(false); // De-assert reset
    countbits_ops_i.step(); // Step to propagate reset de-assertion
    countbits_ops_i.step(); // Extra step for settling after reset

    // Clock toggling with bounded cycles to prevent infinite loops
    for (int cycle = 0; cycle < 50; cycle++) {
        _set_port_value<bool>(countbits_ops_i.p_clk, false);
        countbits_ops_i.step(); // clock low
        _set_port_value<bool>(countbits_ops_i.p_clk, true);
        countbits_ops_i.step(); // clock high
    }

    // Bounded evaluation steps to ensure all logic settles (max 20 steps)
    for (int settle_step = 0; settle_step < 20; settle_step++) {
        countbits_ops_i.step();
    }


    // Write outputs from DUT
    std::ofstream cnt_file("output_cnt.hex");
    if (!cnt_file.is_open()) {
        std::cerr << "Failed to open output file for cnt: output_cnt.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        cnt_file << (_get_port_value(countbits_ops_i.p_cnt, i) ? '1' : '0');
    }
    cnt_file << std::endl;
    cnt_file.close();

    std::ofstream inj_concat_out_1755327927347_427_file("output_inj_concat_out_1755327927347_427.hex");
    if (!inj_concat_out_1755327927347_427_file.is_open()) {
        std::cerr << "Failed to open output file for inj_concat_out_1755327927347_427: output_inj_concat_out_1755327927347_427.hex" << std::endl;
        return 1;
    }
    for (int i = 127; i >= 0; --i) {
        inj_concat_out_1755327927347_427_file << (_get_port_value(countbits_ops_i.p_inj__concat__out__1755327927347__427, i) ? '1' : '0');
    }
    inj_concat_out_1755327927347_427_file << std::endl;
    inj_concat_out_1755327927347_427_file.close();

    std::ofstream inj_o_1755327927318_827_file("output_inj_o_1755327927318_827.hex");
    if (!inj_o_1755327927318_827_file.is_open()) {
        std::cerr << "Failed to open output file for inj_o_1755327927318_827: output_inj_o_1755327927318_827.hex" << std::endl;
        return 1;
    }
    inj_o_1755327927318_827_file << (_get_port_value(countbits_ops_i.p_inj__o__1755327927318__827, 0) ? '1' : '0') << std::endl;
    inj_o_1755327927318_827_file.close();

    std::ofstream inj_out_a_1755327926996_303_file("output_inj_out_a_1755327926996_303.hex");
    if (!inj_out_a_1755327926996_303_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_a_1755327926996_303: output_inj_out_a_1755327926996_303.hex" << std::endl;
        return 1;
    }
    inj_out_a_1755327926996_303_file << (_get_port_value(countbits_ops_i.p_inj__out__a__1755327926996__303, 0) ? '1' : '0') << std::endl;
    inj_out_a_1755327926996_303_file.close();

    std::ofstream inj_out_c_1755327926597_759_file("output_inj_out_c_1755327926597_759.hex");
    if (!inj_out_c_1755327926597_759_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_c_1755327926597_759: output_inj_out_c_1755327926597_759.hex" << std::endl;
        return 1;
    }
    inj_out_c_1755327926597_759_file << (_get_port_value(countbits_ops_i.p_inj__out__c__1755327926597__759, 0) ? '1' : '0') << std::endl;
    inj_out_c_1755327926597_759_file.close();

    std::ofstream inj_out_l_1755327927422_888_file("output_inj_out_l_1755327927422_888.hex");
    if (!inj_out_l_1755327927422_888_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_l_1755327927422_888: output_inj_out_l_1755327927422_888.hex" << std::endl;
        return 1;
    }
    inj_out_l_1755327927422_888_file << (_get_port_value(countbits_ops_i.p_inj__out__l__1755327927422__888, 0) ? '1' : '0') << std::endl;
    inj_out_l_1755327927422_888_file.close();

    std::ofstream inj_out_res_1755327927134_581_file("output_inj_out_res_1755327927134_581.hex");
    if (!inj_out_res_1755327927134_581_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_res_1755327927134_581: output_inj_out_res_1755327927134_581.hex" << std::endl;
        return 1;
    }
    inj_out_res_1755327927134_581_file << (_get_port_value(countbits_ops_i.p_inj__out__res__1755327927134__581, 0) ? '1' : '0') << std::endl;
    inj_out_res_1755327927134_581_file.close();

    std::ofstream inj_out_val_1755327926679_899_file("output_inj_out_val_1755327926679_899.hex");
    if (!inj_out_val_1755327926679_899_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_val_1755327926679_899: output_inj_out_val_1755327926679_899.hex" << std::endl;
        return 1;
    }
    for (int i = 31; i >= 0; --i) {
        inj_out_val_1755327926679_899_file << (_get_port_value(countbits_ops_i.p_inj__out__val__1755327926679__899, i) ? '1' : '0');
    }
    inj_out_val_1755327926679_899_file << std::endl;
    inj_out_val_1755327926679_899_file.close();

    std::ofstream inj_out_val_e_1755327926794_252_file("output_inj_out_val_e_1755327926794_252.hex");
    if (!inj_out_val_e_1755327926794_252_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_val_e_1755327926794_252: output_inj_out_val_e_1755327926794_252.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_val_e_1755327926794_252_file << (_get_port_value(countbits_ops_i.p_inj__out__val__e__1755327926794__252, i) ? '1' : '0');
    }
    inj_out_val_e_1755327926794_252_file << std::endl;
    inj_out_val_e_1755327926794_252_file.close();

    std::ofstream inj_out_val_m10_1755327926899_456_file("output_inj_out_val_m10_1755327926899_456.hex");
    if (!inj_out_val_m10_1755327926899_456_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_val_m10_1755327926899_456: output_inj_out_val_m10_1755327926899_456.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_val_m10_1755327926899_456_file << (_get_port_value(countbits_ops_i.p_inj__out__val__m10__1755327926899__456, i) ? '1' : '0');
    }
    inj_out_val_m10_1755327926899_456_file << std::endl;
    inj_out_val_m10_1755327926899_456_file.close();

    std::ofstream inj_q_1755327926598_87_file("output_inj_q_1755327926598_87.hex");
    if (!inj_q_1755327926598_87_file.is_open()) {
        std::cerr << "Failed to open output file for inj_q_1755327926598_87: output_inj_q_1755327926598_87.hex" << std::endl;
        return 1;
    }
    inj_q_1755327926598_87_file << (_get_port_value(countbits_ops_i.p_inj__q__1755327926598__87, 0) ? '1' : '0') << std::endl;
    inj_q_1755327926598_87_file.close();

    std::ofstream inj_reduce_xor_out_1755327927347_628_file("output_inj_reduce_xor_out_1755327927347_628.hex");
    if (!inj_reduce_xor_out_1755327927347_628_file.is_open()) {
        std::cerr << "Failed to open output file for inj_reduce_xor_out_1755327927347_628: output_inj_reduce_xor_out_1755327927347_628.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_reduce_xor_out_1755327927347_628_file << (_get_port_value(countbits_ops_i.p_inj__reduce__xor__out__1755327927347__628, i) ? '1' : '0');
    }
    inj_reduce_xor_out_1755327927347_628_file << std::endl;
    inj_reduce_xor_out_1755327927347_628_file.close();

    std::ofstream inj_result_and_1755327926877_946_file("output_inj_result_and_1755327926877_946.hex");
    if (!inj_result_and_1755327926877_946_file.is_open()) {
        std::cerr << "Failed to open output file for inj_result_and_1755327926877_946: output_inj_result_and_1755327926877_946.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_result_and_1755327926877_946_file << (_get_port_value(countbits_ops_i.p_inj__result__and__1755327926877__946, i) ? '1' : '0');
    }
    inj_result_and_1755327926877_946_file << std::endl;
    inj_result_and_1755327926877_946_file.close();

    std::ofstream inj_result_and_1755327927243_949_file("output_inj_result_and_1755327927243_949.hex");
    if (!inj_result_and_1755327927243_949_file.is_open()) {
        std::cerr << "Failed to open output file for inj_result_and_1755327927243_949: output_inj_result_and_1755327927243_949.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_result_and_1755327927243_949_file << (_get_port_value(countbits_ops_i.p_inj__result__and__1755327927243__949, i) ? '1' : '0');
    }
    inj_result_and_1755327927243_949_file << std::endl;
    inj_result_and_1755327927243_949_file.close();

    std::ofstream inj_result_or_1755327926877_344_file("output_inj_result_or_1755327926877_344.hex");
    if (!inj_result_or_1755327926877_344_file.is_open()) {
        std::cerr << "Failed to open output file for inj_result_or_1755327926877_344: output_inj_result_or_1755327926877_344.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_result_or_1755327926877_344_file << (_get_port_value(countbits_ops_i.p_inj__result__or__1755327926877__344, i) ? '1' : '0');
    }
    inj_result_or_1755327926877_344_file << std::endl;
    inj_result_or_1755327926877_344_file.close();

    std::ofstream inj_result_or_1755327927243_40_file("output_inj_result_or_1755327927243_40.hex");
    if (!inj_result_or_1755327927243_40_file.is_open()) {
        std::cerr << "Failed to open output file for inj_result_or_1755327927243_40: output_inj_result_or_1755327927243_40.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_result_or_1755327927243_40_file << (_get_port_value(countbits_ops_i.p_inj__result__or__1755327927243__40, i) ? '1' : '0');
    }
    inj_result_or_1755327927243_40_file << std::endl;
    inj_result_or_1755327927243_40_file.close();

    std::ofstream inj_result_xor_1755327926877_731_file("output_inj_result_xor_1755327926877_731.hex");
    if (!inj_result_xor_1755327926877_731_file.is_open()) {
        std::cerr << "Failed to open output file for inj_result_xor_1755327926877_731: output_inj_result_xor_1755327926877_731.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_result_xor_1755327926877_731_file << (_get_port_value(countbits_ops_i.p_inj__result__xor__1755327926877__731, i) ? '1' : '0');
    }
    inj_result_xor_1755327926877_731_file << std::endl;
    inj_result_xor_1755327926877_731_file.close();

    std::ofstream inj_result_xor_1755327927243_76_file("output_inj_result_xor_1755327927243_76.hex");
    if (!inj_result_xor_1755327927243_76_file.is_open()) {
        std::cerr << "Failed to open output file for inj_result_xor_1755327927243_76: output_inj_result_xor_1755327927243_76.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_result_xor_1755327927243_76_file << (_get_port_value(countbits_ops_i.p_inj__result__xor__1755327927243__76, i) ? '1' : '0');
    }
    inj_result_xor_1755327927243_76_file << std::endl;
    inj_result_xor_1755327927243_76_file.close();

    std::ofstream inj_status_e_1755327926794_433_file("output_inj_status_e_1755327926794_433.hex");
    if (!inj_status_e_1755327926794_433_file.is_open()) {
        std::cerr << "Failed to open output file for inj_status_e_1755327926794_433: output_inj_status_e_1755327926794_433.hex" << std::endl;
        return 1;
    }
    inj_status_e_1755327926794_433_file << (_get_port_value(countbits_ops_i.p_inj__status__e__1755327926794__433, 0) ? '1' : '0') << std::endl;
    inj_status_e_1755327926794_433_file.close();

    std::ofstream inj_tok_out_1755327926900_192_file("output_inj_tok_out_1755327926900_192.hex");
    if (!inj_tok_out_1755327926900_192_file.is_open()) {
        std::cerr << "Failed to open output file for inj_tok_out_1755327926900_192: output_inj_tok_out_1755327926900_192.hex" << std::endl;
        return 1;
    }
    inj_tok_out_1755327926900_192_file << (_get_port_value(countbits_ops_i.p_inj__tok__out__1755327926900__192, 0) ? '1' : '0') << std::endl;
    inj_tok_out_1755327926900_192_file.close();

    std::ofstream inj_wide_sum_1755327927347_424_file("output_inj_wide_sum_1755327927347_424.hex");
    if (!inj_wide_sum_1755327927347_424_file.is_open()) {
        std::cerr << "Failed to open output file for inj_wide_sum_1755327927347_424: output_inj_wide_sum_1755327927347_424.hex" << std::endl;
        return 1;
    }
    for (int i = 63; i >= 0; --i) {
        inj_wide_sum_1755327927347_424_file << (_get_port_value(countbits_ops_i.p_inj__wide__sum__1755327927347__424, i) ? '1' : '0');
    }
    inj_wide_sum_1755327927347_424_file << std::endl;
    inj_wide_sum_1755327927347_424_file.close();

    std::ofstream inj_write_status_1755327926605_259_file("output_inj_write_status_1755327926605_259.hex");
    if (!inj_write_status_1755327926605_259_file.is_open()) {
        std::cerr << "Failed to open output file for inj_write_status_1755327926605_259: output_inj_write_status_1755327926605_259.hex" << std::endl;
        return 1;
    }
    inj_write_status_1755327926605_259_file << (_get_port_value(countbits_ops_i.p_inj__write__status__1755327926605__259, 0) ? '1' : '0') << std::endl;
    inj_write_status_1755327926605_259_file.close();



    return 0;
}
