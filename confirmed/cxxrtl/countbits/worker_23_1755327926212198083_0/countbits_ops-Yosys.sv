// Yosys script used:
// read_verilog -sv dist/worker_23_1755327926212198083_0/countbits_ops.sv; prep -top countbits_ops; opt_clean; fsm_recode; opt; opt_reduce; fsm_map; write_verilog -sv -noattr dist/worker_23_1755327926212198083_0/countbits_ops-Yosys.sv
/* Generated by Yosys 0.55+23 (git sha1 e57a2b944, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

module countbits_ops(clk, in_d, inj_a_1755327926594_927, inj_b_1755327926594_559, inj_data_in_1755327926602_730, inj_in_packed_data_1755327926592_863, rst, cnt, inj_data_out_1755327926602_312, inj_dcac_end_val_1755327926620_215, inj_out_byte_1755327926592_216, inj_sig_out_1755327926769_346, inj_sum_1755327926594_173);
  wire [1:0] _00_;
  wire [2:0] _01_;
  wire [3:0] _02_;
  wire [3:0] _03_;
  wire [3:0] _04_;
  wire [3:0] _05_;
  wire [3:0] _06_;
  wire [31:0] _07_;
  wire [31:0] _08_;
  wire [31:0] _09_;
  wire [31:0] _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire [31:0] _27_;
  wire [31:0] _28_;
  wire [31:0] _29_;
  input clk;
  wire clk;
  output [3:0] cnt;
  wire [3:0] cnt;
  wire [15:0] data_struct;
  input [7:0] in_d;
  wire [7:0] in_d;
  input inj_a_1755327926594_927;
  wire inj_a_1755327926594_927;
  input inj_b_1755327926594_559;
  wire inj_b_1755327926594_559;
  input [3:0] inj_data_in_1755327926602_730;
  wire [3:0] inj_data_in_1755327926602_730;
  output [3:0] inj_data_out_1755327926602_312;
  wire [3:0] inj_data_out_1755327926602_312;
  output [15:0] inj_dcac_end_val_1755327926620_215;
  wire [15:0] inj_dcac_end_val_1755327926620_215;
  input [15:0] inj_in_packed_data_1755327926592_863;
  wire [15:0] inj_in_packed_data_1755327926592_863;
  output [7:0] inj_out_byte_1755327926592_216;
  wire [7:0] inj_out_byte_1755327926592_216;
  output inj_sig_out_1755327926769_346;
  wire inj_sig_out_1755327926769_346;
  output inj_sum_1755327926594_173;
  wire inj_sum_1755327926594_173;
  input rst;
  wire rst;
  assign _01_ = { 1'h0, _00_[0] } + _08_[0];
  assign _02_ = _01_ + _09_[0];
  assign _03_ = _02_ + _10_[0];
  assign _04_ = _03_ + _27_[0];
  assign _05_ = _04_ + _28_[0];
  assign _06_ = _05_ + _29_[0];
  assign cnt = _06_ + _07_[0];
  assign _11_ = in_d[0] === 1'h1;
  assign _12_ = in_d[0] === 1'hx;
  assign _13_ = in_d[7] === 1'h1;
  assign _14_ = in_d[7] === 1'hx;
  assign _15_ = in_d[6] === 1'h1;
  assign _16_ = in_d[6] === 1'hx;
  assign _17_ = in_d[5] === 1'h1;
  assign _18_ = in_d[5] === 1'hx;
  assign _19_ = in_d[4] === 1'h1;
  assign _20_ = in_d[4] === 1'hx;
  assign _21_ = in_d[3] === 1'h1;
  assign _22_ = in_d[3] === 1'hx;
  assign _23_ = in_d[2] === 1'h1;
  assign _24_ = in_d[2] === 1'hx;
  assign _25_ = in_d[1] === 1'h1;
  assign _26_ = in_d[1] === 1'hx;
  assign _07_[0] = _11_ || _12_;
  assign _00_[0] = _13_ || _14_;
  assign _08_[0] = _15_ || _16_;
  assign _09_[0] = _17_ || _18_;
  assign _10_[0] = _19_ || _20_;
  assign _27_[0] = _21_ || _22_;
  assign _28_[0] = _23_ || _24_;
  assign _29_[0] = _25_ || _26_;
  deep_comb_assign_chain deep_comb_assign_chain_inst_1755327926620_1118 (
    .dcac_end_val(inj_dcac_end_val_1755327926620_215),
    .dcac_start_val(inj_in_packed_data_1755327926592_863)
  );
  mod_event_implicit mod_event_implicit_inst_1755327926602_5403 (
    .data_in(inj_data_in_1755327926602_730),
    .data_out(inj_data_out_1755327926602_312)
  );
  simple_adder simple_adder_inst_1755327926594_5289 (
    .a(inj_a_1755327926594_927),
    .b(inj_b_1755327926594_559),
    .sum(inj_sum_1755327926594_173)
  );
  assign _00_[1] = 1'h0;
  assign _07_[31:1] = 31'h00000000;
  assign _08_[31:1] = 31'h00000000;
  assign _09_[31:1] = 31'h00000000;
  assign _10_[31:1] = 31'h00000000;
  assign _27_[31:1] = 31'h00000000;
  assign _28_[31:1] = 31'h00000000;
  assign _29_[31:1] = 31'h00000000;
  assign data_struct = inj_in_packed_data_1755327926592_863;
  assign inj_out_byte_1755327926592_216 = inj_in_packed_data_1755327926592_863[15:8];
  assign inj_sig_out_1755327926769_346 = inj_a_1755327926594_927;
endmodule

module deep_comb_assign_chain(dcac_start_val, dcac_end_val);
  output [15:0] dcac_end_val;
  wire [15:0] dcac_end_val;
  input [15:0] dcac_start_val;
  wire [15:0] dcac_start_val;
  wire [15:0] t11;
  wire [15:0] t12;
  wire [15:0] t13;
  wire [15:0] t14;
  wire [15:0] t15;
  wire [15:0] t20;
  wire [15:0] t25;
  wire [15:0] t26;
  wire [15:0] t27;
  wire t28;
  wire [15:0] t29;
  wire [15:0] t30;
  wire [15:0] t31;
  wire [4:0] t32;
  wire [15:0] t33;
  wire [15:0] t34;
  wire [15:0] t35;
  wire [15:0] t36;
  wire [15:0] t37;
  wire [15:0] t38;
  wire [15:0] t39;
  wire [15:0] t40;
  wire [15:0] t5;
  wire [15:0] t6;
  wire [15:0] t7;
  assign dcac_end_val = 16'h01fe;
  assign t11[15:1] = 15'h0005;
  assign t12[15:5] = 11'h000;
  assign t13[14:5] = { t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15] };
  assign { t14[15:4], t14[0] } = { t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[4], t13[0] };
  assign t15 = { t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[15], t13[4], 4'hf };
  assign { t20[4], t20[2] } = 2'h3;
  assign { t25[2], t25[0] } = 2'h3;
  assign { t26[15:2], t26[0] } = 15'h0002;
  assign { t27[15:4], t27[0] } = 13'h0001;
  assign t28 = 1'h1;
  assign t29[0] = 1'h0;
  assign t30 = { t29[15:4], 1'h1, t29[2], 2'h2 };
  assign t31 = 16'h000a;
  assign t32 = 5'h16;
  assign t33 = 16'h0009;
  assign { t34[15:4], t34[0] } = 13'h0001;
  assign t35 = 16'h000f;
  assign t36 = 16'h001f;
  assign t37 = 16'h020f;
  assign t38 = 16'h01fd;
  assign { t39[15:5], t39[3:0] } = 15'h00fe;
  assign t40 = 16'h01fe;
  assign { t5[2], t5[0] } = 2'h3;
  assign { t6[15:2], t6[0] } = 15'h0002;
  assign t7[15:4] = 12'h000;
endmodule

module mod_event_implicit(data_in, data_out);
  input [3:0] data_in;
  wire [3:0] data_in;
  output [3:0] data_out;
  wire [3:0] data_out;
  assign data_out = data_in;
endmodule

module simple_adder(a, b, sum);
  input a;
  wire a;
  input b;
  wire b;
  output sum;
  wire sum;
  assign sum = a + b;
endmodule
