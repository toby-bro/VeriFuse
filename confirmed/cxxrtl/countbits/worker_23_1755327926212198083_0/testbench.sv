// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go

module top;
    logic clk;
    logic [7:0] in_d;
    logic inj_a_1755327926594_927;
    logic inj_b_1755327926594_559;
    logic [3:0] inj_data_in_1755327926602_730;
    logic [15:0] inj_in_packed_data_1755327926592_863;
    logic rst;
    logic [3:0] cnt;
    logic [3:0] inj_data_out_1755327926602_312;
    logic [15:0] inj_dcac_end_val_1755327926620_215;
    logic [7:0] inj_out_byte_1755327926592_216;
    logic inj_sig_out_1755327926769_346;
    logic inj_sum_1755327926594_173;

    countbits_ops #(

    ) dut (
        .clk(clk),
        .in_d(in_d),
        .inj_a_1755327926594_927(inj_a_1755327926594_927),
        .inj_b_1755327926594_559(inj_b_1755327926594_559),
        .inj_data_in_1755327926602_730(inj_data_in_1755327926602_730),
        .inj_in_packed_data_1755327926592_863(inj_in_packed_data_1755327926592_863),
        .rst(rst),
        .cnt(cnt),
        .inj_data_out_1755327926602_312(inj_data_out_1755327926602_312),
        .inj_dcac_end_val_1755327926620_215(inj_dcac_end_val_1755327926620_215),
        .inj_out_byte_1755327926592_216(inj_out_byte_1755327926592_216),
        .inj_sig_out_1755327926769_346(inj_sig_out_1755327926769_346),
        .inj_sum_1755327926594_173(inj_sum_1755327926594_173)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 5 input files
        clk = 0;

        fd = $fopen("input_in_d.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_in_d.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", in_d);
        $fclose(fd);

        fd = $fopen("input_inj_a_1755327926594_927.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_a_1755327926594_927.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_a_1755327926594_927);
        $fclose(fd);

        fd = $fopen("input_inj_b_1755327926594_559.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_b_1755327926594_559.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_b_1755327926594_559);
        $fclose(fd);

        fd = $fopen("input_inj_data_in_1755327926602_730.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_data_in_1755327926602_730.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_data_in_1755327926602_730);
        $fclose(fd);

        fd = $fopen("input_inj_in_packed_data_1755327926592_863.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in_packed_data_1755327926592_863.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in_packed_data_1755327926592_863);
        $fclose(fd);
        rst = 0;


        // Toggle reset if a reset signal was identified

        // Toggle reset signal rst
        rst = 1; // Assert reset (active high)
        #10;
        rst = 0; // De-assert reset
        #10; // Wait after de-asserting reset


        // Toggle clock signals

        // Toggle clocks for several cycles with timeout protection
        // Set simulation timeout to prevent infinite loops
        fork
            begin
                #780;
                $display("ERROR: Simulation timeout after 780 time units");
                $finish;
            end
            begin
                repeat (50) begin
                    clk = 0;
                    #5;
                    clk = 1;
                    #5;
                end
            end
        join_any
        disable fork; // Kill timeout process


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 6 output files

        fd = $fopen("output_cnt.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_cnt.hex' for port 'cnt'.", "output_cnt.hex", "cnt");
            $finish;
        end
        for (int i = 3; i >= 0; i--) begin
            $fwrite(fd, "%b", cnt[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_data_out_1755327926602_312.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_data_out_1755327926602_312.hex' for port 'inj_data_out_1755327926602_312'.", "output_inj_data_out_1755327926602_312.hex", "inj_data_out_1755327926602_312");
            $finish;
        end
        for (int i = 3; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_data_out_1755327926602_312[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_dcac_end_val_1755327926620_215.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_dcac_end_val_1755327926620_215.hex' for port 'inj_dcac_end_val_1755327926620_215'.", "output_inj_dcac_end_val_1755327926620_215.hex", "inj_dcac_end_val_1755327926620_215");
            $finish;
        end
        for (int i = 15; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_dcac_end_val_1755327926620_215[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_out_byte_1755327926592_216.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out_byte_1755327926592_216.hex' for port 'inj_out_byte_1755327926592_216'.", "output_inj_out_byte_1755327926592_216.hex", "inj_out_byte_1755327926592_216");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_out_byte_1755327926592_216[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_sig_out_1755327926769_346.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_sig_out_1755327926769_346.hex' for port 'inj_sig_out_1755327926769_346'.", "output_inj_sig_out_1755327926769_346.hex", "inj_sig_out_1755327926769_346");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_sig_out_1755327926769_346);
        $fclose(fd);

        fd = $fopen("output_inj_sum_1755327926594_173.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_sum_1755327926594_173.hex' for port 'inj_sum_1755327926594_173'.", "output_inj_sum_1755327926594_173.hex", "inj_sum_1755327926594_173");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_sum_1755327926594_173);
        $fclose(fd);


        $finish;
    end
endmodule