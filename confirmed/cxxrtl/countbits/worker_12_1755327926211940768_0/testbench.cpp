// Generated C++ testbench for CXXRTL
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
#include "countbits_ops.cc" // CXXRTL generated header for the module

#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdint>
#include <string>
#include <sstream>
#include <type_traits>

// Template helpers to detect and work with both value<> and wire<> types
template<typename T>
struct has_curr {
    template<typename U>
    static auto test(int) -> decltype(std::declval<U>().curr, std::true_type{});
    template<typename>
    static std::false_type test(...);
    using type = decltype(test<T>(0));
    static constexpr bool value = type::value;
};

// Helper function to get port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.curr.template get<T>();
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.template get<T>();
}

// Helper function to get port bit - works with both value<> and wire<>
template<typename PortType>
typename std::enable_if<has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.curr.bit(bit);
}

template<typename PortType>
typename std::enable_if<!has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.bit(bit);
}

// Helper function to get wide port value - works with both value<> and wire<>
template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<has_curr<PortType>::value, decltype(port.curr)>::type {
    return port.curr;
}

template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<!has_curr<PortType>::value, PortType>::type {
    return port;
}

// Helper function to set port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.next.template set<T>(value);
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.template set<T>(value);
}

// Helper function to set wide port value - works with both value<> and wire<>
template<typename PortType, typename ValueType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port.next = value;
}

template<typename PortType, typename ValueType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port = value;
}

int main(int argc, char** argv) {
    cxxrtl_design::p_countbits__ops countbits_ops_i; // DUT instance

    // Declare input variables
    bool clk;
    uint8_t in_d;
    uint8_t inj_data2_1755327927048_859;
    uint8_t inj_data3_1755327927048_672;
    uint16_t inj_data_in_1755327926991_898;
    uint8_t inj_i_in_1755327926544_780;
    bool inj_i_p1_1755327926568_45;
    bool inj_i_p2_1755327926568_809;
    uint8_t inj_in_data_1755327926663_217;
    uint8_t inj_sel_code_1755327927048_231;
    uint8_t inj_start_val_1755327926552_878;
    uint64_t inj_wide_a_1755327927255_788;
    uint64_t inj_wide_b_1755327927268_588;
    uint64_t inj_wide_c_1755327927268_34;
    bool rst;


    // Read input values
    std::ifstream clk_file("input_clk.hex");
    if (!clk_file.is_open()) {
        std::cerr << "Failed to open input file for clk: input_clk.hex" << std::endl;
        return 1;
    }
    std::string clk_hex_str;
    clk_file >> clk_hex_str;
    if (clk_file.fail() && !clk_file.eof()) {
        std::cerr << "Failed to read hex string for clk from input file: input_clk.hex" << std::endl;
        clk_file.close();
        return 1;
    }
    std::stringstream ss_clk;
    ss_clk << std::hex << clk_hex_str;
    unsigned int temp_clk;
    if (!(ss_clk >> temp_clk)) {
        std::cerr << "Failed to parse hex value for clk: " << clk_hex_str << std::endl;
        clk_file.close();
        return 1;
    }
    clk = static_cast<bool>(temp_clk);
    clk_file.close();

    std::ifstream in_d_file("input_in_d.hex");
    if (!in_d_file.is_open()) {
        std::cerr << "Failed to open input file for in_d: input_in_d.hex" << std::endl;
        return 1;
    }
    std::string in_d_hex_str;
    in_d_file >> in_d_hex_str;
    if (in_d_file.fail() && !in_d_file.eof()) {
        std::cerr << "Failed to read hex string for in_d from input file: input_in_d.hex" << std::endl;
        in_d_file.close();
        return 1;
    }
    std::stringstream ss_in_d;
    ss_in_d << std::hex << in_d_hex_str;
    unsigned int temp_in_d;
    if (!(ss_in_d >> temp_in_d)) {
        std::cerr << "Failed to parse hex value for in_d: " << in_d_hex_str << std::endl;
        in_d_file.close();
        return 1;
    }
    in_d = static_cast<uint8_t>(temp_in_d);
    in_d_file.close();

    std::ifstream inj_data2_1755327927048_859_file("input_inj_data2_1755327927048_859.hex");
    if (!inj_data2_1755327927048_859_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data2_1755327927048_859: input_inj_data2_1755327927048_859.hex" << std::endl;
        return 1;
    }
    std::string inj_data2_1755327927048_859_hex_str;
    inj_data2_1755327927048_859_file >> inj_data2_1755327927048_859_hex_str;
    if (inj_data2_1755327927048_859_file.fail() && !inj_data2_1755327927048_859_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data2_1755327927048_859 from input file: input_inj_data2_1755327927048_859.hex" << std::endl;
        inj_data2_1755327927048_859_file.close();
        return 1;
    }
    std::stringstream ss_inj_data2_1755327927048_859;
    ss_inj_data2_1755327927048_859 << std::hex << inj_data2_1755327927048_859_hex_str;
    unsigned int temp_inj_data2_1755327927048_859;
    if (!(ss_inj_data2_1755327927048_859 >> temp_inj_data2_1755327927048_859)) {
        std::cerr << "Failed to parse hex value for inj_data2_1755327927048_859: " << inj_data2_1755327927048_859_hex_str << std::endl;
        inj_data2_1755327927048_859_file.close();
        return 1;
    }
    inj_data2_1755327927048_859 = static_cast<uint8_t>(temp_inj_data2_1755327927048_859);
    inj_data2_1755327927048_859_file.close();

    std::ifstream inj_data3_1755327927048_672_file("input_inj_data3_1755327927048_672.hex");
    if (!inj_data3_1755327927048_672_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data3_1755327927048_672: input_inj_data3_1755327927048_672.hex" << std::endl;
        return 1;
    }
    std::string inj_data3_1755327927048_672_hex_str;
    inj_data3_1755327927048_672_file >> inj_data3_1755327927048_672_hex_str;
    if (inj_data3_1755327927048_672_file.fail() && !inj_data3_1755327927048_672_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data3_1755327927048_672 from input file: input_inj_data3_1755327927048_672.hex" << std::endl;
        inj_data3_1755327927048_672_file.close();
        return 1;
    }
    std::stringstream ss_inj_data3_1755327927048_672;
    ss_inj_data3_1755327927048_672 << std::hex << inj_data3_1755327927048_672_hex_str;
    unsigned int temp_inj_data3_1755327927048_672;
    if (!(ss_inj_data3_1755327927048_672 >> temp_inj_data3_1755327927048_672)) {
        std::cerr << "Failed to parse hex value for inj_data3_1755327927048_672: " << inj_data3_1755327927048_672_hex_str << std::endl;
        inj_data3_1755327927048_672_file.close();
        return 1;
    }
    inj_data3_1755327927048_672 = static_cast<uint8_t>(temp_inj_data3_1755327927048_672);
    inj_data3_1755327927048_672_file.close();

    std::ifstream inj_data_in_1755327926991_898_file("input_inj_data_in_1755327926991_898.hex");
    if (!inj_data_in_1755327926991_898_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data_in_1755327926991_898: input_inj_data_in_1755327926991_898.hex" << std::endl;
        return 1;
    }
    std::string inj_data_in_1755327926991_898_hex_str;
    inj_data_in_1755327926991_898_file >> inj_data_in_1755327926991_898_hex_str;
    if (inj_data_in_1755327926991_898_file.fail() && !inj_data_in_1755327926991_898_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data_in_1755327926991_898 from input file: input_inj_data_in_1755327926991_898.hex" << std::endl;
        inj_data_in_1755327926991_898_file.close();
        return 1;
    }
    std::stringstream ss_inj_data_in_1755327926991_898;
    ss_inj_data_in_1755327926991_898 << std::hex << inj_data_in_1755327926991_898_hex_str;
    if (!(ss_inj_data_in_1755327926991_898 >> inj_data_in_1755327926991_898)) {
        std::cerr << "Failed to parse hex value for inj_data_in_1755327926991_898: " << inj_data_in_1755327926991_898_hex_str << std::endl;
        inj_data_in_1755327926991_898_file.close();
        return 1;
    }
    inj_data_in_1755327926991_898_file.close();

    std::ifstream inj_i_in_1755327926544_780_file("input_inj_i_in_1755327926544_780.hex");
    if (!inj_i_in_1755327926544_780_file.is_open()) {
        std::cerr << "Failed to open input file for inj_i_in_1755327926544_780: input_inj_i_in_1755327926544_780.hex" << std::endl;
        return 1;
    }
    std::string inj_i_in_1755327926544_780_hex_str;
    inj_i_in_1755327926544_780_file >> inj_i_in_1755327926544_780_hex_str;
    if (inj_i_in_1755327926544_780_file.fail() && !inj_i_in_1755327926544_780_file.eof()) {
        std::cerr << "Failed to read hex string for inj_i_in_1755327926544_780 from input file: input_inj_i_in_1755327926544_780.hex" << std::endl;
        inj_i_in_1755327926544_780_file.close();
        return 1;
    }
    std::stringstream ss_inj_i_in_1755327926544_780;
    ss_inj_i_in_1755327926544_780 << std::hex << inj_i_in_1755327926544_780_hex_str;
    unsigned int temp_inj_i_in_1755327926544_780;
    if (!(ss_inj_i_in_1755327926544_780 >> temp_inj_i_in_1755327926544_780)) {
        std::cerr << "Failed to parse hex value for inj_i_in_1755327926544_780: " << inj_i_in_1755327926544_780_hex_str << std::endl;
        inj_i_in_1755327926544_780_file.close();
        return 1;
    }
    inj_i_in_1755327926544_780 = static_cast<uint8_t>(temp_inj_i_in_1755327926544_780);
    inj_i_in_1755327926544_780_file.close();

    std::ifstream inj_i_p1_1755327926568_45_file("input_inj_i_p1_1755327926568_45.hex");
    if (!inj_i_p1_1755327926568_45_file.is_open()) {
        std::cerr << "Failed to open input file for inj_i_p1_1755327926568_45: input_inj_i_p1_1755327926568_45.hex" << std::endl;
        return 1;
    }
    std::string inj_i_p1_1755327926568_45_hex_str;
    inj_i_p1_1755327926568_45_file >> inj_i_p1_1755327926568_45_hex_str;
    if (inj_i_p1_1755327926568_45_file.fail() && !inj_i_p1_1755327926568_45_file.eof()) {
        std::cerr << "Failed to read hex string for inj_i_p1_1755327926568_45 from input file: input_inj_i_p1_1755327926568_45.hex" << std::endl;
        inj_i_p1_1755327926568_45_file.close();
        return 1;
    }
    std::stringstream ss_inj_i_p1_1755327926568_45;
    ss_inj_i_p1_1755327926568_45 << std::hex << inj_i_p1_1755327926568_45_hex_str;
    unsigned int temp_inj_i_p1_1755327926568_45;
    if (!(ss_inj_i_p1_1755327926568_45 >> temp_inj_i_p1_1755327926568_45)) {
        std::cerr << "Failed to parse hex value for inj_i_p1_1755327926568_45: " << inj_i_p1_1755327926568_45_hex_str << std::endl;
        inj_i_p1_1755327926568_45_file.close();
        return 1;
    }
    inj_i_p1_1755327926568_45 = static_cast<bool>(temp_inj_i_p1_1755327926568_45);
    inj_i_p1_1755327926568_45_file.close();

    std::ifstream inj_i_p2_1755327926568_809_file("input_inj_i_p2_1755327926568_809.hex");
    if (!inj_i_p2_1755327926568_809_file.is_open()) {
        std::cerr << "Failed to open input file for inj_i_p2_1755327926568_809: input_inj_i_p2_1755327926568_809.hex" << std::endl;
        return 1;
    }
    std::string inj_i_p2_1755327926568_809_hex_str;
    inj_i_p2_1755327926568_809_file >> inj_i_p2_1755327926568_809_hex_str;
    if (inj_i_p2_1755327926568_809_file.fail() && !inj_i_p2_1755327926568_809_file.eof()) {
        std::cerr << "Failed to read hex string for inj_i_p2_1755327926568_809 from input file: input_inj_i_p2_1755327926568_809.hex" << std::endl;
        inj_i_p2_1755327926568_809_file.close();
        return 1;
    }
    std::stringstream ss_inj_i_p2_1755327926568_809;
    ss_inj_i_p2_1755327926568_809 << std::hex << inj_i_p2_1755327926568_809_hex_str;
    unsigned int temp_inj_i_p2_1755327926568_809;
    if (!(ss_inj_i_p2_1755327926568_809 >> temp_inj_i_p2_1755327926568_809)) {
        std::cerr << "Failed to parse hex value for inj_i_p2_1755327926568_809: " << inj_i_p2_1755327926568_809_hex_str << std::endl;
        inj_i_p2_1755327926568_809_file.close();
        return 1;
    }
    inj_i_p2_1755327926568_809 = static_cast<bool>(temp_inj_i_p2_1755327926568_809);
    inj_i_p2_1755327926568_809_file.close();

    std::ifstream inj_in_data_1755327926663_217_file("input_inj_in_data_1755327926663_217.hex");
    if (!inj_in_data_1755327926663_217_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_data_1755327926663_217: input_inj_in_data_1755327926663_217.hex" << std::endl;
        return 1;
    }
    std::string inj_in_data_1755327926663_217_hex_str;
    inj_in_data_1755327926663_217_file >> inj_in_data_1755327926663_217_hex_str;
    if (inj_in_data_1755327926663_217_file.fail() && !inj_in_data_1755327926663_217_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_data_1755327926663_217 from input file: input_inj_in_data_1755327926663_217.hex" << std::endl;
        inj_in_data_1755327926663_217_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_data_1755327926663_217;
    ss_inj_in_data_1755327926663_217 << std::hex << inj_in_data_1755327926663_217_hex_str;
    unsigned int temp_inj_in_data_1755327926663_217;
    if (!(ss_inj_in_data_1755327926663_217 >> temp_inj_in_data_1755327926663_217)) {
        std::cerr << "Failed to parse hex value for inj_in_data_1755327926663_217: " << inj_in_data_1755327926663_217_hex_str << std::endl;
        inj_in_data_1755327926663_217_file.close();
        return 1;
    }
    inj_in_data_1755327926663_217 = static_cast<uint8_t>(temp_inj_in_data_1755327926663_217);
    inj_in_data_1755327926663_217_file.close();

    std::ifstream inj_sel_code_1755327927048_231_file("input_inj_sel_code_1755327927048_231.hex");
    if (!inj_sel_code_1755327927048_231_file.is_open()) {
        std::cerr << "Failed to open input file for inj_sel_code_1755327927048_231: input_inj_sel_code_1755327927048_231.hex" << std::endl;
        return 1;
    }
    std::string inj_sel_code_1755327927048_231_hex_str;
    inj_sel_code_1755327927048_231_file >> inj_sel_code_1755327927048_231_hex_str;
    if (inj_sel_code_1755327927048_231_file.fail() && !inj_sel_code_1755327927048_231_file.eof()) {
        std::cerr << "Failed to read hex string for inj_sel_code_1755327927048_231 from input file: input_inj_sel_code_1755327927048_231.hex" << std::endl;
        inj_sel_code_1755327927048_231_file.close();
        return 1;
    }
    std::stringstream ss_inj_sel_code_1755327927048_231;
    ss_inj_sel_code_1755327927048_231 << std::hex << inj_sel_code_1755327927048_231_hex_str;
    unsigned int temp_inj_sel_code_1755327927048_231;
    if (!(ss_inj_sel_code_1755327927048_231 >> temp_inj_sel_code_1755327927048_231)) {
        std::cerr << "Failed to parse hex value for inj_sel_code_1755327927048_231: " << inj_sel_code_1755327927048_231_hex_str << std::endl;
        inj_sel_code_1755327927048_231_file.close();
        return 1;
    }
    inj_sel_code_1755327927048_231 = static_cast<uint8_t>(temp_inj_sel_code_1755327927048_231);
    inj_sel_code_1755327927048_231_file.close();

    std::ifstream inj_start_val_1755327926552_878_file("input_inj_start_val_1755327926552_878.hex");
    if (!inj_start_val_1755327926552_878_file.is_open()) {
        std::cerr << "Failed to open input file for inj_start_val_1755327926552_878: input_inj_start_val_1755327926552_878.hex" << std::endl;
        return 1;
    }
    std::string inj_start_val_1755327926552_878_hex_str;
    inj_start_val_1755327926552_878_file >> inj_start_val_1755327926552_878_hex_str;
    if (inj_start_val_1755327926552_878_file.fail() && !inj_start_val_1755327926552_878_file.eof()) {
        std::cerr << "Failed to read hex string for inj_start_val_1755327926552_878 from input file: input_inj_start_val_1755327926552_878.hex" << std::endl;
        inj_start_val_1755327926552_878_file.close();
        return 1;
    }
    std::stringstream ss_inj_start_val_1755327926552_878;
    ss_inj_start_val_1755327926552_878 << std::hex << inj_start_val_1755327926552_878_hex_str;
    unsigned int temp_inj_start_val_1755327926552_878;
    if (!(ss_inj_start_val_1755327926552_878 >> temp_inj_start_val_1755327926552_878)) {
        std::cerr << "Failed to parse hex value for inj_start_val_1755327926552_878: " << inj_start_val_1755327926552_878_hex_str << std::endl;
        inj_start_val_1755327926552_878_file.close();
        return 1;
    }
    inj_start_val_1755327926552_878 = static_cast<uint8_t>(temp_inj_start_val_1755327926552_878);
    inj_start_val_1755327926552_878_file.close();

    std::ifstream inj_wide_a_1755327927255_788_file("input_inj_wide_a_1755327927255_788.hex");
    if (!inj_wide_a_1755327927255_788_file.is_open()) {
        std::cerr << "Failed to open input file for inj_wide_a_1755327927255_788: input_inj_wide_a_1755327927255_788.hex" << std::endl;
        return 1;
    }
    std::string inj_wide_a_1755327927255_788_hex_str;
    inj_wide_a_1755327927255_788_file >> inj_wide_a_1755327927255_788_hex_str;
    if (inj_wide_a_1755327927255_788_file.fail() && !inj_wide_a_1755327927255_788_file.eof()) {
        std::cerr << "Failed to read hex string for inj_wide_a_1755327927255_788 from input file: input_inj_wide_a_1755327927255_788.hex" << std::endl;
        inj_wide_a_1755327927255_788_file.close();
        return 1;
    }
    std::stringstream ss_inj_wide_a_1755327927255_788;
    ss_inj_wide_a_1755327927255_788 << std::hex << inj_wide_a_1755327927255_788_hex_str;
    if (!(ss_inj_wide_a_1755327927255_788 >> inj_wide_a_1755327927255_788)) {
        std::cerr << "Failed to parse hex value for inj_wide_a_1755327927255_788: " << inj_wide_a_1755327927255_788_hex_str << std::endl;
        inj_wide_a_1755327927255_788_file.close();
        return 1;
    }
    inj_wide_a_1755327927255_788_file.close();

    std::ifstream inj_wide_b_1755327927268_588_file("input_inj_wide_b_1755327927268_588.hex");
    if (!inj_wide_b_1755327927268_588_file.is_open()) {
        std::cerr << "Failed to open input file for inj_wide_b_1755327927268_588: input_inj_wide_b_1755327927268_588.hex" << std::endl;
        return 1;
    }
    std::string inj_wide_b_1755327927268_588_hex_str;
    inj_wide_b_1755327927268_588_file >> inj_wide_b_1755327927268_588_hex_str;
    if (inj_wide_b_1755327927268_588_file.fail() && !inj_wide_b_1755327927268_588_file.eof()) {
        std::cerr << "Failed to read hex string for inj_wide_b_1755327927268_588 from input file: input_inj_wide_b_1755327927268_588.hex" << std::endl;
        inj_wide_b_1755327927268_588_file.close();
        return 1;
    }
    std::stringstream ss_inj_wide_b_1755327927268_588;
    ss_inj_wide_b_1755327927268_588 << std::hex << inj_wide_b_1755327927268_588_hex_str;
    if (!(ss_inj_wide_b_1755327927268_588 >> inj_wide_b_1755327927268_588)) {
        std::cerr << "Failed to parse hex value for inj_wide_b_1755327927268_588: " << inj_wide_b_1755327927268_588_hex_str << std::endl;
        inj_wide_b_1755327927268_588_file.close();
        return 1;
    }
    inj_wide_b_1755327927268_588_file.close();

    std::ifstream inj_wide_c_1755327927268_34_file("input_inj_wide_c_1755327927268_34.hex");
    if (!inj_wide_c_1755327927268_34_file.is_open()) {
        std::cerr << "Failed to open input file for inj_wide_c_1755327927268_34: input_inj_wide_c_1755327927268_34.hex" << std::endl;
        return 1;
    }
    std::string inj_wide_c_1755327927268_34_hex_str;
    inj_wide_c_1755327927268_34_file >> inj_wide_c_1755327927268_34_hex_str;
    if (inj_wide_c_1755327927268_34_file.fail() && !inj_wide_c_1755327927268_34_file.eof()) {
        std::cerr << "Failed to read hex string for inj_wide_c_1755327927268_34 from input file: input_inj_wide_c_1755327927268_34.hex" << std::endl;
        inj_wide_c_1755327927268_34_file.close();
        return 1;
    }
    std::stringstream ss_inj_wide_c_1755327927268_34;
    ss_inj_wide_c_1755327927268_34 << std::hex << inj_wide_c_1755327927268_34_hex_str;
    if (!(ss_inj_wide_c_1755327927268_34 >> inj_wide_c_1755327927268_34)) {
        std::cerr << "Failed to parse hex value for inj_wide_c_1755327927268_34: " << inj_wide_c_1755327927268_34_hex_str << std::endl;
        inj_wide_c_1755327927268_34_file.close();
        return 1;
    }
    inj_wide_c_1755327927268_34_file.close();

    std::ifstream rst_file("input_rst.hex");
    if (!rst_file.is_open()) {
        std::cerr << "Failed to open input file for rst: input_rst.hex" << std::endl;
        return 1;
    }
    std::string rst_hex_str;
    rst_file >> rst_hex_str;
    if (rst_file.fail() && !rst_file.eof()) {
        std::cerr << "Failed to read hex string for rst from input file: input_rst.hex" << std::endl;
        rst_file.close();
        return 1;
    }
    std::stringstream ss_rst;
    ss_rst << std::hex << rst_hex_str;
    unsigned int temp_rst;
    if (!(ss_rst >> temp_rst)) {
        std::cerr << "Failed to parse hex value for rst: " << rst_hex_str << std::endl;
        rst_file.close();
        return 1;
    }
    rst = static_cast<bool>(temp_rst);
    rst_file.close();



    // Apply inputs to DUT
    _set_port_value<bool>(countbits_ops_i.p_clk, clk);
    _set_port_value<uint8_t>(countbits_ops_i.p_in__d, in_d);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__data2__1755327927048__859, inj_data2_1755327927048_859);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__data3__1755327927048__672, inj_data3_1755327927048_672);
    _set_port_value<uint16_t>(countbits_ops_i.p_inj__data__in__1755327926991__898, inj_data_in_1755327926991_898);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__i__in__1755327926544__780, inj_i_in_1755327926544_780);
    _set_port_value<bool>(countbits_ops_i.p_inj__i__p1__1755327926568__45, inj_i_p1_1755327926568_45);
    _set_port_value<bool>(countbits_ops_i.p_inj__i__p2__1755327926568__809, inj_i_p2_1755327926568_809);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__in__data__1755327926663__217, inj_in_data_1755327926663_217);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__sel__code__1755327927048__231, inj_sel_code_1755327927048_231);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__start__val__1755327926552__878, inj_start_val_1755327926552_878);
    _set_port_value<uint64_t>(countbits_ops_i.p_inj__wide__a__1755327927255__788, inj_wide_a_1755327927255_788);
    _set_port_value<uint64_t>(countbits_ops_i.p_inj__wide__b__1755327927268__588, inj_wide_b_1755327927268_588);
    _set_port_value<uint64_t>(countbits_ops_i.p_inj__wide__c__1755327927268__34, inj_wide_c_1755327927268_34);
    _set_port_value<bool>(countbits_ops_i.p_rst, rst);
    // Input application


    // Handle reset, clock toggling, and evaluation

    // Toggle reset signal p_rst
    countbits_ops_i.p_rst.set<bool>(true); // Assert reset (active high)
    countbits_ops_i.step(); // Step to propagate reset assertion
    countbits_ops_i.p_rst.set<bool>(false); // De-assert reset
    countbits_ops_i.step(); // Step to propagate reset de-assertion
    countbits_ops_i.step(); // Extra step for settling after reset

    // Clock toggling with bounded cycles to prevent infinite loops
    for (int cycle = 0; cycle < 50; cycle++) {
        _set_port_value<bool>(countbits_ops_i.p_clk, false);
        countbits_ops_i.step(); // clock low
        _set_port_value<bool>(countbits_ops_i.p_clk, true);
        countbits_ops_i.step(); // clock high
    }

    // Bounded evaluation steps to ensure all logic settles (max 20 steps)
    for (int settle_step = 0; settle_step < 20; settle_step++) {
        countbits_ops_i.step();
    }


    // Write outputs from DUT
    std::ofstream cnt_file("output_cnt.hex");
    if (!cnt_file.is_open()) {
        std::cerr << "Failed to open output file for cnt: output_cnt.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        cnt_file << (_get_port_value(countbits_ops_i.p_cnt, i) ? '1' : '0');
    }
    cnt_file << std::endl;
    cnt_file.close();

    std::ofstream inj_data_out_1755327926991_399_file("output_inj_data_out_1755327926991_399.hex");
    if (!inj_data_out_1755327926991_399_file.is_open()) {
        std::cerr << "Failed to open output file for inj_data_out_1755327926991_399: output_inj_data_out_1755327926991_399.hex" << std::endl;
        return 1;
    }
    for (int i = 15; i >= 0; --i) {
        inj_data_out_1755327926991_399_file << (_get_port_value(countbits_ops_i.p_inj__data__out__1755327926991__399, i) ? '1' : '0');
    }
    inj_data_out_1755327926991_399_file << std::endl;
    inj_data_out_1755327926991_399_file.close();

    std::ofstream inj_final_val_1755327926552_676_file("output_inj_final_val_1755327926552_676.hex");
    if (!inj_final_val_1755327926552_676_file.is_open()) {
        std::cerr << "Failed to open output file for inj_final_val_1755327926552_676: output_inj_final_val_1755327926552_676.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_final_val_1755327926552_676_file << (_get_port_value(countbits_ops_i.p_inj__final__val__1755327926552__676, i) ? '1' : '0');
    }
    inj_final_val_1755327926552_676_file << std::endl;
    inj_final_val_1755327926552_676_file.close();

    std::ofstream inj_o_out_1755327926544_931_file("output_inj_o_out_1755327926544_931.hex");
    if (!inj_o_out_1755327926544_931_file.is_open()) {
        std::cerr << "Failed to open output file for inj_o_out_1755327926544_931: output_inj_o_out_1755327926544_931.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_o_out_1755327926544_931_file << (_get_port_value(countbits_ops_i.p_inj__o__out__1755327926544__931, i) ? '1' : '0');
    }
    inj_o_out_1755327926544_931_file << std::endl;
    inj_o_out_1755327926544_931_file.close();

    std::ofstream inj_o_p_and_1755327926568_709_file("output_inj_o_p_and_1755327926568_709.hex");
    if (!inj_o_p_and_1755327926568_709_file.is_open()) {
        std::cerr << "Failed to open output file for inj_o_p_and_1755327926568_709: output_inj_o_p_and_1755327926568_709.hex" << std::endl;
        return 1;
    }
    inj_o_p_and_1755327926568_709_file << (_get_port_value(countbits_ops_i.p_inj__o__p__and__1755327926568__709, 0) ? '1' : '0') << std::endl;
    inj_o_p_and_1755327926568_709_file.close();

    std::ofstream inj_o_p_xor_1755327926568_112_file("output_inj_o_p_xor_1755327926568_112.hex");
    if (!inj_o_p_xor_1755327926568_112_file.is_open()) {
        std::cerr << "Failed to open output file for inj_o_p_xor_1755327926568_112: output_inj_o_p_xor_1755327926568_112.hex" << std::endl;
        return 1;
    }
    inj_o_p_xor_1755327926568_112_file << (_get_port_value(countbits_ops_i.p_inj__o__p__xor__1755327926568__112, 0) ? '1' : '0') << std::endl;
    inj_o_p_xor_1755327926568_112_file.close();

    std::ofstream inj_o_sum_1755327926787_322_file("output_inj_o_sum_1755327926787_322.hex");
    if (!inj_o_sum_1755327926787_322_file.is_open()) {
        std::cerr << "Failed to open output file for inj_o_sum_1755327926787_322: output_inj_o_sum_1755327926787_322.hex" << std::endl;
        return 1;
    }
    inj_o_sum_1755327926787_322_file << (_get_port_value(countbits_ops_i.p_inj__o__sum__1755327926787__322, 0) ? '1' : '0') << std::endl;
    inj_o_sum_1755327926787_322_file.close();

    std::ofstream inj_out1_1755327926632_57_file("output_inj_out1_1755327926632_57.hex");
    if (!inj_out1_1755327926632_57_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out1_1755327926632_57: output_inj_out1_1755327926632_57.hex" << std::endl;
        return 1;
    }
    inj_out1_1755327926632_57_file << (_get_port_value(countbits_ops_i.p_inj__out1__1755327926632__57, 0) ? '1' : '0') << std::endl;
    inj_out1_1755327926632_57_file.close();

    std::ofstream inj_out2_1755327926632_351_file("output_inj_out2_1755327926632_351.hex");
    if (!inj_out2_1755327926632_351_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out2_1755327926632_351: output_inj_out2_1755327926632_351.hex" << std::endl;
        return 1;
    }
    inj_out2_1755327926632_351_file << (_get_port_value(countbits_ops_i.p_inj__out2__1755327926632__351, 0) ? '1' : '0') << std::endl;
    inj_out2_1755327926632_351_file.close();

    std::ofstream inj_out_if_a_1755327927122_56_file("output_inj_out_if_a_1755327927122_56.hex");
    if (!inj_out_if_a_1755327927122_56_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_if_a_1755327927122_56: output_inj_out_if_a_1755327927122_56.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_if_a_1755327927122_56_file << (_get_port_value(countbits_ops_i.p_inj__out__if__a__1755327927122__56, i) ? '1' : '0');
    }
    inj_out_if_a_1755327927122_56_file << std::endl;
    inj_out_if_a_1755327927122_56_file.close();

    std::ofstream inj_out_if_b_1755327927122_640_file("output_inj_out_if_b_1755327927122_640.hex");
    if (!inj_out_if_b_1755327927122_640_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_if_b_1755327927122_640: output_inj_out_if_b_1755327927122_640.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_if_b_1755327927122_640_file << (_get_port_value(countbits_ops_i.p_inj__out__if__b__1755327927122__640, i) ? '1' : '0');
    }
    inj_out_if_b_1755327927122_640_file << std::endl;
    inj_out_if_b_1755327927122_640_file.close();

    std::ofstream inj_out_result_1755327926663_344_file("output_inj_out_result_1755327926663_344.hex");
    if (!inj_out_result_1755327926663_344_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_result_1755327926663_344: output_inj_out_result_1755327926663_344.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        inj_out_result_1755327926663_344_file << (_get_port_value(countbits_ops_i.p_inj__out__result__1755327926663__344, i) ? '1' : '0');
    }
    inj_out_result_1755327926663_344_file << std::endl;
    inj_out_result_1755327926663_344_file.close();

    std::ofstream inj_selected_data_1755327927048_911_file("output_inj_selected_data_1755327927048_911.hex");
    if (!inj_selected_data_1755327927048_911_file.is_open()) {
        std::cerr << "Failed to open output file for inj_selected_data_1755327927048_911: output_inj_selected_data_1755327927048_911.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_selected_data_1755327927048_911_file << (_get_port_value(countbits_ops_i.p_inj__selected__data__1755327927048__911, i) ? '1' : '0');
    }
    inj_selected_data_1755327927048_911_file << std::endl;
    inj_selected_data_1755327927048_911_file.close();

    std::ofstream inj_wide_out_1755327927268_852_file("output_inj_wide_out_1755327927268_852.hex");
    if (!inj_wide_out_1755327927268_852_file.is_open()) {
        std::cerr << "Failed to open output file for inj_wide_out_1755327927268_852: output_inj_wide_out_1755327927268_852.hex" << std::endl;
        return 1;
    }
    for (int i = 63; i >= 0; --i) {
        inj_wide_out_1755327927268_852_file << (_get_port_value(countbits_ops_i.p_inj__wide__out__1755327927268__852, i) ? '1' : '0');
    }
    inj_wide_out_1755327927268_852_file << std::endl;
    inj_wide_out_1755327927268_852_file.close();

    std::ofstream inj_wide_out_1755327927324_1_file("output_inj_wide_out_1755327927324_1.hex");
    if (!inj_wide_out_1755327927324_1_file.is_open()) {
        std::cerr << "Failed to open output file for inj_wide_out_1755327927324_1: output_inj_wide_out_1755327927324_1.hex" << std::endl;
        return 1;
    }
    for (int i = 63; i >= 0; --i) {
        inj_wide_out_1755327927324_1_file << (_get_port_value(countbits_ops_i.p_inj__wide__out__1755327927324__1, i) ? '1' : '0');
    }
    inj_wide_out_1755327927324_1_file << std::endl;
    inj_wide_out_1755327927324_1_file.close();

    std::ofstream inj_wide_reg_1755327926787_940_file("output_inj_wide_reg_1755327926787_940.hex");
    if (!inj_wide_reg_1755327926787_940_file.is_open()) {
        std::cerr << "Failed to open output file for inj_wide_reg_1755327926787_940: output_inj_wide_reg_1755327926787_940.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_wide_reg_1755327926787_940_file << (_get_port_value(countbits_ops_i.p_inj__wide__reg__1755327926787__940, i) ? '1' : '0');
    }
    inj_wide_reg_1755327926787_940_file << std::endl;
    inj_wide_reg_1755327926787_940_file.close();



    return 0;
}
