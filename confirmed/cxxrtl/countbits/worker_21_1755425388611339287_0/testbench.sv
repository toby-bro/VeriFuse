// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go

module top;
    logic clk;
    logic [7:0] in_d;
    logic [1:0] inj_case_expr_1755425388977_720;
    logic [2:0] inj_shift_val_1755425388976_868;
    logic rst;
    logic [3:0] cnt;
    logic [4:0] inj_internal_out_1755425388977_412;
    logic [7:0] inj_left_shift_log_1755425388976_490;
    logic [7:0] inj_right_shift_arith_1755425388976_438;
    logic [7:0] inj_right_shift_log_1755425388976_946;

    countbits_ops dut (
        .clk(clk),
        .in_d(in_d),
        .inj_case_expr_1755425388977_720(inj_case_expr_1755425388977_720),
        .inj_shift_val_1755425388976_868(inj_shift_val_1755425388976_868),
        .rst(rst),
        .cnt(cnt),
        .inj_internal_out_1755425388977_412(inj_internal_out_1755425388977_412),
        .inj_left_shift_log_1755425388976_490(inj_left_shift_log_1755425388976_490),
        .inj_right_shift_arith_1755425388976_438(inj_right_shift_arith_1755425388976_438),
        .inj_right_shift_log_1755425388976_946(inj_right_shift_log_1755425388976_946)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 3 input files
        clk = 0;

        fd = $fopen("input_in_d.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_in_d.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", in_d);
        $fclose(fd);

        fd = $fopen("input_inj_case_expr_1755425388977_720.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_case_expr_1755425388977_720.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_case_expr_1755425388977_720);
        $fclose(fd);

        fd = $fopen("input_inj_shift_val_1755425388976_868.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_shift_val_1755425388976_868.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_shift_val_1755425388976_868);
        $fclose(fd);
        rst = 0;


        // Toggle reset if a reset signal was identified

        // Toggle reset signal rst
        rst = 1; // Assert reset (active high)
        #10;
        rst = 0; // De-assert reset
        #10; // Wait after de-asserting reset


        // Toggle clock signals

        // Toggle clocks for several cycles with timeout protection
        // Set simulation timeout to prevent infinite loops
        fork
            begin
                #780;
                $display("ERROR: Simulation timeout after 780 time units");
                $finish;
            end
            begin
                repeat (50) begin
                    clk = 0;
                    #5;
                    clk = 1;
                    #5;
                end
            end
        join_any
        disable fork; // Kill timeout process


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 5 output files

        fd = $fopen("output_cnt.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_cnt.hex' for port 'cnt'.", "output_cnt.hex", "cnt");
            $finish;
        end
        for (int i = 3; i >= 0; i--) begin
            $fwrite(fd, "%b", cnt[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_internal_out_1755425388977_412.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_internal_out_1755425388977_412.hex' for port 'inj_internal_out_1755425388977_412'.", "output_inj_internal_out_1755425388977_412.hex", "inj_internal_out_1755425388977_412");
            $finish;
        end
        for (int i = 4; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_internal_out_1755425388977_412[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_left_shift_log_1755425388976_490.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_left_shift_log_1755425388976_490.hex' for port 'inj_left_shift_log_1755425388976_490'.", "output_inj_left_shift_log_1755425388976_490.hex", "inj_left_shift_log_1755425388976_490");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_left_shift_log_1755425388976_490[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_right_shift_arith_1755425388976_438.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_right_shift_arith_1755425388976_438.hex' for port 'inj_right_shift_arith_1755425388976_438'.", "output_inj_right_shift_arith_1755425388976_438.hex", "inj_right_shift_arith_1755425388976_438");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_right_shift_arith_1755425388976_438[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_right_shift_log_1755425388976_946.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_right_shift_log_1755425388976_946.hex' for port 'inj_right_shift_log_1755425388976_946'.", "output_inj_right_shift_log_1755425388976_946.hex", "inj_right_shift_log_1755425388976_946");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_right_shift_log_1755425388976_946[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);


        $finish;
    end
endmodule