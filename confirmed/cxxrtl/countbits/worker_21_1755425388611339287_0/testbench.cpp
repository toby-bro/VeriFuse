// Generated C++ testbench for CXXRTL
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
#include "countbits_ops.cc" // CXXRTL generated header for the module

#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdint>
#include <string>
#include <sstream>
#include <type_traits>

// Template helpers to detect and work with both value<> and wire<> types
template<typename T>
struct has_curr {
    template<typename U>
    static auto test(int) -> decltype(std::declval<U>().curr, std::true_type{});
    template<typename>
    static std::false_type test(...);
    using type = decltype(test<T>(0));
    static constexpr bool value = type::value;
};

// Helper function to get port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.curr.template get<T>();
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.template get<T>();
}

// Helper function to get port bit - works with both value<> and wire<>
template<typename PortType>
typename std::enable_if<has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.curr.bit(bit);
}

template<typename PortType>
typename std::enable_if<!has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.bit(bit);
}

// Helper function to get wide port value - works with both value<> and wire<>
template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<has_curr<PortType>::value, decltype(port.curr)>::type {
    return port.curr;
}

template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<!has_curr<PortType>::value, PortType>::type {
    return port;
}

// Helper function to set port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.next.template set<T>(value);
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.template set<T>(value);
}

// Helper function to set wide port value - works with both value<> and wire<>
template<typename PortType, typename ValueType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port.next = value;
}

template<typename PortType, typename ValueType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port = value;
}

int main(int argc, char** argv) {
    cxxrtl_design::p_countbits__ops countbits_ops_i; // DUT instance

    // Declare input variables
    bool clk;
    uint8_t in_d;
    uint8_t inj_case_expr_1755425388977_720;
    uint8_t inj_shift_val_1755425388976_868;
    bool rst;


    // Read input values
    std::ifstream clk_file("input_clk.hex");
    if (!clk_file.is_open()) {
        std::cerr << "Failed to open input file for clk: input_clk.hex" << std::endl;
        return 1;
    }
    std::string clk_hex_str;
    clk_file >> clk_hex_str;
    if (clk_file.fail() && !clk_file.eof()) {
        std::cerr << "Failed to read hex string for clk from input file: input_clk.hex" << std::endl;
        clk_file.close();
        return 1;
    }
    std::stringstream ss_clk;
    ss_clk << std::hex << clk_hex_str;
    unsigned int temp_clk;
    if (!(ss_clk >> temp_clk)) {
        std::cerr << "Failed to parse hex value for clk: " << clk_hex_str << std::endl;
        clk_file.close();
        return 1;
    }
    clk = static_cast<bool>(temp_clk);
    clk_file.close();

    std::ifstream in_d_file("input_in_d.hex");
    if (!in_d_file.is_open()) {
        std::cerr << "Failed to open input file for in_d: input_in_d.hex" << std::endl;
        return 1;
    }
    std::string in_d_hex_str;
    in_d_file >> in_d_hex_str;
    if (in_d_file.fail() && !in_d_file.eof()) {
        std::cerr << "Failed to read hex string for in_d from input file: input_in_d.hex" << std::endl;
        in_d_file.close();
        return 1;
    }
    std::stringstream ss_in_d;
    ss_in_d << std::hex << in_d_hex_str;
    unsigned int temp_in_d;
    if (!(ss_in_d >> temp_in_d)) {
        std::cerr << "Failed to parse hex value for in_d: " << in_d_hex_str << std::endl;
        in_d_file.close();
        return 1;
    }
    in_d = static_cast<uint8_t>(temp_in_d);
    in_d_file.close();

    std::ifstream inj_case_expr_1755425388977_720_file("input_inj_case_expr_1755425388977_720.hex");
    if (!inj_case_expr_1755425388977_720_file.is_open()) {
        std::cerr << "Failed to open input file for inj_case_expr_1755425388977_720: input_inj_case_expr_1755425388977_720.hex" << std::endl;
        return 1;
    }
    std::string inj_case_expr_1755425388977_720_hex_str;
    inj_case_expr_1755425388977_720_file >> inj_case_expr_1755425388977_720_hex_str;
    if (inj_case_expr_1755425388977_720_file.fail() && !inj_case_expr_1755425388977_720_file.eof()) {
        std::cerr << "Failed to read hex string for inj_case_expr_1755425388977_720 from input file: input_inj_case_expr_1755425388977_720.hex" << std::endl;
        inj_case_expr_1755425388977_720_file.close();
        return 1;
    }
    std::stringstream ss_inj_case_expr_1755425388977_720;
    ss_inj_case_expr_1755425388977_720 << std::hex << inj_case_expr_1755425388977_720_hex_str;
    unsigned int temp_inj_case_expr_1755425388977_720;
    if (!(ss_inj_case_expr_1755425388977_720 >> temp_inj_case_expr_1755425388977_720)) {
        std::cerr << "Failed to parse hex value for inj_case_expr_1755425388977_720: " << inj_case_expr_1755425388977_720_hex_str << std::endl;
        inj_case_expr_1755425388977_720_file.close();
        return 1;
    }
    inj_case_expr_1755425388977_720 = static_cast<uint8_t>(temp_inj_case_expr_1755425388977_720);
    inj_case_expr_1755425388977_720_file.close();

    std::ifstream inj_shift_val_1755425388976_868_file("input_inj_shift_val_1755425388976_868.hex");
    if (!inj_shift_val_1755425388976_868_file.is_open()) {
        std::cerr << "Failed to open input file for inj_shift_val_1755425388976_868: input_inj_shift_val_1755425388976_868.hex" << std::endl;
        return 1;
    }
    std::string inj_shift_val_1755425388976_868_hex_str;
    inj_shift_val_1755425388976_868_file >> inj_shift_val_1755425388976_868_hex_str;
    if (inj_shift_val_1755425388976_868_file.fail() && !inj_shift_val_1755425388976_868_file.eof()) {
        std::cerr << "Failed to read hex string for inj_shift_val_1755425388976_868 from input file: input_inj_shift_val_1755425388976_868.hex" << std::endl;
        inj_shift_val_1755425388976_868_file.close();
        return 1;
    }
    std::stringstream ss_inj_shift_val_1755425388976_868;
    ss_inj_shift_val_1755425388976_868 << std::hex << inj_shift_val_1755425388976_868_hex_str;
    unsigned int temp_inj_shift_val_1755425388976_868;
    if (!(ss_inj_shift_val_1755425388976_868 >> temp_inj_shift_val_1755425388976_868)) {
        std::cerr << "Failed to parse hex value for inj_shift_val_1755425388976_868: " << inj_shift_val_1755425388976_868_hex_str << std::endl;
        inj_shift_val_1755425388976_868_file.close();
        return 1;
    }
    inj_shift_val_1755425388976_868 = static_cast<uint8_t>(temp_inj_shift_val_1755425388976_868);
    inj_shift_val_1755425388976_868_file.close();

    std::ifstream rst_file("input_rst.hex");
    if (!rst_file.is_open()) {
        std::cerr << "Failed to open input file for rst: input_rst.hex" << std::endl;
        return 1;
    }
    std::string rst_hex_str;
    rst_file >> rst_hex_str;
    if (rst_file.fail() && !rst_file.eof()) {
        std::cerr << "Failed to read hex string for rst from input file: input_rst.hex" << std::endl;
        rst_file.close();
        return 1;
    }
    std::stringstream ss_rst;
    ss_rst << std::hex << rst_hex_str;
    unsigned int temp_rst;
    if (!(ss_rst >> temp_rst)) {
        std::cerr << "Failed to parse hex value for rst: " << rst_hex_str << std::endl;
        rst_file.close();
        return 1;
    }
    rst = static_cast<bool>(temp_rst);
    rst_file.close();



    // Apply inputs to DUT
    _set_port_value<bool>(countbits_ops_i.p_clk, clk);
    _set_port_value<uint8_t>(countbits_ops_i.p_in__d, in_d);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__case__expr__1755425388977__720, inj_case_expr_1755425388977_720);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__shift__val__1755425388976__868, inj_shift_val_1755425388976_868);
    _set_port_value<bool>(countbits_ops_i.p_rst, rst);
    // Input application


    // Handle reset, clock toggling, and evaluation

    // Toggle reset signal p_rst
    countbits_ops_i.p_rst.set<bool>(true); // Assert reset (active high)
    countbits_ops_i.step(); // Step to propagate reset assertion
    countbits_ops_i.p_rst.set<bool>(false); // De-assert reset
    countbits_ops_i.step(); // Step to propagate reset de-assertion
    countbits_ops_i.step(); // Extra step for settling after reset

    // Clock toggling with bounded cycles to prevent infinite loops
    for (int cycle = 0; cycle < 50; cycle++) {
        _set_port_value<bool>(countbits_ops_i.p_clk, false);
        countbits_ops_i.step(); // clock low
        _set_port_value<bool>(countbits_ops_i.p_clk, true);
        countbits_ops_i.step(); // clock high
    }

    // Bounded evaluation steps to ensure all logic settles (max 20 steps)
    for (int settle_step = 0; settle_step < 20; settle_step++) {
        countbits_ops_i.step();
    }


    // Write outputs from DUT
    std::ofstream cnt_file("output_cnt.hex");
    if (!cnt_file.is_open()) {
        std::cerr << "Failed to open output file for cnt: output_cnt.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        cnt_file << (_get_port_value(countbits_ops_i.p_cnt, i) ? '1' : '0');
    }
    cnt_file << std::endl;
    cnt_file.close();

    std::ofstream inj_internal_out_1755425388977_412_file("output_inj_internal_out_1755425388977_412.hex");
    if (!inj_internal_out_1755425388977_412_file.is_open()) {
        std::cerr << "Failed to open output file for inj_internal_out_1755425388977_412: output_inj_internal_out_1755425388977_412.hex" << std::endl;
        return 1;
    }
    for (int i = 4; i >= 0; --i) {
        inj_internal_out_1755425388977_412_file << (_get_port_value(countbits_ops_i.p_inj__internal__out__1755425388977__412, i) ? '1' : '0');
    }
    inj_internal_out_1755425388977_412_file << std::endl;
    inj_internal_out_1755425388977_412_file.close();

    std::ofstream inj_left_shift_log_1755425388976_490_file("output_inj_left_shift_log_1755425388976_490.hex");
    if (!inj_left_shift_log_1755425388976_490_file.is_open()) {
        std::cerr << "Failed to open output file for inj_left_shift_log_1755425388976_490: output_inj_left_shift_log_1755425388976_490.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_left_shift_log_1755425388976_490_file << (_get_port_value(countbits_ops_i.p_inj__left__shift__log__1755425388976__490, i) ? '1' : '0');
    }
    inj_left_shift_log_1755425388976_490_file << std::endl;
    inj_left_shift_log_1755425388976_490_file.close();

    std::ofstream inj_right_shift_arith_1755425388976_438_file("output_inj_right_shift_arith_1755425388976_438.hex");
    if (!inj_right_shift_arith_1755425388976_438_file.is_open()) {
        std::cerr << "Failed to open output file for inj_right_shift_arith_1755425388976_438: output_inj_right_shift_arith_1755425388976_438.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_right_shift_arith_1755425388976_438_file << (_get_port_value(countbits_ops_i.p_inj__right__shift__arith__1755425388976__438, i) ? '1' : '0');
    }
    inj_right_shift_arith_1755425388976_438_file << std::endl;
    inj_right_shift_arith_1755425388976_438_file.close();

    std::ofstream inj_right_shift_log_1755425388976_946_file("output_inj_right_shift_log_1755425388976_946.hex");
    if (!inj_right_shift_log_1755425388976_946_file.is_open()) {
        std::cerr << "Failed to open output file for inj_right_shift_log_1755425388976_946: output_inj_right_shift_log_1755425388976_946.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_right_shift_log_1755425388976_946_file << (_get_port_value(countbits_ops_i.p_inj__right__shift__log__1755425388976__946, i) ? '1' : '0');
    }
    inj_right_shift_log_1755425388976_946_file << std::endl;
    inj_right_shift_log_1755425388976_946_file.close();



    return 0;
}
