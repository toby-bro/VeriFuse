// Yosys script used:
// read_verilog -sv dist/worker_24_1755351777233063357_0/countbits_ops.sv; prep -top countbits_ops; abc; fsm; fsm_map; opt_merge -nomux; fsm_opt; opt_expr -fine; opt_reduce; write_verilog -sv -noattr dist/worker_24_1755351777233063357_0/countbits_ops-Yosys.sv
/* Generated by Yosys 0.55+23 (git sha1 e57a2b944, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

module countbits_ops(clk, in_d, inj_data_case_b_1755351777634_656, inj_in_value_1755351777633_372, inj_select_case_1755351777634_128, rst, cnt, inj_case_output_ready_1755351777634_844, inj_out_category_1755351777633_459);
  wire [3:0] _00_;
  wire [3:0] _01_;
  wire [3:0] _02_;
  wire [3:0] _03_;
  wire [1:0] _04_;
  wire [2:0] _05_;
  wire [3:0] _06_;
  wire _07_;
  wire [31:0] _08_;
  wire [31:0] _09_;
  wire [31:0] _10_;
  wire [31:0] _11_;
  wire [31:0] _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire [31:0] _29_;
  wire [31:0] _30_;
  wire [31:0] _31_;
  wire _32_;
  wire _33_;
  wire [0:0] \case_vif_inst.ready ;
  input clk;
  wire clk;
  output [3:0] cnt;
  wire [3:0] cnt;
  input [7:0] in_d;
  wire [7:0] in_d;
  output inj_case_output_ready_1755351777634_844;
  wire inj_case_output_ready_1755351777634_844;
  input [7:0] inj_data_case_b_1755351777634_656;
  wire [7:0] inj_data_case_b_1755351777634_656;
  input [7:0] inj_in_value_1755351777633_372;
  wire [7:0] inj_in_value_1755351777633_372;
  output [2:0] inj_out_category_1755351777633_459;
  wire [2:0] inj_out_category_1755351777633_459;
  input [1:0] inj_select_case_1755351777634_128;
  wire [1:0] inj_select_case_1755351777634_128;
  input rst;
  wire rst;
  assign _00_ = _06_ + _08_[0];
  assign _01_ = _00_ + _29_[0];
  assign _02_ = _01_ + _30_[0];
  assign _03_ = _02_ + _31_[0];
  assign _05_ = _04_ + _11_[0];
  assign _06_ = _05_ + _12_[0];
  assign cnt = _03_ + _09_[0];
  assign _07_ = | { _32_, _33_ };
  assign _13_ = in_d[4] === 1'hx;
  assign _14_ = in_d[3] === 1'h1;
  assign _15_ = in_d[3] === 1'hx;
  assign _16_ = in_d[2] === 1'h1;
  assign _17_ = in_d[2] === 1'hx;
  assign _18_ = in_d[1] === 1'h1;
  assign _19_ = in_d[1] === 1'hx;
  assign _20_ = in_d[0] === 1'h1;
  assign _21_ = in_d[0] === 1'hx;
  assign _22_ = in_d[7] === 1'h1;
  assign _23_ = in_d[7] === 1'hx;
  assign _24_ = in_d[6] === 1'h1;
  assign _25_ = in_d[6] === 1'hx;
  assign _26_ = in_d[5] === 1'h1;
  assign _27_ = in_d[5] === 1'hx;
  assign _28_ = in_d[4] === 1'h1;
  assign _08_[0] = _28_ || _13_;
  assign _29_[0] = _14_ || _15_;
  assign _30_[0] = _16_ || _17_;
  assign _31_[0] = _18_ || _19_;
  assign _09_[0] = _20_ || _21_;
  assign _10_[0] = _22_ || _23_;
  assign _11_[0] = _24_ || _25_;
  assign _12_[0] = _26_ || _27_;
  assign inj_case_output_ready_1755351777634_844 = _07_ ? 1'h1 : 1'h0;
  assign _32_ = inj_select_case_1755351777634_128 == 2'h2;
  assign _33_ = inj_select_case_1755351777634_128 == 1'h1;
  mod_if_elseif_chained mod_if_elseif_chained_inst_1755351777633_2273 (
    .in_value(inj_in_value_1755351777633_372),
    .out_category(inj_out_category_1755351777633_459)
  );
  assign _08_[31:1] = 31'h00000000;
  assign _09_[31:1] = 31'h00000000;
  assign _10_[31:1] = 31'h00000000;
  assign _11_[31:1] = 31'h00000000;
  assign _12_[31:1] = 31'h00000000;
  assign _29_[31:1] = 31'h00000000;
  assign _30_[31:1] = 31'h00000000;
  assign _31_[31:1] = 31'h00000000;
  assign \case_vif_inst.ready  = inj_case_output_ready_1755351777634_844;
  assign _04_[0] = _10_[0];
  assign _04_[1] = 1'h0;
endmodule

module mod_if_elseif_chained(in_value, out_category);
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  input [7:0] in_value;
  wire [7:0] in_value;
  output [2:0] out_category;
  wire [2:0] out_category;
  assign _02_ = in_value < 4'ha;
  assign _03_ = in_value < 6'h32;
  assign _04_ = in_value < 7'h64;
  assign _01_ = _04_ ? 1'h0 : 1'h1;
  assign _00_ = _03_ ? 3'h1 : { 2'h1, _01_ };
  assign out_category = _02_ ? 3'h0 : _00_;
endmodule

module my_if();
endmodule
