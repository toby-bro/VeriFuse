// Yosys script used:
// read_verilog -sv dist/worker_0_1755377830203962341_0/countbits_ops.sv; prep -top countbits_ops; fsm_map; proc; opt_expr -keepdc; opt_clean -purge; opt_demorgan; opt_mem; fsm_extract; fsm_detect; opt_dff; fsm_recode; opt_dff -nodffe; opt_reduce; opt_clean; write_verilog -sv -noattr dist/worker_0_1755377830203962341_0/countbits_ops-Yosys.sv
/* Generated by Yosys 0.55+23 (git sha1 e57a2b944, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

module CombinationalLogicImplicit(a, b, sum);
  input [3:0] a;
  wire [3:0] a;
  input [3:0] b;
  wire [3:0] b;
  output [3:0] sum;
  wire [3:0] sum;
  assign sum = a + b;
endmodule

module ComplexConversions(in_a, in_b, out_concat);
  input [7:0] in_a;
  wire [7:0] in_a;
  input [7:0] in_b;
  wire [7:0] in_b;
  output [15:0] out_concat;
  wire [15:0] out_concat;
  assign out_concat = { in_a, in_b };
endmodule

module ModuleBasic(a, b, out_a, out_b);
  wire [31:0] _0_;
  input a;
  wire a;
  input [31:0] b;
  wire [31:0] b;
  output out_a;
  wire out_a;
  output [31:0] out_b;
  wire [31:0] out_b;
  assign out_b = $signed(_0_) + $signed(6'h14);
  assign _0_ = $signed(b) + $signed(5'h0a);
  assign out_a = a;
endmodule

module countbits_ops(clk, in_d, inj_a_1755377830490_312, inj_a_1755377830492_285, inj_b_1755377830490_364, inj_b_1755377830492_365, inj_case_expr_1755377830490_540, inj_dummy_in_1755377830763_153, inj_enable_in_1755377830528_286, inj_in_a_1755377830531_804, rst, cnt, inj_internal_out_1755377830490_785, inj_internal_out_1755377831049_504, inj_out_1755377830528_293, inj_out_1755377831208_1, inj_out_a_1755377830867_226, inj_out_b_1755377830867_326, inj_out_concat_1755377830531_635, inj_out_res_1755377830620_21, inj_out_sum_m1_1755377830614_891
, inj_out_val_1755377830763_115, inj_q_out_1755377830519_395, inj_sum_1755377830490_590, inj_sum_1755377830492_554, inj_sum_out_i_1755377830637_404, inj_var_out_m1_1755377830614_259);
  wire [1:0] _00_;
  wire [2:0] _01_;
  wire [3:0] _02_;
  wire [3:0] _03_;
  wire [3:0] _04_;
  wire [3:0] _05_;
  wire [3:0] _06_;
  wire [31:0] _07_;
  wire [31:0] _08_;
  wire [31:0] _09_;
  wire [31:0] _10_;
  wire [31:0] _11_;
  wire [4:0] _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire [31:0] _29_;
  wire [31:0] _30_;
  wire [31:0] _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  input clk;
  wire clk;
  output [3:0] cnt;
  wire [3:0] cnt;
  input [7:0] in_d;
  wire [7:0] in_d;
  input [3:0] inj_a_1755377830490_312;
  wire [3:0] inj_a_1755377830490_312;
  input inj_a_1755377830492_285;
  wire inj_a_1755377830492_285;
  input [3:0] inj_b_1755377830490_364;
  wire [3:0] inj_b_1755377830490_364;
  input inj_b_1755377830492_365;
  wire inj_b_1755377830492_365;
  input [1:0] inj_case_expr_1755377830490_540;
  wire [1:0] inj_case_expr_1755377830490_540;
  input [31:0] inj_dummy_in_1755377830763_153;
  wire [31:0] inj_dummy_in_1755377830763_153;
  input inj_enable_in_1755377830528_286;
  wire inj_enable_in_1755377830528_286;
  input [7:0] inj_in_a_1755377830531_804;
  wire [7:0] inj_in_a_1755377830531_804;
  output [4:0] inj_internal_out_1755377830490_785;
  wire [4:0] inj_internal_out_1755377830490_785;
  output [4:0] inj_internal_out_1755377831049_504;
  wire [4:0] inj_internal_out_1755377831049_504;
  output inj_out_1755377830528_293;
  wire inj_out_1755377830528_293;
  output [7:0] inj_out_1755377831208_1;
  wire [7:0] inj_out_1755377831208_1;
  output inj_out_a_1755377830867_226;
  wire inj_out_a_1755377830867_226;
  output [31:0] inj_out_b_1755377830867_326;
  wire [31:0] inj_out_b_1755377830867_326;
  output [15:0] inj_out_concat_1755377830531_635;
  wire [15:0] inj_out_concat_1755377830531_635;
  output inj_out_res_1755377830620_21;
  wire inj_out_res_1755377830620_21;
  output [7:0] inj_out_sum_m1_1755377830614_891;
  wire [7:0] inj_out_sum_m1_1755377830614_891;
  output [31:0] inj_out_val_1755377830763_115;
  wire [31:0] inj_out_val_1755377830763_115;
  output inj_q_out_1755377830519_395;
  wire inj_q_out_1755377830519_395;
  output [3:0] inj_sum_1755377830490_590;
  wire [3:0] inj_sum_1755377830490_590;
  output inj_sum_1755377830492_554;
  wire inj_sum_1755377830492_554;
  output [15:0] inj_sum_out_i_1755377830637_404;
  wire [15:0] inj_sum_out_i_1755377830637_404;
  output [7:0] inj_var_out_m1_1755377830614_259;
  wire [7:0] inj_var_out_m1_1755377830614_259;
  reg q1_ts1755377830519;
  input rst;
  wire rst;
  assign inj_var_out_m1_1755377830614_259 = in_d + 1'h1;
  assign _00_ = 1'h0 + _07_[0];
  assign _01_ = _00_ + _08_[0];
  assign _02_ = _01_ + _09_[0];
  assign _03_ = _02_ + _10_[0];
  assign _04_ = _03_ + _29_[0];
  assign _05_ = _04_ + _30_[0];
  assign _06_ = _05_ + _31_[0];
  assign inj_out_sum_m1_1755377830614_891 = inj_var_out_m1_1755377830614_259 + inj_in_a_1755377830531_804;
  assign inj_sum_1755377830492_554 = inj_a_1755377830492_285 + inj_b_1755377830492_365;
  assign cnt = _06_ + _11_[0];
  assign _13_ = in_d[7] === 1'h1;
  assign _14_ = in_d[7] === 1'hx;
  assign _15_ = in_d[6] === 1'h1;
  assign _16_ = in_d[6] === 1'hx;
  assign _17_ = in_d[5] === 1'h1;
  assign _18_ = in_d[5] === 1'hx;
  assign _19_ = in_d[4] === 1'h1;
  assign _20_ = in_d[4] === 1'hx;
  assign _21_ = in_d[3] === 1'h1;
  assign _22_ = in_d[3] === 1'hx;
  assign _23_ = in_d[2] === 1'h1;
  assign _24_ = in_d[2] === 1'hx;
  assign _25_ = in_d[1] === 1'h1;
  assign _26_ = in_d[1] === 1'hx;
  assign _27_ = in_d[0] === 1'h1;
  assign _28_ = in_d[0] === 1'hx;
  assign _07_[0] = _13_ || _14_;
  assign _08_[0] = _15_ || _16_;
  assign _09_[0] = _17_ || _18_;
  assign _10_[0] = _19_ || _20_;
  assign _29_[0] = _21_ || _22_;
  assign _30_[0] = _23_ || _24_;
  assign _31_[0] = _25_ || _26_;
  assign _11_[0] = _27_ || _28_;
  assign inj_q_out_1755377830519_395 = ~ q1_ts1755377830519;
  always_ff @(posedge clk)
    q1_ts1755377830519 <= inj_a_1755377830492_285;
  assign inj_internal_out_1755377830490_785[1:0] = inj_case_expr_1755377830490_540[1] ? 2'h1 : { 1'h1, _12_[0] };
  assign inj_out_res_1755377830620_21 = _32_ ? 1'h0 : 1'h1;
  assign _32_ = inj_case_expr_1755377830490_540 == 2'h2;
  function [4:0] _77_;
    input [4:0] a;
    input [19:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _77_ = b[4:0];
      4'b??1?:
        _77_ = b[9:5];
      4'b?1??:
        _77_ = b[14:10];
      4'b1???:
        _77_ = b[19:15];
      default:
        _77_ = a;
    endcase
  endfunction
  assign inj_internal_out_1755377831049_504 = _77_(5'hxx, 20'hf7c01, { _36_, _35_, _34_, _33_ });
  assign _33_ = { inj_case_expr_1755377830490_540[0], inj_a_1755377830490_312[2] } == 2'h3;
  assign _34_ = { inj_case_expr_1755377830490_540[0], inj_a_1755377830490_312[2] } == 1'h1;
  assign _35_ = { inj_a_1755377830490_312[3:2], inj_case_expr_1755377830490_540[1] } == 3'h5;
  assign _36_ = { inj_case_expr_1755377830490_540[0], inj_a_1755377830490_312[2] } == 2'h2;
  assign _12_[0] = inj_case_expr_1755377830490_540[0] ? 1'h0 : 1'h1;
  CombinationalLogicImplicit CombinationalLogicImplicit_inst_1755377830490_8444 (
    .a(inj_a_1755377830490_312),
    .b(inj_b_1755377830490_364),
    .sum(inj_sum_1755377830490_590)
  );
  ComplexConversions ComplexConversions_inst_1755377830531_3525 (
    .in_a(inj_in_a_1755377830531_804),
    .in_b(in_d),
    .out_concat(inj_out_concat_1755377830531_635)
  );
  ModuleBasic ModuleBasic_inst_1755377830867_5062 (
    .a(q1_ts1755377830519),
    .b(inj_dummy_in_1755377830763_153),
    .out_a(inj_out_a_1755377830867_226),
    .out_b(inj_out_b_1755377830867_326)
  );
  recursive_param_diag_mod recursive_param_diag_mod_inst_1755377830763_4467 (
    .dummy_in(inj_dummy_in_1755377830763_153),
    .out_val(inj_out_val_1755377830763_115)
  );
  sequential_always_assign sequential_always_assign_inst_1755377831208_2049 (
    .clk(clk),
    .in(inj_var_out_m1_1755377830614_259),
    .out(inj_out_1755377831208_1)
  );
  split_for_loop split_for_loop_inst_1755377830637_5270 (
    .clk_i(clk),
    .start_val_i(inj_in_a_1755377830531_804),
    .sum_out_i(inj_sum_out_i_1755377830637_404)
  );
  assign _07_[31:1] = 31'h00000000;
  assign _08_[31:1] = 31'h00000000;
  assign _09_[31:1] = 31'h00000000;
  assign _10_[31:1] = 31'h00000000;
  assign _11_[31:1] = 31'h00000000;
  assign _12_[4:1] = 4'h3;
  assign _29_[31:1] = 31'h00000000;
  assign _30_[31:1] = 31'h00000000;
  assign _31_[31:1] = 31'h00000000;
  assign inj_internal_out_1755377830490_785[4:2] = 3'h1;
  assign inj_out_1755377830528_293 = inj_enable_in_1755377830528_286;
endmodule

module recursive_param_diag_mod(dummy_in, out_val);
  input [31:0] dummy_in;
  wire [31:0] dummy_in;
  output [31:0] out_val;
  wire [31:0] out_val;
  assign out_val = dummy_in;
endmodule

module sequential_always_assign(clk, in, out);
  input clk;
  wire clk;
  input [7:0] in;
  wire [7:0] in;
  output [7:0] out;
  reg [7:0] out;
  always_ff @(posedge clk)
    out <= in;
endmodule

module split_for_loop(clk_i, start_val_i, sum_out_i);
  wire [15:0] _0_;
  wire [15:0] _1_;
  input clk_i;
  wire clk_i;
  input [7:0] start_val_i;
  wire [7:0] start_val_i;
  output [15:0] sum_out_i;
  reg [15:0] sum_out_i;
  assign _1_ = sum_out_i + start_val_i;
  assign _0_ = _1_ + 2'h3;
  always_ff @(posedge clk_i)
    sum_out_i <= _0_;
endmodule
