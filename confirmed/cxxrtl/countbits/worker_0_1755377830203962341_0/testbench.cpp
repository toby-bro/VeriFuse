// Generated C++ testbench for CXXRTL
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
#include "countbits_ops.cc" // CXXRTL generated header for the module

#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdint>
#include <string>
#include <sstream>
#include <type_traits>

// Template helpers to detect and work with both value<> and wire<> types
template<typename T>
struct has_curr {
    template<typename U>
    static auto test(int) -> decltype(std::declval<U>().curr, std::true_type{});
    template<typename>
    static std::false_type test(...);
    using type = decltype(test<T>(0));
    static constexpr bool value = type::value;
};

// Helper function to get port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.curr.template get<T>();
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.template get<T>();
}

// Helper function to get port bit - works with both value<> and wire<>
template<typename PortType>
typename std::enable_if<has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.curr.bit(bit);
}

template<typename PortType>
typename std::enable_if<!has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.bit(bit);
}

// Helper function to get wide port value - works with both value<> and wire<>
template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<has_curr<PortType>::value, decltype(port.curr)>::type {
    return port.curr;
}

template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<!has_curr<PortType>::value, PortType>::type {
    return port;
}

// Helper function to set port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.next.template set<T>(value);
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.template set<T>(value);
}

// Helper function to set wide port value - works with both value<> and wire<>
template<typename PortType, typename ValueType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port.next = value;
}

template<typename PortType, typename ValueType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port = value;
}

int main(int argc, char** argv) {
    cxxrtl_design::p_countbits__ops countbits_ops_i; // DUT instance

    // Declare input variables
    bool clk;
    uint8_t in_d;
    uint8_t inj_a_1755377830490_312;
    bool inj_a_1755377830492_285;
    uint8_t inj_b_1755377830490_364;
    bool inj_b_1755377830492_365;
    uint8_t inj_case_expr_1755377830490_540;
    uint32_t inj_dummy_in_1755377830763_153;
    bool inj_enable_in_1755377830528_286;
    uint8_t inj_in_a_1755377830531_804;
    bool rst;


    // Read input values
    std::ifstream clk_file("input_clk.hex");
    if (!clk_file.is_open()) {
        std::cerr << "Failed to open input file for clk: input_clk.hex" << std::endl;
        return 1;
    }
    std::string clk_hex_str;
    clk_file >> clk_hex_str;
    if (clk_file.fail() && !clk_file.eof()) {
        std::cerr << "Failed to read hex string for clk from input file: input_clk.hex" << std::endl;
        clk_file.close();
        return 1;
    }
    std::stringstream ss_clk;
    ss_clk << std::hex << clk_hex_str;
    unsigned int temp_clk;
    if (!(ss_clk >> temp_clk)) {
        std::cerr << "Failed to parse hex value for clk: " << clk_hex_str << std::endl;
        clk_file.close();
        return 1;
    }
    clk = static_cast<bool>(temp_clk);
    clk_file.close();

    std::ifstream in_d_file("input_in_d.hex");
    if (!in_d_file.is_open()) {
        std::cerr << "Failed to open input file for in_d: input_in_d.hex" << std::endl;
        return 1;
    }
    std::string in_d_hex_str;
    in_d_file >> in_d_hex_str;
    if (in_d_file.fail() && !in_d_file.eof()) {
        std::cerr << "Failed to read hex string for in_d from input file: input_in_d.hex" << std::endl;
        in_d_file.close();
        return 1;
    }
    std::stringstream ss_in_d;
    ss_in_d << std::hex << in_d_hex_str;
    unsigned int temp_in_d;
    if (!(ss_in_d >> temp_in_d)) {
        std::cerr << "Failed to parse hex value for in_d: " << in_d_hex_str << std::endl;
        in_d_file.close();
        return 1;
    }
    in_d = static_cast<uint8_t>(temp_in_d);
    in_d_file.close();

    std::ifstream inj_a_1755377830490_312_file("input_inj_a_1755377830490_312.hex");
    if (!inj_a_1755377830490_312_file.is_open()) {
        std::cerr << "Failed to open input file for inj_a_1755377830490_312: input_inj_a_1755377830490_312.hex" << std::endl;
        return 1;
    }
    std::string inj_a_1755377830490_312_hex_str;
    inj_a_1755377830490_312_file >> inj_a_1755377830490_312_hex_str;
    if (inj_a_1755377830490_312_file.fail() && !inj_a_1755377830490_312_file.eof()) {
        std::cerr << "Failed to read hex string for inj_a_1755377830490_312 from input file: input_inj_a_1755377830490_312.hex" << std::endl;
        inj_a_1755377830490_312_file.close();
        return 1;
    }
    std::stringstream ss_inj_a_1755377830490_312;
    ss_inj_a_1755377830490_312 << std::hex << inj_a_1755377830490_312_hex_str;
    unsigned int temp_inj_a_1755377830490_312;
    if (!(ss_inj_a_1755377830490_312 >> temp_inj_a_1755377830490_312)) {
        std::cerr << "Failed to parse hex value for inj_a_1755377830490_312: " << inj_a_1755377830490_312_hex_str << std::endl;
        inj_a_1755377830490_312_file.close();
        return 1;
    }
    inj_a_1755377830490_312 = static_cast<uint8_t>(temp_inj_a_1755377830490_312);
    inj_a_1755377830490_312_file.close();

    std::ifstream inj_a_1755377830492_285_file("input_inj_a_1755377830492_285.hex");
    if (!inj_a_1755377830492_285_file.is_open()) {
        std::cerr << "Failed to open input file for inj_a_1755377830492_285: input_inj_a_1755377830492_285.hex" << std::endl;
        return 1;
    }
    std::string inj_a_1755377830492_285_hex_str;
    inj_a_1755377830492_285_file >> inj_a_1755377830492_285_hex_str;
    if (inj_a_1755377830492_285_file.fail() && !inj_a_1755377830492_285_file.eof()) {
        std::cerr << "Failed to read hex string for inj_a_1755377830492_285 from input file: input_inj_a_1755377830492_285.hex" << std::endl;
        inj_a_1755377830492_285_file.close();
        return 1;
    }
    std::stringstream ss_inj_a_1755377830492_285;
    ss_inj_a_1755377830492_285 << std::hex << inj_a_1755377830492_285_hex_str;
    unsigned int temp_inj_a_1755377830492_285;
    if (!(ss_inj_a_1755377830492_285 >> temp_inj_a_1755377830492_285)) {
        std::cerr << "Failed to parse hex value for inj_a_1755377830492_285: " << inj_a_1755377830492_285_hex_str << std::endl;
        inj_a_1755377830492_285_file.close();
        return 1;
    }
    inj_a_1755377830492_285 = static_cast<bool>(temp_inj_a_1755377830492_285);
    inj_a_1755377830492_285_file.close();

    std::ifstream inj_b_1755377830490_364_file("input_inj_b_1755377830490_364.hex");
    if (!inj_b_1755377830490_364_file.is_open()) {
        std::cerr << "Failed to open input file for inj_b_1755377830490_364: input_inj_b_1755377830490_364.hex" << std::endl;
        return 1;
    }
    std::string inj_b_1755377830490_364_hex_str;
    inj_b_1755377830490_364_file >> inj_b_1755377830490_364_hex_str;
    if (inj_b_1755377830490_364_file.fail() && !inj_b_1755377830490_364_file.eof()) {
        std::cerr << "Failed to read hex string for inj_b_1755377830490_364 from input file: input_inj_b_1755377830490_364.hex" << std::endl;
        inj_b_1755377830490_364_file.close();
        return 1;
    }
    std::stringstream ss_inj_b_1755377830490_364;
    ss_inj_b_1755377830490_364 << std::hex << inj_b_1755377830490_364_hex_str;
    unsigned int temp_inj_b_1755377830490_364;
    if (!(ss_inj_b_1755377830490_364 >> temp_inj_b_1755377830490_364)) {
        std::cerr << "Failed to parse hex value for inj_b_1755377830490_364: " << inj_b_1755377830490_364_hex_str << std::endl;
        inj_b_1755377830490_364_file.close();
        return 1;
    }
    inj_b_1755377830490_364 = static_cast<uint8_t>(temp_inj_b_1755377830490_364);
    inj_b_1755377830490_364_file.close();

    std::ifstream inj_b_1755377830492_365_file("input_inj_b_1755377830492_365.hex");
    if (!inj_b_1755377830492_365_file.is_open()) {
        std::cerr << "Failed to open input file for inj_b_1755377830492_365: input_inj_b_1755377830492_365.hex" << std::endl;
        return 1;
    }
    std::string inj_b_1755377830492_365_hex_str;
    inj_b_1755377830492_365_file >> inj_b_1755377830492_365_hex_str;
    if (inj_b_1755377830492_365_file.fail() && !inj_b_1755377830492_365_file.eof()) {
        std::cerr << "Failed to read hex string for inj_b_1755377830492_365 from input file: input_inj_b_1755377830492_365.hex" << std::endl;
        inj_b_1755377830492_365_file.close();
        return 1;
    }
    std::stringstream ss_inj_b_1755377830492_365;
    ss_inj_b_1755377830492_365 << std::hex << inj_b_1755377830492_365_hex_str;
    unsigned int temp_inj_b_1755377830492_365;
    if (!(ss_inj_b_1755377830492_365 >> temp_inj_b_1755377830492_365)) {
        std::cerr << "Failed to parse hex value for inj_b_1755377830492_365: " << inj_b_1755377830492_365_hex_str << std::endl;
        inj_b_1755377830492_365_file.close();
        return 1;
    }
    inj_b_1755377830492_365 = static_cast<bool>(temp_inj_b_1755377830492_365);
    inj_b_1755377830492_365_file.close();

    std::ifstream inj_case_expr_1755377830490_540_file("input_inj_case_expr_1755377830490_540.hex");
    if (!inj_case_expr_1755377830490_540_file.is_open()) {
        std::cerr << "Failed to open input file for inj_case_expr_1755377830490_540: input_inj_case_expr_1755377830490_540.hex" << std::endl;
        return 1;
    }
    std::string inj_case_expr_1755377830490_540_hex_str;
    inj_case_expr_1755377830490_540_file >> inj_case_expr_1755377830490_540_hex_str;
    if (inj_case_expr_1755377830490_540_file.fail() && !inj_case_expr_1755377830490_540_file.eof()) {
        std::cerr << "Failed to read hex string for inj_case_expr_1755377830490_540 from input file: input_inj_case_expr_1755377830490_540.hex" << std::endl;
        inj_case_expr_1755377830490_540_file.close();
        return 1;
    }
    std::stringstream ss_inj_case_expr_1755377830490_540;
    ss_inj_case_expr_1755377830490_540 << std::hex << inj_case_expr_1755377830490_540_hex_str;
    unsigned int temp_inj_case_expr_1755377830490_540;
    if (!(ss_inj_case_expr_1755377830490_540 >> temp_inj_case_expr_1755377830490_540)) {
        std::cerr << "Failed to parse hex value for inj_case_expr_1755377830490_540: " << inj_case_expr_1755377830490_540_hex_str << std::endl;
        inj_case_expr_1755377830490_540_file.close();
        return 1;
    }
    inj_case_expr_1755377830490_540 = static_cast<uint8_t>(temp_inj_case_expr_1755377830490_540);
    inj_case_expr_1755377830490_540_file.close();

    std::ifstream inj_dummy_in_1755377830763_153_file("input_inj_dummy_in_1755377830763_153.hex");
    if (!inj_dummy_in_1755377830763_153_file.is_open()) {
        std::cerr << "Failed to open input file for inj_dummy_in_1755377830763_153: input_inj_dummy_in_1755377830763_153.hex" << std::endl;
        return 1;
    }
    std::string inj_dummy_in_1755377830763_153_hex_str;
    inj_dummy_in_1755377830763_153_file >> inj_dummy_in_1755377830763_153_hex_str;
    if (inj_dummy_in_1755377830763_153_file.fail() && !inj_dummy_in_1755377830763_153_file.eof()) {
        std::cerr << "Failed to read hex string for inj_dummy_in_1755377830763_153 from input file: input_inj_dummy_in_1755377830763_153.hex" << std::endl;
        inj_dummy_in_1755377830763_153_file.close();
        return 1;
    }
    std::stringstream ss_inj_dummy_in_1755377830763_153;
    ss_inj_dummy_in_1755377830763_153 << std::hex << inj_dummy_in_1755377830763_153_hex_str;
    if (!(ss_inj_dummy_in_1755377830763_153 >> inj_dummy_in_1755377830763_153)) {
        std::cerr << "Failed to parse hex value for inj_dummy_in_1755377830763_153: " << inj_dummy_in_1755377830763_153_hex_str << std::endl;
        inj_dummy_in_1755377830763_153_file.close();
        return 1;
    }
    inj_dummy_in_1755377830763_153_file.close();

    std::ifstream inj_enable_in_1755377830528_286_file("input_inj_enable_in_1755377830528_286.hex");
    if (!inj_enable_in_1755377830528_286_file.is_open()) {
        std::cerr << "Failed to open input file for inj_enable_in_1755377830528_286: input_inj_enable_in_1755377830528_286.hex" << std::endl;
        return 1;
    }
    std::string inj_enable_in_1755377830528_286_hex_str;
    inj_enable_in_1755377830528_286_file >> inj_enable_in_1755377830528_286_hex_str;
    if (inj_enable_in_1755377830528_286_file.fail() && !inj_enable_in_1755377830528_286_file.eof()) {
        std::cerr << "Failed to read hex string for inj_enable_in_1755377830528_286 from input file: input_inj_enable_in_1755377830528_286.hex" << std::endl;
        inj_enable_in_1755377830528_286_file.close();
        return 1;
    }
    std::stringstream ss_inj_enable_in_1755377830528_286;
    ss_inj_enable_in_1755377830528_286 << std::hex << inj_enable_in_1755377830528_286_hex_str;
    unsigned int temp_inj_enable_in_1755377830528_286;
    if (!(ss_inj_enable_in_1755377830528_286 >> temp_inj_enable_in_1755377830528_286)) {
        std::cerr << "Failed to parse hex value for inj_enable_in_1755377830528_286: " << inj_enable_in_1755377830528_286_hex_str << std::endl;
        inj_enable_in_1755377830528_286_file.close();
        return 1;
    }
    inj_enable_in_1755377830528_286 = static_cast<bool>(temp_inj_enable_in_1755377830528_286);
    inj_enable_in_1755377830528_286_file.close();

    std::ifstream inj_in_a_1755377830531_804_file("input_inj_in_a_1755377830531_804.hex");
    if (!inj_in_a_1755377830531_804_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_a_1755377830531_804: input_inj_in_a_1755377830531_804.hex" << std::endl;
        return 1;
    }
    std::string inj_in_a_1755377830531_804_hex_str;
    inj_in_a_1755377830531_804_file >> inj_in_a_1755377830531_804_hex_str;
    if (inj_in_a_1755377830531_804_file.fail() && !inj_in_a_1755377830531_804_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_a_1755377830531_804 from input file: input_inj_in_a_1755377830531_804.hex" << std::endl;
        inj_in_a_1755377830531_804_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_a_1755377830531_804;
    ss_inj_in_a_1755377830531_804 << std::hex << inj_in_a_1755377830531_804_hex_str;
    unsigned int temp_inj_in_a_1755377830531_804;
    if (!(ss_inj_in_a_1755377830531_804 >> temp_inj_in_a_1755377830531_804)) {
        std::cerr << "Failed to parse hex value for inj_in_a_1755377830531_804: " << inj_in_a_1755377830531_804_hex_str << std::endl;
        inj_in_a_1755377830531_804_file.close();
        return 1;
    }
    inj_in_a_1755377830531_804 = static_cast<uint8_t>(temp_inj_in_a_1755377830531_804);
    inj_in_a_1755377830531_804_file.close();

    std::ifstream rst_file("input_rst.hex");
    if (!rst_file.is_open()) {
        std::cerr << "Failed to open input file for rst: input_rst.hex" << std::endl;
        return 1;
    }
    std::string rst_hex_str;
    rst_file >> rst_hex_str;
    if (rst_file.fail() && !rst_file.eof()) {
        std::cerr << "Failed to read hex string for rst from input file: input_rst.hex" << std::endl;
        rst_file.close();
        return 1;
    }
    std::stringstream ss_rst;
    ss_rst << std::hex << rst_hex_str;
    unsigned int temp_rst;
    if (!(ss_rst >> temp_rst)) {
        std::cerr << "Failed to parse hex value for rst: " << rst_hex_str << std::endl;
        rst_file.close();
        return 1;
    }
    rst = static_cast<bool>(temp_rst);
    rst_file.close();



    // Apply inputs to DUT
    _set_port_value<bool>(countbits_ops_i.p_clk, clk);
    _set_port_value<uint8_t>(countbits_ops_i.p_in__d, in_d);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__a__1755377830490__312, inj_a_1755377830490_312);
    _set_port_value<bool>(countbits_ops_i.p_inj__a__1755377830492__285, inj_a_1755377830492_285);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__b__1755377830490__364, inj_b_1755377830490_364);
    _set_port_value<bool>(countbits_ops_i.p_inj__b__1755377830492__365, inj_b_1755377830492_365);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__case__expr__1755377830490__540, inj_case_expr_1755377830490_540);
    _set_port_value<uint32_t>(countbits_ops_i.p_inj__dummy__in__1755377830763__153, inj_dummy_in_1755377830763_153);
    _set_port_value<bool>(countbits_ops_i.p_inj__enable__in__1755377830528__286, inj_enable_in_1755377830528_286);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__in__a__1755377830531__804, inj_in_a_1755377830531_804);
    _set_port_value<bool>(countbits_ops_i.p_rst, rst);
    // Input application


    // Handle reset, clock toggling, and evaluation

    // Toggle reset signal p_rst
    countbits_ops_i.p_rst.set<bool>(true); // Assert reset (active high)
    countbits_ops_i.step(); // Step to propagate reset assertion
    countbits_ops_i.p_rst.set<bool>(false); // De-assert reset
    countbits_ops_i.step(); // Step to propagate reset de-assertion
    countbits_ops_i.step(); // Extra step for settling after reset

    // Clock toggling with bounded cycles to prevent infinite loops
    for (int cycle = 0; cycle < 50; cycle++) {
        _set_port_value<bool>(countbits_ops_i.p_clk, false);
        countbits_ops_i.step(); // clock low
        _set_port_value<bool>(countbits_ops_i.p_clk, true);
        countbits_ops_i.step(); // clock high
    }

    // Bounded evaluation steps to ensure all logic settles (max 20 steps)
    for (int settle_step = 0; settle_step < 20; settle_step++) {
        countbits_ops_i.step();
    }


    // Write outputs from DUT
    std::ofstream cnt_file("output_cnt.hex");
    if (!cnt_file.is_open()) {
        std::cerr << "Failed to open output file for cnt: output_cnt.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        cnt_file << (_get_port_value(countbits_ops_i.p_cnt, i) ? '1' : '0');
    }
    cnt_file << std::endl;
    cnt_file.close();

    std::ofstream inj_internal_out_1755377830490_785_file("output_inj_internal_out_1755377830490_785.hex");
    if (!inj_internal_out_1755377830490_785_file.is_open()) {
        std::cerr << "Failed to open output file for inj_internal_out_1755377830490_785: output_inj_internal_out_1755377830490_785.hex" << std::endl;
        return 1;
    }
    for (int i = 4; i >= 0; --i) {
        inj_internal_out_1755377830490_785_file << (_get_port_value(countbits_ops_i.p_inj__internal__out__1755377830490__785, i) ? '1' : '0');
    }
    inj_internal_out_1755377830490_785_file << std::endl;
    inj_internal_out_1755377830490_785_file.close();

    std::ofstream inj_internal_out_1755377831049_504_file("output_inj_internal_out_1755377831049_504.hex");
    if (!inj_internal_out_1755377831049_504_file.is_open()) {
        std::cerr << "Failed to open output file for inj_internal_out_1755377831049_504: output_inj_internal_out_1755377831049_504.hex" << std::endl;
        return 1;
    }
    for (int i = 4; i >= 0; --i) {
        inj_internal_out_1755377831049_504_file << (_get_port_value(countbits_ops_i.p_inj__internal__out__1755377831049__504, i) ? '1' : '0');
    }
    inj_internal_out_1755377831049_504_file << std::endl;
    inj_internal_out_1755377831049_504_file.close();

    std::ofstream inj_out_1755377830528_293_file("output_inj_out_1755377830528_293.hex");
    if (!inj_out_1755377830528_293_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_1755377830528_293: output_inj_out_1755377830528_293.hex" << std::endl;
        return 1;
    }
    inj_out_1755377830528_293_file << (_get_port_value(countbits_ops_i.p_inj__out__1755377830528__293, 0) ? '1' : '0') << std::endl;
    inj_out_1755377830528_293_file.close();

    std::ofstream inj_out_1755377831208_1_file("output_inj_out_1755377831208_1.hex");
    if (!inj_out_1755377831208_1_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_1755377831208_1: output_inj_out_1755377831208_1.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_1755377831208_1_file << (_get_port_value(countbits_ops_i.p_inj__out__1755377831208__1, i) ? '1' : '0');
    }
    inj_out_1755377831208_1_file << std::endl;
    inj_out_1755377831208_1_file.close();

    std::ofstream inj_out_a_1755377830867_226_file("output_inj_out_a_1755377830867_226.hex");
    if (!inj_out_a_1755377830867_226_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_a_1755377830867_226: output_inj_out_a_1755377830867_226.hex" << std::endl;
        return 1;
    }
    inj_out_a_1755377830867_226_file << (_get_port_value(countbits_ops_i.p_inj__out__a__1755377830867__226, 0) ? '1' : '0') << std::endl;
    inj_out_a_1755377830867_226_file.close();

    std::ofstream inj_out_b_1755377830867_326_file("output_inj_out_b_1755377830867_326.hex");
    if (!inj_out_b_1755377830867_326_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_b_1755377830867_326: output_inj_out_b_1755377830867_326.hex" << std::endl;
        return 1;
    }
    for (int i = 31; i >= 0; --i) {
        inj_out_b_1755377830867_326_file << (_get_port_value(countbits_ops_i.p_inj__out__b__1755377830867__326, i) ? '1' : '0');
    }
    inj_out_b_1755377830867_326_file << std::endl;
    inj_out_b_1755377830867_326_file.close();

    std::ofstream inj_out_concat_1755377830531_635_file("output_inj_out_concat_1755377830531_635.hex");
    if (!inj_out_concat_1755377830531_635_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_concat_1755377830531_635: output_inj_out_concat_1755377830531_635.hex" << std::endl;
        return 1;
    }
    for (int i = 15; i >= 0; --i) {
        inj_out_concat_1755377830531_635_file << (_get_port_value(countbits_ops_i.p_inj__out__concat__1755377830531__635, i) ? '1' : '0');
    }
    inj_out_concat_1755377830531_635_file << std::endl;
    inj_out_concat_1755377830531_635_file.close();

    std::ofstream inj_out_res_1755377830620_21_file("output_inj_out_res_1755377830620_21.hex");
    if (!inj_out_res_1755377830620_21_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_res_1755377830620_21: output_inj_out_res_1755377830620_21.hex" << std::endl;
        return 1;
    }
    inj_out_res_1755377830620_21_file << (_get_port_value(countbits_ops_i.p_inj__out__res__1755377830620__21, 0) ? '1' : '0') << std::endl;
    inj_out_res_1755377830620_21_file.close();

    std::ofstream inj_out_sum_m1_1755377830614_891_file("output_inj_out_sum_m1_1755377830614_891.hex");
    if (!inj_out_sum_m1_1755377830614_891_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_sum_m1_1755377830614_891: output_inj_out_sum_m1_1755377830614_891.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_sum_m1_1755377830614_891_file << (_get_port_value(countbits_ops_i.p_inj__out__sum__m1__1755377830614__891, i) ? '1' : '0');
    }
    inj_out_sum_m1_1755377830614_891_file << std::endl;
    inj_out_sum_m1_1755377830614_891_file.close();

    std::ofstream inj_out_val_1755377830763_115_file("output_inj_out_val_1755377830763_115.hex");
    if (!inj_out_val_1755377830763_115_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_val_1755377830763_115: output_inj_out_val_1755377830763_115.hex" << std::endl;
        return 1;
    }
    for (int i = 31; i >= 0; --i) {
        inj_out_val_1755377830763_115_file << (_get_port_value(countbits_ops_i.p_inj__out__val__1755377830763__115, i) ? '1' : '0');
    }
    inj_out_val_1755377830763_115_file << std::endl;
    inj_out_val_1755377830763_115_file.close();

    std::ofstream inj_q_out_1755377830519_395_file("output_inj_q_out_1755377830519_395.hex");
    if (!inj_q_out_1755377830519_395_file.is_open()) {
        std::cerr << "Failed to open output file for inj_q_out_1755377830519_395: output_inj_q_out_1755377830519_395.hex" << std::endl;
        return 1;
    }
    inj_q_out_1755377830519_395_file << (_get_port_value(countbits_ops_i.p_inj__q__out__1755377830519__395, 0) ? '1' : '0') << std::endl;
    inj_q_out_1755377830519_395_file.close();

    std::ofstream inj_sum_1755377830490_590_file("output_inj_sum_1755377830490_590.hex");
    if (!inj_sum_1755377830490_590_file.is_open()) {
        std::cerr << "Failed to open output file for inj_sum_1755377830490_590: output_inj_sum_1755377830490_590.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        inj_sum_1755377830490_590_file << (_get_port_value(countbits_ops_i.p_inj__sum__1755377830490__590, i) ? '1' : '0');
    }
    inj_sum_1755377830490_590_file << std::endl;
    inj_sum_1755377830490_590_file.close();

    std::ofstream inj_sum_1755377830492_554_file("output_inj_sum_1755377830492_554.hex");
    if (!inj_sum_1755377830492_554_file.is_open()) {
        std::cerr << "Failed to open output file for inj_sum_1755377830492_554: output_inj_sum_1755377830492_554.hex" << std::endl;
        return 1;
    }
    inj_sum_1755377830492_554_file << (_get_port_value(countbits_ops_i.p_inj__sum__1755377830492__554, 0) ? '1' : '0') << std::endl;
    inj_sum_1755377830492_554_file.close();

    std::ofstream inj_sum_out_i_1755377830637_404_file("output_inj_sum_out_i_1755377830637_404.hex");
    if (!inj_sum_out_i_1755377830637_404_file.is_open()) {
        std::cerr << "Failed to open output file for inj_sum_out_i_1755377830637_404: output_inj_sum_out_i_1755377830637_404.hex" << std::endl;
        return 1;
    }
    for (int i = 15; i >= 0; --i) {
        inj_sum_out_i_1755377830637_404_file << (_get_port_value(countbits_ops_i.p_inj__sum__out__i__1755377830637__404, i) ? '1' : '0');
    }
    inj_sum_out_i_1755377830637_404_file << std::endl;
    inj_sum_out_i_1755377830637_404_file.close();

    std::ofstream inj_var_out_m1_1755377830614_259_file("output_inj_var_out_m1_1755377830614_259.hex");
    if (!inj_var_out_m1_1755377830614_259_file.is_open()) {
        std::cerr << "Failed to open output file for inj_var_out_m1_1755377830614_259: output_inj_var_out_m1_1755377830614_259.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_var_out_m1_1755377830614_259_file << (_get_port_value(countbits_ops_i.p_inj__var__out__m1__1755377830614__259, i) ? '1' : '0');
    }
    inj_var_out_m1_1755377830614_259_file << std::endl;
    inj_var_out_m1_1755377830614_259_file.close();



    return 0;
}
