// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go

module top;
    logic clk;
    logic [7:0] in_d;
    logic [7:0] inj_b_aa_1755304956884_948;
    logic [7:0] inj_c_aa_1755304956884_870;
    logic inj_i_in_1755304956891_678;
    logic [15:0] inj_in1_1755304956885_384;
    logic [15:0] inj_in2_1755304956885_264;
    logic inj_sel_1755304956885_332;
    logic rst;
    logic [3:0] cnt;
    logic inj_o_out_1755304956891_544;
    logic [15:0] inj_out1_1755304956885_225;
    logic [7:0] inj_out1_1755304956889_463;
    logic inj_out1_1755304956904_206;
    logic [15:0] inj_out2_1755304956885_81;
    logic [7:0] inj_out2_1755304956889_223;
    logic [7:0] inj_x_aa_1755304956884_497;
    logic [7:0] inj_y_aa_1755304956884_267;
    logic [7:0] inj_z_aa_1755304956884_816;

    countbits_ops dut (
        .clk(clk),
        .in_d(in_d),
        .inj_b_aa_1755304956884_948(inj_b_aa_1755304956884_948),
        .inj_c_aa_1755304956884_870(inj_c_aa_1755304956884_870),
        .inj_i_in_1755304956891_678(inj_i_in_1755304956891_678),
        .inj_in1_1755304956885_384(inj_in1_1755304956885_384),
        .inj_in2_1755304956885_264(inj_in2_1755304956885_264),
        .inj_sel_1755304956885_332(inj_sel_1755304956885_332),
        .rst(rst),
        .cnt(cnt),
        .inj_o_out_1755304956891_544(inj_o_out_1755304956891_544),
        .inj_out1_1755304956885_225(inj_out1_1755304956885_225),
        .inj_out1_1755304956889_463(inj_out1_1755304956889_463),
        .inj_out1_1755304956904_206(inj_out1_1755304956904_206),
        .inj_out2_1755304956885_81(inj_out2_1755304956885_81),
        .inj_out2_1755304956889_223(inj_out2_1755304956889_223),
        .inj_x_aa_1755304956884_497(inj_x_aa_1755304956884_497),
        .inj_y_aa_1755304956884_267(inj_y_aa_1755304956884_267),
        .inj_z_aa_1755304956884_816(inj_z_aa_1755304956884_816)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 7 input files
        clk = 0;

        fd = $fopen("input_in_d.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_in_d.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", in_d);
        $fclose(fd);

        fd = $fopen("input_inj_b_aa_1755304956884_948.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_b_aa_1755304956884_948.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_b_aa_1755304956884_948);
        $fclose(fd);

        fd = $fopen("input_inj_c_aa_1755304956884_870.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_c_aa_1755304956884_870.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_c_aa_1755304956884_870);
        $fclose(fd);

        fd = $fopen("input_inj_i_in_1755304956891_678.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_i_in_1755304956891_678.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_i_in_1755304956891_678);
        $fclose(fd);

        fd = $fopen("input_inj_in1_1755304956885_384.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in1_1755304956885_384.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in1_1755304956885_384);
        $fclose(fd);

        fd = $fopen("input_inj_in2_1755304956885_264.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_in2_1755304956885_264.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_in2_1755304956885_264);
        $fclose(fd);

        fd = $fopen("input_inj_sel_1755304956885_332.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_inj_sel_1755304956885_332.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", inj_sel_1755304956885_332);
        $fclose(fd);
        rst = 0;


        // Toggle reset if a reset signal was identified

        // Toggle reset signal rst
        rst = 1; // Assert reset (active high)
        #10;
        rst = 0; // De-assert reset
        #10; // Wait after de-asserting reset


        // Toggle clock signals

        // Toggle clocks for several cycles with timeout protection
        // Set simulation timeout to prevent infinite loops
        fork
            begin
                #780;
                $display("ERROR: Simulation timeout after 780 time units");
                $finish;
            end
            begin
                repeat (50) begin
                    clk = 0;
                    #5;
                    clk = 1;
                    #5;
                end
            end
        join_any
        disable fork; // Kill timeout process


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 10 output files

        fd = $fopen("output_cnt.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_cnt.hex' for port 'cnt'.", "output_cnt.hex", "cnt");
            $finish;
        end
        for (int i = 3; i >= 0; i--) begin
            $fwrite(fd, "%b", cnt[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_o_out_1755304956891_544.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_o_out_1755304956891_544.hex' for port 'inj_o_out_1755304956891_544'.", "output_inj_o_out_1755304956891_544.hex", "inj_o_out_1755304956891_544");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_o_out_1755304956891_544);
        $fclose(fd);

        fd = $fopen("output_inj_out1_1755304956885_225.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out1_1755304956885_225.hex' for port 'inj_out1_1755304956885_225'.", "output_inj_out1_1755304956885_225.hex", "inj_out1_1755304956885_225");
            $finish;
        end
        for (int i = 15; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_out1_1755304956885_225[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_out1_1755304956889_463.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out1_1755304956889_463.hex' for port 'inj_out1_1755304956889_463'.", "output_inj_out1_1755304956889_463.hex", "inj_out1_1755304956889_463");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_out1_1755304956889_463[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_out1_1755304956904_206.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out1_1755304956904_206.hex' for port 'inj_out1_1755304956904_206'.", "output_inj_out1_1755304956904_206.hex", "inj_out1_1755304956904_206");
            $finish;
        end
        $fwrite(fd, "%b\n", inj_out1_1755304956904_206);
        $fclose(fd);

        fd = $fopen("output_inj_out2_1755304956885_81.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out2_1755304956885_81.hex' for port 'inj_out2_1755304956885_81'.", "output_inj_out2_1755304956885_81.hex", "inj_out2_1755304956885_81");
            $finish;
        end
        for (int i = 15; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_out2_1755304956885_81[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_out2_1755304956889_223.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_out2_1755304956889_223.hex' for port 'inj_out2_1755304956889_223'.", "output_inj_out2_1755304956889_223.hex", "inj_out2_1755304956889_223");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_out2_1755304956889_223[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_x_aa_1755304956884_497.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_x_aa_1755304956884_497.hex' for port 'inj_x_aa_1755304956884_497'.", "output_inj_x_aa_1755304956884_497.hex", "inj_x_aa_1755304956884_497");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_x_aa_1755304956884_497[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_y_aa_1755304956884_267.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_y_aa_1755304956884_267.hex' for port 'inj_y_aa_1755304956884_267'.", "output_inj_y_aa_1755304956884_267.hex", "inj_y_aa_1755304956884_267");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_y_aa_1755304956884_267[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);

        fd = $fopen("output_inj_z_aa_1755304956884_816.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_z_aa_1755304956884_816.hex' for port 'inj_z_aa_1755304956884_816'.", "output_inj_z_aa_1755304956884_816.hex", "inj_z_aa_1755304956884_816");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_z_aa_1755304956884_816[i]);
        end
        $fwrite(fd, "\n");        $fclose(fd);


        $finish;
    end
endmodule