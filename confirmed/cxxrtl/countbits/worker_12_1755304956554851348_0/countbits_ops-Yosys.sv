// Yosys script used:
// read_verilog -sv dist/worker_12_1755304956554851348_0/countbits_ops.sv; prep -top countbits_ops; opt_merge; opt_muxtree; fsm_extract; opt_demorgan; write_verilog -sv -noattr dist/worker_12_1755304956554851348_0/countbits_ops-Yosys.sv
/* Generated by Yosys 0.55+23 (git sha1 e57a2b944, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

module countbits_ops(clk, in_d, inj_b_aa_1755304956884_948, inj_c_aa_1755304956884_870, inj_i_in_1755304956891_678, inj_in1_1755304956885_384, inj_in2_1755304956885_264, inj_sel_1755304956885_332, rst, cnt, inj_o_out_1755304956891_544, inj_out1_1755304956885_225, inj_out1_1755304956889_463, inj_out1_1755304956904_206, inj_out2_1755304956885_81, inj_out2_1755304956889_223, inj_x_aa_1755304956884_497, inj_y_aa_1755304956884_267, inj_z_aa_1755304956884_816);
  wire [1:0] _00_;
  wire [2:0] _01_;
  wire [3:0] _02_;
  wire [3:0] _03_;
  wire [3:0] _04_;
  wire [3:0] _05_;
  wire [3:0] _06_;
  wire [16:0] _07_;
  wire [15:0] _08_;
  wire [15:0] _09_;
  wire [31:0] _10_;
  wire [31:0] _11_;
  wire [31:0] _12_;
  wire [31:0] _13_;
  wire [31:0] _14_;
  wire [31:0] _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire [31:0] _32_;
  wire [31:0] _33_;
  wire [15:0] _34_;
  wire [15:0] _35_;
  input clk;
  wire clk;
  output [3:0] cnt;
  wire [3:0] cnt;
  input [7:0] in_d;
  wire [7:0] in_d;
  input [7:0] inj_b_aa_1755304956884_948;
  wire [7:0] inj_b_aa_1755304956884_948;
  input [7:0] inj_c_aa_1755304956884_870;
  wire [7:0] inj_c_aa_1755304956884_870;
  input inj_i_in_1755304956891_678;
  wire inj_i_in_1755304956891_678;
  input [15:0] inj_in1_1755304956885_384;
  wire [15:0] inj_in1_1755304956885_384;
  input [15:0] inj_in2_1755304956885_264;
  wire [15:0] inj_in2_1755304956885_264;
  output inj_o_out_1755304956891_544;
  wire inj_o_out_1755304956891_544;
  output [15:0] inj_out1_1755304956885_225;
  wire [15:0] inj_out1_1755304956885_225;
  output [7:0] inj_out1_1755304956889_463;
  wire [7:0] inj_out1_1755304956889_463;
  output inj_out1_1755304956904_206;
  wire inj_out1_1755304956904_206;
  output [15:0] inj_out2_1755304956885_81;
  wire [15:0] inj_out2_1755304956885_81;
  output [7:0] inj_out2_1755304956889_223;
  wire [7:0] inj_out2_1755304956889_223;
  input inj_sel_1755304956885_332;
  wire inj_sel_1755304956885_332;
  output [7:0] inj_x_aa_1755304956884_497;
  wire [7:0] inj_x_aa_1755304956884_497;
  output [7:0] inj_y_aa_1755304956884_267;
  wire [7:0] inj_y_aa_1755304956884_267;
  output [7:0] inj_z_aa_1755304956884_816;
  wire [7:0] inj_z_aa_1755304956884_816;
  wire internal_sig_a_ts1755304956909;
  wire internal_sig_b_ts1755304956909;
  wire internal_sig_ts1755304956891;
  input rst;
  wire rst;
  wire [15:0] temp1_ts1755304956885;
  wire [15:0] temp2_ts1755304956885;
  wire unused_line_var_ts1755304956909;
  assign _00_ = 1'h0 + _10_[0];
  assign _01_ = _00_ + _11_[0];
  assign _02_ = _01_ + _12_[0];
  assign _03_ = _02_ + _13_[0];
  assign _04_ = _03_ + _14_[0];
  assign _05_ = _04_ + _15_[0];
  assign _06_ = _05_ + _32_[0];
  assign _07_ = inj_in1_1755304956885_384 + inj_in2_1755304956885_264;
  assign _08_ = _34_ + inj_in1_1755304956885_384;
  assign inj_x_aa_1755304956884_497 = in_d + inj_b_aa_1755304956884_948;
  assign cnt = _06_ + _33_[0];
  assign _09_ = _35_ & inj_in2_1755304956885_264;
  assign internal_sig_a_ts1755304956909 = inj_i_in_1755304956891_678 & inj_sel_1755304956885_332;
  assign _16_ = in_d[7] === 1'h1;
  assign _17_ = in_d[7] === 1'hx;
  assign _18_ = in_d[6] === 1'h1;
  assign _19_ = in_d[6] === 1'hx;
  assign _20_ = in_d[5] === 1'h1;
  assign _21_ = in_d[5] === 1'hx;
  assign _22_ = in_d[4] === 1'h1;
  assign _23_ = in_d[4] === 1'hx;
  assign _24_ = in_d[3] === 1'h1;
  assign _25_ = in_d[3] === 1'hx;
  assign _26_ = in_d[2] === 1'h1;
  assign _27_ = in_d[2] === 1'hx;
  assign _28_ = in_d[1] === 1'h1;
  assign _29_ = in_d[1] === 1'hx;
  assign _30_ = in_d[0] === 1'h1;
  assign _31_ = in_d[0] === 1'hx;
  assign _10_[0] = _16_ || _17_;
  assign _11_[0] = _18_ || _19_;
  assign _12_[0] = _20_ || _21_;
  assign _13_[0] = _22_ || _23_;
  assign _14_[0] = _24_ || _25_;
  assign _15_[0] = _26_ || _27_;
  assign _32_[0] = _28_ || _29_;
  assign _33_[0] = _30_ || _31_;
  assign temp1_ts1755304956885 = _07_ * 4'ha;
  assign inj_z_aa_1755304956884_816 = in_d * inj_c_aa_1755304956884_870;
  assign inj_out1_1755304956904_206 = ~ internal_sig_a_ts1755304956909;
  assign _34_ = temp1_ts1755304956885 | { inj_in2_1755304956885_264[12:0], 3'h0 };
  assign temp2_ts1755304956885 = inj_sel_1755304956885_332 ? _35_ : _34_;
  assign inj_out1_1755304956885_225 = inj_sel_1755304956885_332 ? _09_ : _08_;
  assign inj_out2_1755304956885_81 = temp1_ts1755304956885 - temp2_ts1755304956885;
  assign inj_y_aa_1755304956884_267 = inj_x_aa_1755304956884_497 - inj_c_aa_1755304956884_870;
  assign _35_ = temp1_ts1755304956885 ^ inj_in1_1755304956885_384[15:2];
  dup_expr dup_expr_inst_1755304956889_2603 (
    .in1(in_d),
    .in2(inj_b_aa_1755304956884_948),
    .out1(inj_out1_1755304956889_463),
    .out2(inj_out2_1755304956889_223)
  );
  simple_adder sa_inst (
    .a(inj_i_in_1755304956891_678),
    .b(inj_sel_1755304956885_332),
    .sum(inj_o_out_1755304956891_544)
  );
  assign _10_[31:1] = 31'h00000000;
  assign _11_[31:1] = 31'h00000000;
  assign _12_[31:1] = 31'h00000000;
  assign _13_[31:1] = 31'h00000000;
  assign _14_[31:1] = 31'h00000000;
  assign _15_[31:1] = 31'h00000000;
  assign _32_[31:1] = 31'h00000000;
  assign _33_[31:1] = 31'h00000000;
  assign internal_sig_b_ts1755304956909 = inj_out1_1755304956904_206;
  assign internal_sig_ts1755304956891 = internal_sig_a_ts1755304956909;
  assign unused_line_var_ts1755304956909 = 1'h1;
endmodule

module dup_expr(in1, in2, out1, out2);
  wire [7:0] _00_;
  wire _01_;
  wire _02_;
  wire [7:0] _03_;
  wire [7:0] _04_;
  wire [7:0] complex_expr;
  input [7:0] in1;
  wire [7:0] in1;
  input [7:0] in2;
  wire [7:0] in2;
  wire [7:0] inter1;
  wire [7:0] inter2;
  output [7:0] out1;
  wire [7:0] out1;
  output [7:0] out2;
  wire [7:0] out2;
  wire [7:0] temp_add;
  wire [7:0] temp_mult;
  assign temp_add = in1 + in2;
  assign temp_mult = inter1 + inter2;
  assign complex_expr = _03_ + temp_add;
  assign out1 = _00_ + complex_expr;
  assign _01_ = in2 >= in1;
  assign _02_ = in1 > in2;
  assign inter1 = in1 * 2'h2;
  assign inter2 = in2 * 2'h2;
  assign _03_ = temp_add * _04_;
  assign out2 = _01_ ? temp_add : temp_mult;
  assign _00_ = _02_ ? temp_mult : temp_add;
  assign _04_ = in1 - in2;
endmodule

module simple_adder(a, b, sum);
  input a;
  wire a;
  input b;
  wire b;
  output sum;
  wire sum;
  assign sum = a + b;
endmodule
