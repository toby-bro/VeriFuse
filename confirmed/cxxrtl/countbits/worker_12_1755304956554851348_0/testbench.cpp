// Generated C++ testbench for CXXRTL
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
#include "countbits_ops.cc" // CXXRTL generated header for the module

#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdint>
#include <string>
#include <sstream>
#include <type_traits>

// Template helpers to detect and work with both value<> and wire<> types
template<typename T>
struct has_curr {
    template<typename U>
    static auto test(int) -> decltype(std::declval<U>().curr, std::true_type{});
    template<typename>
    static std::false_type test(...);
    using type = decltype(test<T>(0));
    static constexpr bool value = type::value;
};

// Helper function to get port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.curr.template get<T>();
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.template get<T>();
}

// Helper function to get port bit - works with both value<> and wire<>
template<typename PortType>
typename std::enable_if<has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.curr.bit(bit);
}

template<typename PortType>
typename std::enable_if<!has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.bit(bit);
}

// Helper function to get wide port value - works with both value<> and wire<>
template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<has_curr<PortType>::value, decltype(port.curr)>::type {
    return port.curr;
}

template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<!has_curr<PortType>::value, PortType>::type {
    return port;
}

// Helper function to set port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.next.template set<T>(value);
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.template set<T>(value);
}

// Helper function to set wide port value - works with both value<> and wire<>
template<typename PortType, typename ValueType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port.next = value;
}

template<typename PortType, typename ValueType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port = value;
}

int main(int argc, char** argv) {
    cxxrtl_design::p_countbits__ops countbits_ops_i; // DUT instance

    // Declare input variables
    bool clk;
    uint8_t in_d;
    uint8_t inj_b_aa_1755304956884_948;
    uint8_t inj_c_aa_1755304956884_870;
    bool inj_i_in_1755304956891_678;
    uint16_t inj_in1_1755304956885_384;
    uint16_t inj_in2_1755304956885_264;
    bool inj_sel_1755304956885_332;
    bool rst;


    // Read input values
    std::ifstream clk_file("input_clk.hex");
    if (!clk_file.is_open()) {
        std::cerr << "Failed to open input file for clk: input_clk.hex" << std::endl;
        return 1;
    }
    std::string clk_hex_str;
    clk_file >> clk_hex_str;
    if (clk_file.fail() && !clk_file.eof()) {
        std::cerr << "Failed to read hex string for clk from input file: input_clk.hex" << std::endl;
        clk_file.close();
        return 1;
    }
    std::stringstream ss_clk;
    ss_clk << std::hex << clk_hex_str;
    unsigned int temp_clk;
    if (!(ss_clk >> temp_clk)) {
        std::cerr << "Failed to parse hex value for clk: " << clk_hex_str << std::endl;
        clk_file.close();
        return 1;
    }
    clk = static_cast<bool>(temp_clk);
    clk_file.close();

    std::ifstream in_d_file("input_in_d.hex");
    if (!in_d_file.is_open()) {
        std::cerr << "Failed to open input file for in_d: input_in_d.hex" << std::endl;
        return 1;
    }
    std::string in_d_hex_str;
    in_d_file >> in_d_hex_str;
    if (in_d_file.fail() && !in_d_file.eof()) {
        std::cerr << "Failed to read hex string for in_d from input file: input_in_d.hex" << std::endl;
        in_d_file.close();
        return 1;
    }
    std::stringstream ss_in_d;
    ss_in_d << std::hex << in_d_hex_str;
    unsigned int temp_in_d;
    if (!(ss_in_d >> temp_in_d)) {
        std::cerr << "Failed to parse hex value for in_d: " << in_d_hex_str << std::endl;
        in_d_file.close();
        return 1;
    }
    in_d = static_cast<uint8_t>(temp_in_d);
    in_d_file.close();

    std::ifstream inj_b_aa_1755304956884_948_file("input_inj_b_aa_1755304956884_948.hex");
    if (!inj_b_aa_1755304956884_948_file.is_open()) {
        std::cerr << "Failed to open input file for inj_b_aa_1755304956884_948: input_inj_b_aa_1755304956884_948.hex" << std::endl;
        return 1;
    }
    std::string inj_b_aa_1755304956884_948_hex_str;
    inj_b_aa_1755304956884_948_file >> inj_b_aa_1755304956884_948_hex_str;
    if (inj_b_aa_1755304956884_948_file.fail() && !inj_b_aa_1755304956884_948_file.eof()) {
        std::cerr << "Failed to read hex string for inj_b_aa_1755304956884_948 from input file: input_inj_b_aa_1755304956884_948.hex" << std::endl;
        inj_b_aa_1755304956884_948_file.close();
        return 1;
    }
    std::stringstream ss_inj_b_aa_1755304956884_948;
    ss_inj_b_aa_1755304956884_948 << std::hex << inj_b_aa_1755304956884_948_hex_str;
    unsigned int temp_inj_b_aa_1755304956884_948;
    if (!(ss_inj_b_aa_1755304956884_948 >> temp_inj_b_aa_1755304956884_948)) {
        std::cerr << "Failed to parse hex value for inj_b_aa_1755304956884_948: " << inj_b_aa_1755304956884_948_hex_str << std::endl;
        inj_b_aa_1755304956884_948_file.close();
        return 1;
    }
    inj_b_aa_1755304956884_948 = static_cast<uint8_t>(temp_inj_b_aa_1755304956884_948);
    inj_b_aa_1755304956884_948_file.close();

    std::ifstream inj_c_aa_1755304956884_870_file("input_inj_c_aa_1755304956884_870.hex");
    if (!inj_c_aa_1755304956884_870_file.is_open()) {
        std::cerr << "Failed to open input file for inj_c_aa_1755304956884_870: input_inj_c_aa_1755304956884_870.hex" << std::endl;
        return 1;
    }
    std::string inj_c_aa_1755304956884_870_hex_str;
    inj_c_aa_1755304956884_870_file >> inj_c_aa_1755304956884_870_hex_str;
    if (inj_c_aa_1755304956884_870_file.fail() && !inj_c_aa_1755304956884_870_file.eof()) {
        std::cerr << "Failed to read hex string for inj_c_aa_1755304956884_870 from input file: input_inj_c_aa_1755304956884_870.hex" << std::endl;
        inj_c_aa_1755304956884_870_file.close();
        return 1;
    }
    std::stringstream ss_inj_c_aa_1755304956884_870;
    ss_inj_c_aa_1755304956884_870 << std::hex << inj_c_aa_1755304956884_870_hex_str;
    unsigned int temp_inj_c_aa_1755304956884_870;
    if (!(ss_inj_c_aa_1755304956884_870 >> temp_inj_c_aa_1755304956884_870)) {
        std::cerr << "Failed to parse hex value for inj_c_aa_1755304956884_870: " << inj_c_aa_1755304956884_870_hex_str << std::endl;
        inj_c_aa_1755304956884_870_file.close();
        return 1;
    }
    inj_c_aa_1755304956884_870 = static_cast<uint8_t>(temp_inj_c_aa_1755304956884_870);
    inj_c_aa_1755304956884_870_file.close();

    std::ifstream inj_i_in_1755304956891_678_file("input_inj_i_in_1755304956891_678.hex");
    if (!inj_i_in_1755304956891_678_file.is_open()) {
        std::cerr << "Failed to open input file for inj_i_in_1755304956891_678: input_inj_i_in_1755304956891_678.hex" << std::endl;
        return 1;
    }
    std::string inj_i_in_1755304956891_678_hex_str;
    inj_i_in_1755304956891_678_file >> inj_i_in_1755304956891_678_hex_str;
    if (inj_i_in_1755304956891_678_file.fail() && !inj_i_in_1755304956891_678_file.eof()) {
        std::cerr << "Failed to read hex string for inj_i_in_1755304956891_678 from input file: input_inj_i_in_1755304956891_678.hex" << std::endl;
        inj_i_in_1755304956891_678_file.close();
        return 1;
    }
    std::stringstream ss_inj_i_in_1755304956891_678;
    ss_inj_i_in_1755304956891_678 << std::hex << inj_i_in_1755304956891_678_hex_str;
    unsigned int temp_inj_i_in_1755304956891_678;
    if (!(ss_inj_i_in_1755304956891_678 >> temp_inj_i_in_1755304956891_678)) {
        std::cerr << "Failed to parse hex value for inj_i_in_1755304956891_678: " << inj_i_in_1755304956891_678_hex_str << std::endl;
        inj_i_in_1755304956891_678_file.close();
        return 1;
    }
    inj_i_in_1755304956891_678 = static_cast<bool>(temp_inj_i_in_1755304956891_678);
    inj_i_in_1755304956891_678_file.close();

    std::ifstream inj_in1_1755304956885_384_file("input_inj_in1_1755304956885_384.hex");
    if (!inj_in1_1755304956885_384_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in1_1755304956885_384: input_inj_in1_1755304956885_384.hex" << std::endl;
        return 1;
    }
    std::string inj_in1_1755304956885_384_hex_str;
    inj_in1_1755304956885_384_file >> inj_in1_1755304956885_384_hex_str;
    if (inj_in1_1755304956885_384_file.fail() && !inj_in1_1755304956885_384_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in1_1755304956885_384 from input file: input_inj_in1_1755304956885_384.hex" << std::endl;
        inj_in1_1755304956885_384_file.close();
        return 1;
    }
    std::stringstream ss_inj_in1_1755304956885_384;
    ss_inj_in1_1755304956885_384 << std::hex << inj_in1_1755304956885_384_hex_str;
    if (!(ss_inj_in1_1755304956885_384 >> inj_in1_1755304956885_384)) {
        std::cerr << "Failed to parse hex value for inj_in1_1755304956885_384: " << inj_in1_1755304956885_384_hex_str << std::endl;
        inj_in1_1755304956885_384_file.close();
        return 1;
    }
    inj_in1_1755304956885_384_file.close();

    std::ifstream inj_in2_1755304956885_264_file("input_inj_in2_1755304956885_264.hex");
    if (!inj_in2_1755304956885_264_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in2_1755304956885_264: input_inj_in2_1755304956885_264.hex" << std::endl;
        return 1;
    }
    std::string inj_in2_1755304956885_264_hex_str;
    inj_in2_1755304956885_264_file >> inj_in2_1755304956885_264_hex_str;
    if (inj_in2_1755304956885_264_file.fail() && !inj_in2_1755304956885_264_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in2_1755304956885_264 from input file: input_inj_in2_1755304956885_264.hex" << std::endl;
        inj_in2_1755304956885_264_file.close();
        return 1;
    }
    std::stringstream ss_inj_in2_1755304956885_264;
    ss_inj_in2_1755304956885_264 << std::hex << inj_in2_1755304956885_264_hex_str;
    if (!(ss_inj_in2_1755304956885_264 >> inj_in2_1755304956885_264)) {
        std::cerr << "Failed to parse hex value for inj_in2_1755304956885_264: " << inj_in2_1755304956885_264_hex_str << std::endl;
        inj_in2_1755304956885_264_file.close();
        return 1;
    }
    inj_in2_1755304956885_264_file.close();

    std::ifstream inj_sel_1755304956885_332_file("input_inj_sel_1755304956885_332.hex");
    if (!inj_sel_1755304956885_332_file.is_open()) {
        std::cerr << "Failed to open input file for inj_sel_1755304956885_332: input_inj_sel_1755304956885_332.hex" << std::endl;
        return 1;
    }
    std::string inj_sel_1755304956885_332_hex_str;
    inj_sel_1755304956885_332_file >> inj_sel_1755304956885_332_hex_str;
    if (inj_sel_1755304956885_332_file.fail() && !inj_sel_1755304956885_332_file.eof()) {
        std::cerr << "Failed to read hex string for inj_sel_1755304956885_332 from input file: input_inj_sel_1755304956885_332.hex" << std::endl;
        inj_sel_1755304956885_332_file.close();
        return 1;
    }
    std::stringstream ss_inj_sel_1755304956885_332;
    ss_inj_sel_1755304956885_332 << std::hex << inj_sel_1755304956885_332_hex_str;
    unsigned int temp_inj_sel_1755304956885_332;
    if (!(ss_inj_sel_1755304956885_332 >> temp_inj_sel_1755304956885_332)) {
        std::cerr << "Failed to parse hex value for inj_sel_1755304956885_332: " << inj_sel_1755304956885_332_hex_str << std::endl;
        inj_sel_1755304956885_332_file.close();
        return 1;
    }
    inj_sel_1755304956885_332 = static_cast<bool>(temp_inj_sel_1755304956885_332);
    inj_sel_1755304956885_332_file.close();

    std::ifstream rst_file("input_rst.hex");
    if (!rst_file.is_open()) {
        std::cerr << "Failed to open input file for rst: input_rst.hex" << std::endl;
        return 1;
    }
    std::string rst_hex_str;
    rst_file >> rst_hex_str;
    if (rst_file.fail() && !rst_file.eof()) {
        std::cerr << "Failed to read hex string for rst from input file: input_rst.hex" << std::endl;
        rst_file.close();
        return 1;
    }
    std::stringstream ss_rst;
    ss_rst << std::hex << rst_hex_str;
    unsigned int temp_rst;
    if (!(ss_rst >> temp_rst)) {
        std::cerr << "Failed to parse hex value for rst: " << rst_hex_str << std::endl;
        rst_file.close();
        return 1;
    }
    rst = static_cast<bool>(temp_rst);
    rst_file.close();



    // Apply inputs to DUT
    _set_port_value<bool>(countbits_ops_i.p_clk, clk);
    _set_port_value<uint8_t>(countbits_ops_i.p_in__d, in_d);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__b__aa__1755304956884__948, inj_b_aa_1755304956884_948);
    _set_port_value<uint8_t>(countbits_ops_i.p_inj__c__aa__1755304956884__870, inj_c_aa_1755304956884_870);
    _set_port_value<bool>(countbits_ops_i.p_inj__i__in__1755304956891__678, inj_i_in_1755304956891_678);
    _set_port_value<uint16_t>(countbits_ops_i.p_inj__in1__1755304956885__384, inj_in1_1755304956885_384);
    _set_port_value<uint16_t>(countbits_ops_i.p_inj__in2__1755304956885__264, inj_in2_1755304956885_264);
    _set_port_value<bool>(countbits_ops_i.p_inj__sel__1755304956885__332, inj_sel_1755304956885_332);
    _set_port_value<bool>(countbits_ops_i.p_rst, rst);
    // Input application


    // Handle reset, clock toggling, and evaluation

    // Toggle reset signal p_rst
    countbits_ops_i.p_rst.set<bool>(true); // Assert reset (active high)
    countbits_ops_i.step(); // Step to propagate reset assertion
    countbits_ops_i.p_rst.set<bool>(false); // De-assert reset
    countbits_ops_i.step(); // Step to propagate reset de-assertion
    countbits_ops_i.step(); // Extra step for settling after reset

    // Clock toggling with bounded cycles to prevent infinite loops
    for (int cycle = 0; cycle < 50; cycle++) {
        _set_port_value<bool>(countbits_ops_i.p_clk, false);
        countbits_ops_i.step(); // clock low
        _set_port_value<bool>(countbits_ops_i.p_clk, true);
        countbits_ops_i.step(); // clock high
    }

    // Bounded evaluation steps to ensure all logic settles (max 20 steps)
    for (int settle_step = 0; settle_step < 20; settle_step++) {
        countbits_ops_i.step();
    }


    // Write outputs from DUT
    std::ofstream cnt_file("output_cnt.hex");
    if (!cnt_file.is_open()) {
        std::cerr << "Failed to open output file for cnt: output_cnt.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        cnt_file << (_get_port_value(countbits_ops_i.p_cnt, i) ? '1' : '0');
    }
    cnt_file << std::endl;
    cnt_file.close();

    std::ofstream inj_o_out_1755304956891_544_file("output_inj_o_out_1755304956891_544.hex");
    if (!inj_o_out_1755304956891_544_file.is_open()) {
        std::cerr << "Failed to open output file for inj_o_out_1755304956891_544: output_inj_o_out_1755304956891_544.hex" << std::endl;
        return 1;
    }
    inj_o_out_1755304956891_544_file << (_get_port_value(countbits_ops_i.p_inj__o__out__1755304956891__544, 0) ? '1' : '0') << std::endl;
    inj_o_out_1755304956891_544_file.close();

    std::ofstream inj_out1_1755304956885_225_file("output_inj_out1_1755304956885_225.hex");
    if (!inj_out1_1755304956885_225_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out1_1755304956885_225: output_inj_out1_1755304956885_225.hex" << std::endl;
        return 1;
    }
    for (int i = 15; i >= 0; --i) {
        inj_out1_1755304956885_225_file << (_get_port_value(countbits_ops_i.p_inj__out1__1755304956885__225, i) ? '1' : '0');
    }
    inj_out1_1755304956885_225_file << std::endl;
    inj_out1_1755304956885_225_file.close();

    std::ofstream inj_out1_1755304956889_463_file("output_inj_out1_1755304956889_463.hex");
    if (!inj_out1_1755304956889_463_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out1_1755304956889_463: output_inj_out1_1755304956889_463.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out1_1755304956889_463_file << (_get_port_value(countbits_ops_i.p_inj__out1__1755304956889__463, i) ? '1' : '0');
    }
    inj_out1_1755304956889_463_file << std::endl;
    inj_out1_1755304956889_463_file.close();

    std::ofstream inj_out1_1755304956904_206_file("output_inj_out1_1755304956904_206.hex");
    if (!inj_out1_1755304956904_206_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out1_1755304956904_206: output_inj_out1_1755304956904_206.hex" << std::endl;
        return 1;
    }
    inj_out1_1755304956904_206_file << (_get_port_value(countbits_ops_i.p_inj__out1__1755304956904__206, 0) ? '1' : '0') << std::endl;
    inj_out1_1755304956904_206_file.close();

    std::ofstream inj_out2_1755304956885_81_file("output_inj_out2_1755304956885_81.hex");
    if (!inj_out2_1755304956885_81_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out2_1755304956885_81: output_inj_out2_1755304956885_81.hex" << std::endl;
        return 1;
    }
    for (int i = 15; i >= 0; --i) {
        inj_out2_1755304956885_81_file << (_get_port_value(countbits_ops_i.p_inj__out2__1755304956885__81, i) ? '1' : '0');
    }
    inj_out2_1755304956885_81_file << std::endl;
    inj_out2_1755304956885_81_file.close();

    std::ofstream inj_out2_1755304956889_223_file("output_inj_out2_1755304956889_223.hex");
    if (!inj_out2_1755304956889_223_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out2_1755304956889_223: output_inj_out2_1755304956889_223.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out2_1755304956889_223_file << (_get_port_value(countbits_ops_i.p_inj__out2__1755304956889__223, i) ? '1' : '0');
    }
    inj_out2_1755304956889_223_file << std::endl;
    inj_out2_1755304956889_223_file.close();

    std::ofstream inj_x_aa_1755304956884_497_file("output_inj_x_aa_1755304956884_497.hex");
    if (!inj_x_aa_1755304956884_497_file.is_open()) {
        std::cerr << "Failed to open output file for inj_x_aa_1755304956884_497: output_inj_x_aa_1755304956884_497.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_x_aa_1755304956884_497_file << (_get_port_value(countbits_ops_i.p_inj__x__aa__1755304956884__497, i) ? '1' : '0');
    }
    inj_x_aa_1755304956884_497_file << std::endl;
    inj_x_aa_1755304956884_497_file.close();

    std::ofstream inj_y_aa_1755304956884_267_file("output_inj_y_aa_1755304956884_267.hex");
    if (!inj_y_aa_1755304956884_267_file.is_open()) {
        std::cerr << "Failed to open output file for inj_y_aa_1755304956884_267: output_inj_y_aa_1755304956884_267.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_y_aa_1755304956884_267_file << (_get_port_value(countbits_ops_i.p_inj__y__aa__1755304956884__267, i) ? '1' : '0');
    }
    inj_y_aa_1755304956884_267_file << std::endl;
    inj_y_aa_1755304956884_267_file.close();

    std::ofstream inj_z_aa_1755304956884_816_file("output_inj_z_aa_1755304956884_816.hex");
    if (!inj_z_aa_1755304956884_816_file.is_open()) {
        std::cerr << "Failed to open output file for inj_z_aa_1755304956884_816: output_inj_z_aa_1755304956884_816.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_z_aa_1755304956884_816_file << (_get_port_value(countbits_ops_i.p_inj__z__aa__1755304956884__816, i) ? '1' : '0');
    }
    inj_z_aa_1755304956884_816_file << std::endl;
    inj_z_aa_1755304956884_816_file.close();



    return 0;
}
