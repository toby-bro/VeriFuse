read_verilog -sv <<EOT
module top (
	input logic clk,
	output logic [6:0] reg_bug,
	output logic is_expected,
	output logic is_zero
);
	// Register that should be set on negedge
	always_ff @(negedge clk)
		reg_bug <= 7'b0011111;
	
	// Check if the value is the expected one
	assign is_expected = (reg_bug == 7'b0011111);
	
	// Check if the value is incorrectly zero
	assign is_zero = (reg_bug == 7'b0000000);
	
	// After a negedge, reg_bug should be the expected value, not zero
	// This assertion should hold if the synthesis is correct
	always_comb assert(clk || is_expected);
	
	// This assertion fails if reg_bug stays zero when it shouldn't
	always_comb assert(clk || !is_zero);
endmodule
EOT

prep
chformal -lower
sat -prove-asserts -verify
