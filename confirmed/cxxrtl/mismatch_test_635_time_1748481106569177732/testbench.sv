// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
`include "../top_100.sv" // Include the mocked module file

module top;
    logic [95:0] clkin_data;
    logic [191:0] in_data;
    logic [191:0] out_data;
    logic [7:0] inj_param_out_547;

    topi dut (
        .clkin_data(clkin_data),
        .in_data(in_data),
        .out_data(out_data),
        .inj_param_out_547(inj_param_out_547)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 1 input files
        clkin_data = 0;

        fd = $fopen("input_in_data.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_in_data.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", in_data);
        $fclose(fd);


        // Toggle reset if a reset signal was identified


        // Toggle clock signals

        // Toggle clocks for several cycles
        repeat (10) begin
            clkin_data = 0;
            #5;
            clkin_data = 1;
            #5;
        end


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 2 output files

        fd = $fopen("output_out_data.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_out_data.hex' for port 'out_data'.", "output_out_data.hex", "out_data");
            $finish;
        end
        for (int i = 191; i >= 0; i--) begin
            $fwrite(fd, "%b", out_data[i]);
        end
        $fwrite(fd, "\n"); // Add a newline at the end of the bit string
        $fclose(fd);

        fd = $fopen("output_inj_param_out_547.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_inj_param_out_547.hex' for port 'inj_param_out_547'.", "output_inj_param_out_547.hex", "inj_param_out_547");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", inj_param_out_547[i]);
        end
        $fwrite(fd, "\n"); // Add a newline at the end of the bit string
        $fclose(fd);


        $finish;
    end
endmodule