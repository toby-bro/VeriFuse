/* Generated by Yosys 0.53+60 (git sha1 3790be114, g++ 12.2.0-14+deb12u1 -fPIC -O3) */

(* keep =  1  *)
(* top =  1  *)
(* src = "../top_100.sv:4.1-76.10" *)
module topi(clkin_data, in_data, out_data, inj_param_out_547);
  (* src = "../top_100.sv:29.5-33.60" *)
  wire [6:0] _12_;
  (* src = "../top_100.sv:55.18-55.79" *)
  wire [135:0] _13_;
  (* src = "../top_100.sv:71.13-71.72" *)
  wire _14_;
  (* src = "../top_100.sv:73.13-73.67" *)
  wire _15_;
  (* src = "../top_100.sv:55.19-55.37" *)
  wire _16_;
  (* src = "../top_100.sv:70.13-70.45" *)
  wire _17_;
  (* src = "../top_100.sv:72.22-72.54" *)
  wire _18_;
  wire _19_;
  (* src = "../top_100.sv:11.15-11.19" *)
  reg [6:0] _11_;
  (* src = "../top_100.sv:17.18-17.28" *)
  input [95:0] clkin_data;
  wire [95:0] clkin_data;
  (* src = "../top_100.sv:18.19-18.26" *)
  input [191:0] in_data;
  wire [191:0] in_data;
  (* src = "../top_100.sv:20.23-20.40" *)
  output [7:0] inj_param_out_547;
  wire [7:0] inj_param_out_547;
  (* src = "../top_100.sv:19.20-19.28" *)
  output [191:0] out_data;
  wire [191:0] out_data;
  (* src = "../top_100.sv:14.9-14.21" *)
  wire simple_clock;
  always @*
    if (1'h1)
      $write("Time %0t: _11_ = %07b (%s)\n", $time, $unsigned(_11_), $unsigned({ 1'h0, _13_[134:0] }));
  always @*
    if (1'h1)
      $write("Time %0t: simple_clock = %01b %s\n", $time, $unsigned(1'h0), $unsigned(248'h286e656765646765202d2073686f756c642074726967676572205f31315f29));
  always @*
    if (1'h1)
      $write("Time %0t: reset = %01b\n", $time, $unsigned(clkin_data[32]));
  always @*
    if (1'h1)
      $write("Time %0t: inj_param_out_547 = %08b\n", $time, $unsigned({ 1'h0, _11_ }));
  always @*
    if (_14_)
      $write(">>> CXXRTL BUG: Register stuck at reset value!\n");
  always @*
    if (_15_)
      $write(">>> CORRECT: Register updated on negedge!\n");
  assign _16_ = ! (* src = "../top_100.sv:55.19-55.37" *) _11_;
  assign _17_ = ! (* src = "../top_100.sv:70.13-70.45" *) { 1'h0, _11_ };
  assign _18_ = _11_ == (* src = "../top_100.sv:72.22-72.54" *) 5'h1f;
  (* \always_ff  = 32'd1 *)
  (* src = "../top_100.sv:29.5-33.60" *)
  always_ff @(negedge 1'h0, posedge clkin_data[32])
    if (clkin_data[32]) _11_ <= 7'h00;
    else _11_ <= { in_data[48:43], _12_[0] };
  assign _19_ = _18_ ? (* src = "../top_100.sv:72.22-72.54|../top_100.sv:72.18-74.12" *) 1'h1 : 1'h0;
  assign _15_ = _17_ ? (* full_case = 32'd1 *) (* src = "../top_100.sv:70.13-70.45|../top_100.sv:70.9-74.12" *) 1'h0 : _19_;
  assign _14_ = _17_ ? (* full_case = 32'd1 *) (* src = "../top_100.sv:70.13-70.45|../top_100.sv:70.9-74.12" *) 1'h1 : 1'h0;
  assign _12_[0] = | (* src = "../top_100.sv:33.40-33.56" *) in_data[84:76];
  assign _13_[134:0] = _16_ ? (* src = "../top_100.sv:55.18-55.79" *) 135'h000000535455434b204154205245534554 : 135'h5550444154454420434f52524543544c59;
  initial begin
    if (1'h1) begin
      $write("=== ULTRA-MINIMAL CXXRTL NEGEDGE BUG TEST ===\n");
    end
    if (1'h1) begin
      $write("Reset (clkin_data[32]): %01b\n", $unsigned(clkin_data[32]));
    end
    if (1'h1) begin
      $write("Expected data: in_data[48:43]=%06b, |in_data[84:76]=%01b\n", $unsigned(in_data[48:43]), $unsigned(_12_[0]));
    end
    if (1'h1) begin
      $write("Expected _11_ update: {%06b, %01b} = %07b\n", $unsigned(in_data[48:43]), $unsigned(_12_[0]), $unsigned({ in_data[48:43], _12_[0] }));
    end
    if (1'h1) begin
      $write("Testing: always_ff @(negedge simple_clock, posedge reset)\n");
    end
  end
  assign _12_[6:1] = in_data[48:43];
  assign _13_[135] = 1'h0;
  assign inj_param_out_547 = { 1'h0, _11_ };
  assign out_data = 192'h000000000000000000000000000000000000000000000000;
  assign simple_clock = 1'h0;
endmodule
