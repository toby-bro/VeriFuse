// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go

module top;
    logic data1;
    logic data2;
    logic out_wired;

    WiredNet dut (
        .data1(data1),
        .data2(data2),
        .out_wired(out_wired)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 2 input files

        fd = $fopen("input_data1.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_data1.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", data1);
        $fclose(fd);

        fd = $fopen("input_data2.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_data2.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", data2);
        $fclose(fd);


        // Toggle reset if a reset signal was identified


        // Toggle clock signals

        // Allow module to process
        #20;


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 1 output files

        fd = $fopen("output_out_wired.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_out_wired.hex' for port 'out_wired'.", "output_out_wired.hex", "out_wired");
            $finish;
        end
        $fwrite(fd, "%b\n", out_wired);
        $fclose(fd);


        $finish;
    end
endmodule