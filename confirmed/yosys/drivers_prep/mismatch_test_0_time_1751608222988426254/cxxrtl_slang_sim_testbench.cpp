// Generated C++ testbench for CXXRTL
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
#include "simple_sub.cc" // CXXRTL generated header for the module

#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdint>
#include <string>
#include <sstream>
#include <type_traits>

// Template helpers to detect and work with both value<> and wire<> types
template<typename T>
struct has_curr {
    template<typename U>
    static auto test(int) -> decltype(std::declval<U>().curr, std::true_type{});
    template<typename>
    static std::false_type test(...);
    using type = decltype(test<T>(0));
    static constexpr bool value = type::value;
};

// Helper function to get port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.curr.template get<T>();
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.template get<T>();
}

// Helper function to get port bit - works with both value<> and wire<>
template<typename PortType>
typename std::enable_if<has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.curr.bit(bit);
}

template<typename PortType>
typename std::enable_if<!has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.bit(bit);
}

// Helper function to get wide port value - works with both value<> and wire<>
template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<has_curr<PortType>::value, decltype(port.curr)>::type {
    return port.curr;
}

template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<!has_curr<PortType>::value, PortType>::type {
    return port;
}

// Helper function to set port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.next.template set<T>(value);
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.template set<T>(value);
}

// Helper function to set wide port value - works with both value<> and wire<>
template<typename PortType, typename ValueType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port.next = value;
}

template<typename PortType, typename ValueType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port = value;
}

int main(int argc, char** argv) {
    cxxrtl_design::p_simple__sub simple_sub_i; // DUT instance

    // Declare input variables
    uint8_t a;
    uint8_t b;
    bool inj_condition_h_1751608204132_423;
    uint8_t inj_data0_1751608204137_416;
    uint8_t inj_data1_1751608204137_850;
    uint8_t inj_data2_1751608204137_376;
    uint8_t inj_data3_1751608204137_768;
    uint16_t inj_data_in_pa_1751608204130_326;
    bool inj_enable_pv_1751608204130_819;
    bool inj_in_cond_ternary_1751608204132_347;
    uint8_t inj_in_val1_1751608204132_518;
    uint8_t inj_in_val2_1751608204132_694;
    uint8_t inj_large_data_in_1751608204135_837;
    uint8_t inj_data_io_1751608204147_331;


    // Read input values
    std::ifstream a_file("input_a.hex");
    if (!a_file.is_open()) {
        std::cerr << "Failed to open input file for a: input_a.hex" << std::endl;
        return 1;
    }
    std::string a_hex_str;
    a_file >> a_hex_str;
    if (a_file.fail() && !a_file.eof()) {
        std::cerr << "Failed to read hex string for a from input file: input_a.hex" << std::endl;
        a_file.close();
        return 1;
    }
    std::stringstream ss_a;
    ss_a << std::hex << a_hex_str;
    unsigned int temp_a;
    if (!(ss_a >> temp_a)) {
        std::cerr << "Failed to parse hex value for a: " << a_hex_str << std::endl;
        a_file.close();
        return 1;
    }
    a = static_cast<uint8_t>(temp_a);
    a_file.close();

    std::ifstream b_file("input_b.hex");
    if (!b_file.is_open()) {
        std::cerr << "Failed to open input file for b: input_b.hex" << std::endl;
        return 1;
    }
    std::string b_hex_str;
    b_file >> b_hex_str;
    if (b_file.fail() && !b_file.eof()) {
        std::cerr << "Failed to read hex string for b from input file: input_b.hex" << std::endl;
        b_file.close();
        return 1;
    }
    std::stringstream ss_b;
    ss_b << std::hex << b_hex_str;
    unsigned int temp_b;
    if (!(ss_b >> temp_b)) {
        std::cerr << "Failed to parse hex value for b: " << b_hex_str << std::endl;
        b_file.close();
        return 1;
    }
    b = static_cast<uint8_t>(temp_b);
    b_file.close();

    std::ifstream inj_condition_h_1751608204132_423_file("input_inj_condition_h_1751608204132_423.hex");
    if (!inj_condition_h_1751608204132_423_file.is_open()) {
        std::cerr << "Failed to open input file for inj_condition_h_1751608204132_423: input_inj_condition_h_1751608204132_423.hex" << std::endl;
        return 1;
    }
    std::string inj_condition_h_1751608204132_423_hex_str;
    inj_condition_h_1751608204132_423_file >> inj_condition_h_1751608204132_423_hex_str;
    if (inj_condition_h_1751608204132_423_file.fail() && !inj_condition_h_1751608204132_423_file.eof()) {
        std::cerr << "Failed to read hex string for inj_condition_h_1751608204132_423 from input file: input_inj_condition_h_1751608204132_423.hex" << std::endl;
        inj_condition_h_1751608204132_423_file.close();
        return 1;
    }
    std::stringstream ss_inj_condition_h_1751608204132_423;
    ss_inj_condition_h_1751608204132_423 << std::hex << inj_condition_h_1751608204132_423_hex_str;
    unsigned int temp_inj_condition_h_1751608204132_423;
    if (!(ss_inj_condition_h_1751608204132_423 >> temp_inj_condition_h_1751608204132_423)) {
        std::cerr << "Failed to parse hex value for inj_condition_h_1751608204132_423: " << inj_condition_h_1751608204132_423_hex_str << std::endl;
        inj_condition_h_1751608204132_423_file.close();
        return 1;
    }
    inj_condition_h_1751608204132_423 = static_cast<bool>(temp_inj_condition_h_1751608204132_423);
    inj_condition_h_1751608204132_423_file.close();

    std::ifstream inj_data0_1751608204137_416_file("input_inj_data0_1751608204137_416.hex");
    if (!inj_data0_1751608204137_416_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data0_1751608204137_416: input_inj_data0_1751608204137_416.hex" << std::endl;
        return 1;
    }
    std::string inj_data0_1751608204137_416_hex_str;
    inj_data0_1751608204137_416_file >> inj_data0_1751608204137_416_hex_str;
    if (inj_data0_1751608204137_416_file.fail() && !inj_data0_1751608204137_416_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data0_1751608204137_416 from input file: input_inj_data0_1751608204137_416.hex" << std::endl;
        inj_data0_1751608204137_416_file.close();
        return 1;
    }
    std::stringstream ss_inj_data0_1751608204137_416;
    ss_inj_data0_1751608204137_416 << std::hex << inj_data0_1751608204137_416_hex_str;
    unsigned int temp_inj_data0_1751608204137_416;
    if (!(ss_inj_data0_1751608204137_416 >> temp_inj_data0_1751608204137_416)) {
        std::cerr << "Failed to parse hex value for inj_data0_1751608204137_416: " << inj_data0_1751608204137_416_hex_str << std::endl;
        inj_data0_1751608204137_416_file.close();
        return 1;
    }
    inj_data0_1751608204137_416 = static_cast<uint8_t>(temp_inj_data0_1751608204137_416);
    inj_data0_1751608204137_416_file.close();

    std::ifstream inj_data1_1751608204137_850_file("input_inj_data1_1751608204137_850.hex");
    if (!inj_data1_1751608204137_850_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data1_1751608204137_850: input_inj_data1_1751608204137_850.hex" << std::endl;
        return 1;
    }
    std::string inj_data1_1751608204137_850_hex_str;
    inj_data1_1751608204137_850_file >> inj_data1_1751608204137_850_hex_str;
    if (inj_data1_1751608204137_850_file.fail() && !inj_data1_1751608204137_850_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data1_1751608204137_850 from input file: input_inj_data1_1751608204137_850.hex" << std::endl;
        inj_data1_1751608204137_850_file.close();
        return 1;
    }
    std::stringstream ss_inj_data1_1751608204137_850;
    ss_inj_data1_1751608204137_850 << std::hex << inj_data1_1751608204137_850_hex_str;
    unsigned int temp_inj_data1_1751608204137_850;
    if (!(ss_inj_data1_1751608204137_850 >> temp_inj_data1_1751608204137_850)) {
        std::cerr << "Failed to parse hex value for inj_data1_1751608204137_850: " << inj_data1_1751608204137_850_hex_str << std::endl;
        inj_data1_1751608204137_850_file.close();
        return 1;
    }
    inj_data1_1751608204137_850 = static_cast<uint8_t>(temp_inj_data1_1751608204137_850);
    inj_data1_1751608204137_850_file.close();

    std::ifstream inj_data2_1751608204137_376_file("input_inj_data2_1751608204137_376.hex");
    if (!inj_data2_1751608204137_376_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data2_1751608204137_376: input_inj_data2_1751608204137_376.hex" << std::endl;
        return 1;
    }
    std::string inj_data2_1751608204137_376_hex_str;
    inj_data2_1751608204137_376_file >> inj_data2_1751608204137_376_hex_str;
    if (inj_data2_1751608204137_376_file.fail() && !inj_data2_1751608204137_376_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data2_1751608204137_376 from input file: input_inj_data2_1751608204137_376.hex" << std::endl;
        inj_data2_1751608204137_376_file.close();
        return 1;
    }
    std::stringstream ss_inj_data2_1751608204137_376;
    ss_inj_data2_1751608204137_376 << std::hex << inj_data2_1751608204137_376_hex_str;
    unsigned int temp_inj_data2_1751608204137_376;
    if (!(ss_inj_data2_1751608204137_376 >> temp_inj_data2_1751608204137_376)) {
        std::cerr << "Failed to parse hex value for inj_data2_1751608204137_376: " << inj_data2_1751608204137_376_hex_str << std::endl;
        inj_data2_1751608204137_376_file.close();
        return 1;
    }
    inj_data2_1751608204137_376 = static_cast<uint8_t>(temp_inj_data2_1751608204137_376);
    inj_data2_1751608204137_376_file.close();

    std::ifstream inj_data3_1751608204137_768_file("input_inj_data3_1751608204137_768.hex");
    if (!inj_data3_1751608204137_768_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data3_1751608204137_768: input_inj_data3_1751608204137_768.hex" << std::endl;
        return 1;
    }
    std::string inj_data3_1751608204137_768_hex_str;
    inj_data3_1751608204137_768_file >> inj_data3_1751608204137_768_hex_str;
    if (inj_data3_1751608204137_768_file.fail() && !inj_data3_1751608204137_768_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data3_1751608204137_768 from input file: input_inj_data3_1751608204137_768.hex" << std::endl;
        inj_data3_1751608204137_768_file.close();
        return 1;
    }
    std::stringstream ss_inj_data3_1751608204137_768;
    ss_inj_data3_1751608204137_768 << std::hex << inj_data3_1751608204137_768_hex_str;
    unsigned int temp_inj_data3_1751608204137_768;
    if (!(ss_inj_data3_1751608204137_768 >> temp_inj_data3_1751608204137_768)) {
        std::cerr << "Failed to parse hex value for inj_data3_1751608204137_768: " << inj_data3_1751608204137_768_hex_str << std::endl;
        inj_data3_1751608204137_768_file.close();
        return 1;
    }
    inj_data3_1751608204137_768 = static_cast<uint8_t>(temp_inj_data3_1751608204137_768);
    inj_data3_1751608204137_768_file.close();

    std::ifstream inj_data_in_pa_1751608204130_326_file("input_inj_data_in_pa_1751608204130_326.hex");
    if (!inj_data_in_pa_1751608204130_326_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data_in_pa_1751608204130_326: input_inj_data_in_pa_1751608204130_326.hex" << std::endl;
        return 1;
    }
    std::string inj_data_in_pa_1751608204130_326_hex_str;
    inj_data_in_pa_1751608204130_326_file >> inj_data_in_pa_1751608204130_326_hex_str;
    if (inj_data_in_pa_1751608204130_326_file.fail() && !inj_data_in_pa_1751608204130_326_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data_in_pa_1751608204130_326 from input file: input_inj_data_in_pa_1751608204130_326.hex" << std::endl;
        inj_data_in_pa_1751608204130_326_file.close();
        return 1;
    }
    std::stringstream ss_inj_data_in_pa_1751608204130_326;
    ss_inj_data_in_pa_1751608204130_326 << std::hex << inj_data_in_pa_1751608204130_326_hex_str;
    if (!(ss_inj_data_in_pa_1751608204130_326 >> inj_data_in_pa_1751608204130_326)) {
        std::cerr << "Failed to parse hex value for inj_data_in_pa_1751608204130_326: " << inj_data_in_pa_1751608204130_326_hex_str << std::endl;
        inj_data_in_pa_1751608204130_326_file.close();
        return 1;
    }
    inj_data_in_pa_1751608204130_326_file.close();

    std::ifstream inj_enable_pv_1751608204130_819_file("input_inj_enable_pv_1751608204130_819.hex");
    if (!inj_enable_pv_1751608204130_819_file.is_open()) {
        std::cerr << "Failed to open input file for inj_enable_pv_1751608204130_819: input_inj_enable_pv_1751608204130_819.hex" << std::endl;
        return 1;
    }
    std::string inj_enable_pv_1751608204130_819_hex_str;
    inj_enable_pv_1751608204130_819_file >> inj_enable_pv_1751608204130_819_hex_str;
    if (inj_enable_pv_1751608204130_819_file.fail() && !inj_enable_pv_1751608204130_819_file.eof()) {
        std::cerr << "Failed to read hex string for inj_enable_pv_1751608204130_819 from input file: input_inj_enable_pv_1751608204130_819.hex" << std::endl;
        inj_enable_pv_1751608204130_819_file.close();
        return 1;
    }
    std::stringstream ss_inj_enable_pv_1751608204130_819;
    ss_inj_enable_pv_1751608204130_819 << std::hex << inj_enable_pv_1751608204130_819_hex_str;
    unsigned int temp_inj_enable_pv_1751608204130_819;
    if (!(ss_inj_enable_pv_1751608204130_819 >> temp_inj_enable_pv_1751608204130_819)) {
        std::cerr << "Failed to parse hex value for inj_enable_pv_1751608204130_819: " << inj_enable_pv_1751608204130_819_hex_str << std::endl;
        inj_enable_pv_1751608204130_819_file.close();
        return 1;
    }
    inj_enable_pv_1751608204130_819 = static_cast<bool>(temp_inj_enable_pv_1751608204130_819);
    inj_enable_pv_1751608204130_819_file.close();

    std::ifstream inj_in_cond_ternary_1751608204132_347_file("input_inj_in_cond_ternary_1751608204132_347.hex");
    if (!inj_in_cond_ternary_1751608204132_347_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_cond_ternary_1751608204132_347: input_inj_in_cond_ternary_1751608204132_347.hex" << std::endl;
        return 1;
    }
    std::string inj_in_cond_ternary_1751608204132_347_hex_str;
    inj_in_cond_ternary_1751608204132_347_file >> inj_in_cond_ternary_1751608204132_347_hex_str;
    if (inj_in_cond_ternary_1751608204132_347_file.fail() && !inj_in_cond_ternary_1751608204132_347_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_cond_ternary_1751608204132_347 from input file: input_inj_in_cond_ternary_1751608204132_347.hex" << std::endl;
        inj_in_cond_ternary_1751608204132_347_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_cond_ternary_1751608204132_347;
    ss_inj_in_cond_ternary_1751608204132_347 << std::hex << inj_in_cond_ternary_1751608204132_347_hex_str;
    unsigned int temp_inj_in_cond_ternary_1751608204132_347;
    if (!(ss_inj_in_cond_ternary_1751608204132_347 >> temp_inj_in_cond_ternary_1751608204132_347)) {
        std::cerr << "Failed to parse hex value for inj_in_cond_ternary_1751608204132_347: " << inj_in_cond_ternary_1751608204132_347_hex_str << std::endl;
        inj_in_cond_ternary_1751608204132_347_file.close();
        return 1;
    }
    inj_in_cond_ternary_1751608204132_347 = static_cast<bool>(temp_inj_in_cond_ternary_1751608204132_347);
    inj_in_cond_ternary_1751608204132_347_file.close();

    std::ifstream inj_in_val1_1751608204132_518_file("input_inj_in_val1_1751608204132_518.hex");
    if (!inj_in_val1_1751608204132_518_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_val1_1751608204132_518: input_inj_in_val1_1751608204132_518.hex" << std::endl;
        return 1;
    }
    std::string inj_in_val1_1751608204132_518_hex_str;
    inj_in_val1_1751608204132_518_file >> inj_in_val1_1751608204132_518_hex_str;
    if (inj_in_val1_1751608204132_518_file.fail() && !inj_in_val1_1751608204132_518_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_val1_1751608204132_518 from input file: input_inj_in_val1_1751608204132_518.hex" << std::endl;
        inj_in_val1_1751608204132_518_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_val1_1751608204132_518;
    ss_inj_in_val1_1751608204132_518 << std::hex << inj_in_val1_1751608204132_518_hex_str;
    unsigned int temp_inj_in_val1_1751608204132_518;
    if (!(ss_inj_in_val1_1751608204132_518 >> temp_inj_in_val1_1751608204132_518)) {
        std::cerr << "Failed to parse hex value for inj_in_val1_1751608204132_518: " << inj_in_val1_1751608204132_518_hex_str << std::endl;
        inj_in_val1_1751608204132_518_file.close();
        return 1;
    }
    inj_in_val1_1751608204132_518 = static_cast<uint8_t>(temp_inj_in_val1_1751608204132_518);
    inj_in_val1_1751608204132_518_file.close();

    std::ifstream inj_in_val2_1751608204132_694_file("input_inj_in_val2_1751608204132_694.hex");
    if (!inj_in_val2_1751608204132_694_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_val2_1751608204132_694: input_inj_in_val2_1751608204132_694.hex" << std::endl;
        return 1;
    }
    std::string inj_in_val2_1751608204132_694_hex_str;
    inj_in_val2_1751608204132_694_file >> inj_in_val2_1751608204132_694_hex_str;
    if (inj_in_val2_1751608204132_694_file.fail() && !inj_in_val2_1751608204132_694_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_val2_1751608204132_694 from input file: input_inj_in_val2_1751608204132_694.hex" << std::endl;
        inj_in_val2_1751608204132_694_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_val2_1751608204132_694;
    ss_inj_in_val2_1751608204132_694 << std::hex << inj_in_val2_1751608204132_694_hex_str;
    unsigned int temp_inj_in_val2_1751608204132_694;
    if (!(ss_inj_in_val2_1751608204132_694 >> temp_inj_in_val2_1751608204132_694)) {
        std::cerr << "Failed to parse hex value for inj_in_val2_1751608204132_694: " << inj_in_val2_1751608204132_694_hex_str << std::endl;
        inj_in_val2_1751608204132_694_file.close();
        return 1;
    }
    inj_in_val2_1751608204132_694 = static_cast<uint8_t>(temp_inj_in_val2_1751608204132_694);
    inj_in_val2_1751608204132_694_file.close();

    std::ifstream inj_large_data_in_1751608204135_837_file("input_inj_large_data_in_1751608204135_837.hex");
    if (!inj_large_data_in_1751608204135_837_file.is_open()) {
        std::cerr << "Failed to open input file for inj_large_data_in_1751608204135_837: input_inj_large_data_in_1751608204135_837.hex" << std::endl;
        return 1;
    }
    std::string inj_large_data_in_1751608204135_837_hex_str;
    inj_large_data_in_1751608204135_837_file >> inj_large_data_in_1751608204135_837_hex_str;
    if (inj_large_data_in_1751608204135_837_file.fail() && !inj_large_data_in_1751608204135_837_file.eof()) {
        std::cerr << "Failed to read hex string for inj_large_data_in_1751608204135_837 from input file: input_inj_large_data_in_1751608204135_837.hex" << std::endl;
        inj_large_data_in_1751608204135_837_file.close();
        return 1;
    }
    std::stringstream ss_inj_large_data_in_1751608204135_837;
    ss_inj_large_data_in_1751608204135_837 << std::hex << inj_large_data_in_1751608204135_837_hex_str;
    unsigned int temp_inj_large_data_in_1751608204135_837;
    if (!(ss_inj_large_data_in_1751608204135_837 >> temp_inj_large_data_in_1751608204135_837)) {
        std::cerr << "Failed to parse hex value for inj_large_data_in_1751608204135_837: " << inj_large_data_in_1751608204135_837_hex_str << std::endl;
        inj_large_data_in_1751608204135_837_file.close();
        return 1;
    }
    inj_large_data_in_1751608204135_837 = static_cast<uint8_t>(temp_inj_large_data_in_1751608204135_837);
    inj_large_data_in_1751608204135_837_file.close();

    std::ifstream inj_data_io_1751608204147_331_file("input_inj_data_io_1751608204147_331.hex");
    if (!inj_data_io_1751608204147_331_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data_io_1751608204147_331: input_inj_data_io_1751608204147_331.hex" << std::endl;
        return 1;
    }
    std::string inj_data_io_1751608204147_331_hex_str;
    inj_data_io_1751608204147_331_file >> inj_data_io_1751608204147_331_hex_str;
    if (inj_data_io_1751608204147_331_file.fail() && !inj_data_io_1751608204147_331_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data_io_1751608204147_331 from input file: input_inj_data_io_1751608204147_331.hex" << std::endl;
        inj_data_io_1751608204147_331_file.close();
        return 1;
    }
    std::stringstream ss_inj_data_io_1751608204147_331;
    ss_inj_data_io_1751608204147_331 << std::hex << inj_data_io_1751608204147_331_hex_str;
    unsigned int temp_inj_data_io_1751608204147_331;
    if (!(ss_inj_data_io_1751608204147_331 >> temp_inj_data_io_1751608204147_331)) {
        std::cerr << "Failed to parse hex value for inj_data_io_1751608204147_331: " << inj_data_io_1751608204147_331_hex_str << std::endl;
        inj_data_io_1751608204147_331_file.close();
        return 1;
    }
    inj_data_io_1751608204147_331 = static_cast<uint8_t>(temp_inj_data_io_1751608204147_331);
    inj_data_io_1751608204147_331_file.close();



    // Apply inputs to DUT
    _set_port_value<uint8_t>(simple_sub_i.p_a, a);
    _set_port_value<uint8_t>(simple_sub_i.p_b, b);
    _set_port_value<bool>(simple_sub_i.p_inj__condition__h__1751608204132__423, inj_condition_h_1751608204132_423);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__data0__1751608204137__416, inj_data0_1751608204137_416);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__data1__1751608204137__850, inj_data1_1751608204137_850);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__data2__1751608204137__376, inj_data2_1751608204137_376);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__data3__1751608204137__768, inj_data3_1751608204137_768);
    _set_port_value<uint16_t>(simple_sub_i.p_inj__data__in__pa__1751608204130__326, inj_data_in_pa_1751608204130_326);
    _set_port_value<bool>(simple_sub_i.p_inj__enable__pv__1751608204130__819, inj_enable_pv_1751608204130_819);
    _set_port_value<bool>(simple_sub_i.p_inj__in__cond__ternary__1751608204132__347, inj_in_cond_ternary_1751608204132_347);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__in__val1__1751608204132__518, inj_in_val1_1751608204132_518);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__in__val2__1751608204132__694, inj_in_val2_1751608204132_694);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__large__data__in__1751608204135__837, inj_large_data_in_1751608204135_837);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__data__io__1751608204147__331, inj_data_io_1751608204147_331);
    // Input application


    // Handle reset, clock toggling, and evaluation

    // No clock found, performing bounded steps for combinational logic to settle
    for (int settle_step = 0; settle_step < 20; settle_step++) {
        simple_sub_i.step();
    }


    // Write outputs from DUT
    std::ofstream inj_data_out_case_1751608204137_757_file("output_inj_data_out_case_1751608204137_757.hex");
    if (!inj_data_out_case_1751608204137_757_file.is_open()) {
        std::cerr << "Failed to open output file for inj_data_out_case_1751608204137_757: output_inj_data_out_case_1751608204137_757.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        inj_data_out_case_1751608204137_757_file << (_get_port_value(simple_sub_i.p_inj__data__out__case__1751608204137__757, i) ? '1' : '0');
    }
    inj_data_out_case_1751608204137_757_file << std::endl;
    inj_data_out_case_1751608204137_757_file.close();

    std::ofstream inj_data_out_pa_1751608204130_355_file("output_inj_data_out_pa_1751608204130_355.hex");
    if (!inj_data_out_pa_1751608204130_355_file.is_open()) {
        std::cerr << "Failed to open output file for inj_data_out_pa_1751608204130_355: output_inj_data_out_pa_1751608204130_355.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_data_out_pa_1751608204130_355_file << (_get_port_value(simple_sub_i.p_inj__data__out__pa__1751608204130__355, i) ? '1' : '0');
    }
    inj_data_out_pa_1751608204130_355_file << std::endl;
    inj_data_out_pa_1751608204130_355_file.close();

    std::ofstream inj_data_out_pv_1751608204130_814_file("output_inj_data_out_pv_1751608204130_814.hex");
    if (!inj_data_out_pv_1751608204130_814_file.is_open()) {
        std::cerr << "Failed to open output file for inj_data_out_pv_1751608204130_814: output_inj_data_out_pv_1751608204130_814.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        inj_data_out_pv_1751608204130_814_file << (_get_port_value(simple_sub_i.p_inj__data__out__pv__1751608204130__814, i) ? '1' : '0');
    }
    inj_data_out_pv_1751608204130_814_file << std::endl;
    inj_data_out_pv_1751608204130_814_file.close();

    std::ofstream inj_internal_out_1751608204150_670_file("output_inj_internal_out_1751608204150_670.hex");
    if (!inj_internal_out_1751608204150_670_file.is_open()) {
        std::cerr << "Failed to open output file for inj_internal_out_1751608204150_670: output_inj_internal_out_1751608204150_670.hex" << std::endl;
        return 1;
    }
    for (int i = 4; i >= 0; --i) {
        inj_internal_out_1751608204150_670_file << (_get_port_value(simple_sub_i.p_inj__internal__out__1751608204150__670, i) ? '1' : '0');
    }
    inj_internal_out_1751608204150_670_file << std::endl;
    inj_internal_out_1751608204150_670_file.close();

    std::ofstream inj_large_sum_out_1751608204135_346_file("output_inj_large_sum_out_1751608204135_346.hex");
    if (!inj_large_sum_out_1751608204135_346_file.is_open()) {
        std::cerr << "Failed to open output file for inj_large_sum_out_1751608204135_346: output_inj_large_sum_out_1751608204135_346.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_large_sum_out_1751608204135_346_file << (_get_port_value(simple_sub_i.p_inj__large__sum__out__1751608204135__346, i) ? '1' : '0');
    }
    inj_large_sum_out_1751608204135_346_file << std::endl;
    inj_large_sum_out_1751608204135_346_file.close();

    std::ofstream inj_match_x_neq_1751608204147_458_file("output_inj_match_x_neq_1751608204147_458.hex");
    if (!inj_match_x_neq_1751608204147_458_file.is_open()) {
        std::cerr << "Failed to open output file for inj_match_x_neq_1751608204147_458: output_inj_match_x_neq_1751608204147_458.hex" << std::endl;
        return 1;
    }
    inj_match_x_neq_1751608204147_458_file << (_get_port_value(simple_sub_i.p_inj__match__x__neq__1751608204147__458, 0) ? '1' : '0') << std::endl;
    inj_match_x_neq_1751608204147_458_file.close();

    std::ofstream inj_match_z_eq_1751608204147_256_file("output_inj_match_z_eq_1751608204147_256.hex");
    if (!inj_match_z_eq_1751608204147_256_file.is_open()) {
        std::cerr << "Failed to open output file for inj_match_z_eq_1751608204147_256: output_inj_match_z_eq_1751608204147_256.hex" << std::endl;
        return 1;
    }
    inj_match_z_eq_1751608204147_256_file << (_get_port_value(simple_sub_i.p_inj__match__z__eq__1751608204147__256, 0) ? '1' : '0') << std::endl;
    inj_match_z_eq_1751608204147_256_file.close();

    std::ofstream inj_out1_z_1751608204148_329_file("output_inj_out1_z_1751608204148_329.hex");
    if (!inj_out1_z_1751608204148_329_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out1_z_1751608204148_329: output_inj_out1_z_1751608204148_329.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out1_z_1751608204148_329_file << (_get_port_value(simple_sub_i.p_inj__out1__z__1751608204148__329, i) ? '1' : '0');
    }
    inj_out1_z_1751608204148_329_file << std::endl;
    inj_out1_z_1751608204148_329_file.close();

    std::ofstream inj_out2_z_1751608204148_284_file("output_inj_out2_z_1751608204148_284.hex");
    if (!inj_out2_z_1751608204148_284_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out2_z_1751608204148_284: output_inj_out2_z_1751608204148_284.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out2_z_1751608204148_284_file << (_get_port_value(simple_sub_i.p_inj__out2__z__1751608204148__284, i) ? '1' : '0');
    }
    inj_out2_z_1751608204148_284_file << std::endl;
    inj_out2_z_1751608204148_284_file.close();

    std::ofstream inj_out_1751608204130_793_file("output_inj_out_1751608204130_793.hex");
    if (!inj_out_1751608204130_793_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_1751608204130_793: output_inj_out_1751608204130_793.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_1751608204130_793_file << (_get_port_value(simple_sub_i.p_inj__out__1751608204130__793, i) ? '1' : '0');
    }
    inj_out_1751608204130_793_file << std::endl;
    inj_out_1751608204130_793_file.close();

    std::ofstream inj_out_1751608204133_79_file("output_inj_out_1751608204133_79.hex");
    if (!inj_out_1751608204133_79_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_1751608204133_79: output_inj_out_1751608204133_79.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        inj_out_1751608204133_79_file << (_get_port_value(simple_sub_i.p_inj__out__1751608204133__79, i) ? '1' : '0');
    }
    inj_out_1751608204133_79_file << std::endl;
    inj_out_1751608204133_79_file.close();

    std::ofstream inj_out_reg_h_1751608204132_733_file("output_inj_out_reg_h_1751608204132_733.hex");
    if (!inj_out_reg_h_1751608204132_733_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_reg_h_1751608204132_733: output_inj_out_reg_h_1751608204132_733.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_reg_h_1751608204132_733_file << (_get_port_value(simple_sub_i.p_inj__out__reg__h__1751608204132__733, i) ? '1' : '0');
    }
    inj_out_reg_h_1751608204132_733_file << std::endl;
    inj_out_reg_h_1751608204132_733_file.close();

    std::ofstream inj_out_ternary_result_1751608204132_418_file("output_inj_out_ternary_result_1751608204132_418.hex");
    if (!inj_out_ternary_result_1751608204132_418_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_ternary_result_1751608204132_418: output_inj_out_ternary_result_1751608204132_418.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_ternary_result_1751608204132_418_file << (_get_port_value(simple_sub_i.p_inj__out__ternary__result__1751608204132__418, i) ? '1' : '0');
    }
    inj_out_ternary_result_1751608204132_418_file << std::endl;
    inj_out_ternary_result_1751608204132_418_file.close();

    std::ofstream sum_file("output_sum.hex");
    if (!sum_file.is_open()) {
        std::cerr << "Failed to open output file for sum: output_sum.hex" << std::endl;
        return 1;
    }
    for (int i = 8; i >= 0; --i) {
        sum_file << (_get_port_value(simple_sub_i.p_sum, i) ? '1' : '0');
    }
    sum_file << std::endl;
    sum_file.close();



    return 0;
}
