// Generated C++ testbench for CXXRTL
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
#include "simple_sub.cc" // CXXRTL generated header for the module

#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstdint>
#include <string>
#include <sstream>
#include <type_traits>

// Template helpers to detect and work with both value<> and wire<> types
template<typename T>
struct has_curr {
    template<typename U>
    static auto test(int) -> decltype(std::declval<U>().curr, std::true_type{});
    template<typename>
    static std::false_type test(...);
    using type = decltype(test<T>(0));
    static constexpr bool value = type::value;
};

// Helper function to get port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.curr.template get<T>();
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, T>::type
_get_port_value(const PortType& port) {
    return port.template get<T>();
}

// Helper function to get port bit - works with both value<> and wire<>
template<typename PortType>
typename std::enable_if<has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.curr.bit(bit);
}

template<typename PortType>
typename std::enable_if<!has_curr<PortType>::value, bool>::type
_get_port_value(const PortType& port, int bit) {
    return port.bit(bit);
}

// Helper function to get wide port value - works with both value<> and wire<>
template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<has_curr<PortType>::value, decltype(port.curr)>::type {
    return port.curr;
}

template<typename PortType>
auto _get_port_value_wide(const PortType& port) -> typename std::enable_if<!has_curr<PortType>::value, PortType>::type {
    return port;
}

// Helper function to set port value - works with both value<> and wire<>
template<typename T, typename PortType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.next.template set<T>(value);
}

template<typename T, typename PortType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value(PortType& port, T value) {
    port.template set<T>(value);
}

// Helper function to set wide port value - works with both value<> and wire<>
template<typename PortType, typename ValueType>
typename std::enable_if<has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port.next = value;
}

template<typename PortType, typename ValueType>
typename std::enable_if<!has_curr<PortType>::value, void>::type
_set_port_value_wide(PortType& port, const ValueType& value) {
    port = value;
}

int main(int argc, char** argv) {
    cxxrtl_design::p_simple__sub simple_sub_i; // DUT instance

    // Declare input variables
    uint8_t a;
    uint8_t b;
    bool clk;
    uint32_t inj_b_1752819266756_987;
    uint8_t inj_case_expr_1752819266746_805;
    uint16_t inj_data_in_pa_1752819266766_541;
    bool inj_g_ctrl_p_1752819266789_473;
    bool inj_in1_1752819266737_561;
    uint8_t inj_in_value_1752819266797_854;
    uint8_t inj_mode_1752819266763_150;
    uint8_t inj_param_in_1752819266779_75;
    bool rst;


    // Read input values
    std::ifstream a_file("input_a.hex");
    if (!a_file.is_open()) {
        std::cerr << "Failed to open input file for a: input_a.hex" << std::endl;
        return 1;
    }
    std::string a_hex_str;
    a_file >> a_hex_str;
    if (a_file.fail() && !a_file.eof()) {
        std::cerr << "Failed to read hex string for a from input file: input_a.hex" << std::endl;
        a_file.close();
        return 1;
    }
    std::stringstream ss_a;
    ss_a << std::hex << a_hex_str;
    unsigned int temp_a;
    if (!(ss_a >> temp_a)) {
        std::cerr << "Failed to parse hex value for a: " << a_hex_str << std::endl;
        a_file.close();
        return 1;
    }
    a = static_cast<uint8_t>(temp_a);
    a_file.close();

    std::ifstream b_file("input_b.hex");
    if (!b_file.is_open()) {
        std::cerr << "Failed to open input file for b: input_b.hex" << std::endl;
        return 1;
    }
    std::string b_hex_str;
    b_file >> b_hex_str;
    if (b_file.fail() && !b_file.eof()) {
        std::cerr << "Failed to read hex string for b from input file: input_b.hex" << std::endl;
        b_file.close();
        return 1;
    }
    std::stringstream ss_b;
    ss_b << std::hex << b_hex_str;
    unsigned int temp_b;
    if (!(ss_b >> temp_b)) {
        std::cerr << "Failed to parse hex value for b: " << b_hex_str << std::endl;
        b_file.close();
        return 1;
    }
    b = static_cast<uint8_t>(temp_b);
    b_file.close();

    std::ifstream clk_file("input_clk.hex");
    if (!clk_file.is_open()) {
        std::cerr << "Failed to open input file for clk: input_clk.hex" << std::endl;
        return 1;
    }
    std::string clk_hex_str;
    clk_file >> clk_hex_str;
    if (clk_file.fail() && !clk_file.eof()) {
        std::cerr << "Failed to read hex string for clk from input file: input_clk.hex" << std::endl;
        clk_file.close();
        return 1;
    }
    std::stringstream ss_clk;
    ss_clk << std::hex << clk_hex_str;
    unsigned int temp_clk;
    if (!(ss_clk >> temp_clk)) {
        std::cerr << "Failed to parse hex value for clk: " << clk_hex_str << std::endl;
        clk_file.close();
        return 1;
    }
    clk = static_cast<bool>(temp_clk);
    clk_file.close();

    std::ifstream inj_b_1752819266756_987_file("input_inj_b_1752819266756_987.hex");
    if (!inj_b_1752819266756_987_file.is_open()) {
        std::cerr << "Failed to open input file for inj_b_1752819266756_987: input_inj_b_1752819266756_987.hex" << std::endl;
        return 1;
    }
    std::string inj_b_1752819266756_987_hex_str;
    inj_b_1752819266756_987_file >> inj_b_1752819266756_987_hex_str;
    if (inj_b_1752819266756_987_file.fail() && !inj_b_1752819266756_987_file.eof()) {
        std::cerr << "Failed to read hex string for inj_b_1752819266756_987 from input file: input_inj_b_1752819266756_987.hex" << std::endl;
        inj_b_1752819266756_987_file.close();
        return 1;
    }
    std::stringstream ss_inj_b_1752819266756_987;
    ss_inj_b_1752819266756_987 << std::hex << inj_b_1752819266756_987_hex_str;
    if (!(ss_inj_b_1752819266756_987 >> inj_b_1752819266756_987)) {
        std::cerr << "Failed to parse hex value for inj_b_1752819266756_987: " << inj_b_1752819266756_987_hex_str << std::endl;
        inj_b_1752819266756_987_file.close();
        return 1;
    }
    inj_b_1752819266756_987_file.close();

    std::ifstream inj_case_expr_1752819266746_805_file("input_inj_case_expr_1752819266746_805.hex");
    if (!inj_case_expr_1752819266746_805_file.is_open()) {
        std::cerr << "Failed to open input file for inj_case_expr_1752819266746_805: input_inj_case_expr_1752819266746_805.hex" << std::endl;
        return 1;
    }
    std::string inj_case_expr_1752819266746_805_hex_str;
    inj_case_expr_1752819266746_805_file >> inj_case_expr_1752819266746_805_hex_str;
    if (inj_case_expr_1752819266746_805_file.fail() && !inj_case_expr_1752819266746_805_file.eof()) {
        std::cerr << "Failed to read hex string for inj_case_expr_1752819266746_805 from input file: input_inj_case_expr_1752819266746_805.hex" << std::endl;
        inj_case_expr_1752819266746_805_file.close();
        return 1;
    }
    std::stringstream ss_inj_case_expr_1752819266746_805;
    ss_inj_case_expr_1752819266746_805 << std::hex << inj_case_expr_1752819266746_805_hex_str;
    unsigned int temp_inj_case_expr_1752819266746_805;
    if (!(ss_inj_case_expr_1752819266746_805 >> temp_inj_case_expr_1752819266746_805)) {
        std::cerr << "Failed to parse hex value for inj_case_expr_1752819266746_805: " << inj_case_expr_1752819266746_805_hex_str << std::endl;
        inj_case_expr_1752819266746_805_file.close();
        return 1;
    }
    inj_case_expr_1752819266746_805 = static_cast<uint8_t>(temp_inj_case_expr_1752819266746_805);
    inj_case_expr_1752819266746_805_file.close();

    std::ifstream inj_data_in_pa_1752819266766_541_file("input_inj_data_in_pa_1752819266766_541.hex");
    if (!inj_data_in_pa_1752819266766_541_file.is_open()) {
        std::cerr << "Failed to open input file for inj_data_in_pa_1752819266766_541: input_inj_data_in_pa_1752819266766_541.hex" << std::endl;
        return 1;
    }
    std::string inj_data_in_pa_1752819266766_541_hex_str;
    inj_data_in_pa_1752819266766_541_file >> inj_data_in_pa_1752819266766_541_hex_str;
    if (inj_data_in_pa_1752819266766_541_file.fail() && !inj_data_in_pa_1752819266766_541_file.eof()) {
        std::cerr << "Failed to read hex string for inj_data_in_pa_1752819266766_541 from input file: input_inj_data_in_pa_1752819266766_541.hex" << std::endl;
        inj_data_in_pa_1752819266766_541_file.close();
        return 1;
    }
    std::stringstream ss_inj_data_in_pa_1752819266766_541;
    ss_inj_data_in_pa_1752819266766_541 << std::hex << inj_data_in_pa_1752819266766_541_hex_str;
    if (!(ss_inj_data_in_pa_1752819266766_541 >> inj_data_in_pa_1752819266766_541)) {
        std::cerr << "Failed to parse hex value for inj_data_in_pa_1752819266766_541: " << inj_data_in_pa_1752819266766_541_hex_str << std::endl;
        inj_data_in_pa_1752819266766_541_file.close();
        return 1;
    }
    inj_data_in_pa_1752819266766_541_file.close();

    std::ifstream inj_g_ctrl_p_1752819266789_473_file("input_inj_g_ctrl_p_1752819266789_473.hex");
    if (!inj_g_ctrl_p_1752819266789_473_file.is_open()) {
        std::cerr << "Failed to open input file for inj_g_ctrl_p_1752819266789_473: input_inj_g_ctrl_p_1752819266789_473.hex" << std::endl;
        return 1;
    }
    std::string inj_g_ctrl_p_1752819266789_473_hex_str;
    inj_g_ctrl_p_1752819266789_473_file >> inj_g_ctrl_p_1752819266789_473_hex_str;
    if (inj_g_ctrl_p_1752819266789_473_file.fail() && !inj_g_ctrl_p_1752819266789_473_file.eof()) {
        std::cerr << "Failed to read hex string for inj_g_ctrl_p_1752819266789_473 from input file: input_inj_g_ctrl_p_1752819266789_473.hex" << std::endl;
        inj_g_ctrl_p_1752819266789_473_file.close();
        return 1;
    }
    std::stringstream ss_inj_g_ctrl_p_1752819266789_473;
    ss_inj_g_ctrl_p_1752819266789_473 << std::hex << inj_g_ctrl_p_1752819266789_473_hex_str;
    unsigned int temp_inj_g_ctrl_p_1752819266789_473;
    if (!(ss_inj_g_ctrl_p_1752819266789_473 >> temp_inj_g_ctrl_p_1752819266789_473)) {
        std::cerr << "Failed to parse hex value for inj_g_ctrl_p_1752819266789_473: " << inj_g_ctrl_p_1752819266789_473_hex_str << std::endl;
        inj_g_ctrl_p_1752819266789_473_file.close();
        return 1;
    }
    inj_g_ctrl_p_1752819266789_473 = static_cast<bool>(temp_inj_g_ctrl_p_1752819266789_473);
    inj_g_ctrl_p_1752819266789_473_file.close();

    std::ifstream inj_in1_1752819266737_561_file("input_inj_in1_1752819266737_561.hex");
    if (!inj_in1_1752819266737_561_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in1_1752819266737_561: input_inj_in1_1752819266737_561.hex" << std::endl;
        return 1;
    }
    std::string inj_in1_1752819266737_561_hex_str;
    inj_in1_1752819266737_561_file >> inj_in1_1752819266737_561_hex_str;
    if (inj_in1_1752819266737_561_file.fail() && !inj_in1_1752819266737_561_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in1_1752819266737_561 from input file: input_inj_in1_1752819266737_561.hex" << std::endl;
        inj_in1_1752819266737_561_file.close();
        return 1;
    }
    std::stringstream ss_inj_in1_1752819266737_561;
    ss_inj_in1_1752819266737_561 << std::hex << inj_in1_1752819266737_561_hex_str;
    unsigned int temp_inj_in1_1752819266737_561;
    if (!(ss_inj_in1_1752819266737_561 >> temp_inj_in1_1752819266737_561)) {
        std::cerr << "Failed to parse hex value for inj_in1_1752819266737_561: " << inj_in1_1752819266737_561_hex_str << std::endl;
        inj_in1_1752819266737_561_file.close();
        return 1;
    }
    inj_in1_1752819266737_561 = static_cast<bool>(temp_inj_in1_1752819266737_561);
    inj_in1_1752819266737_561_file.close();

    std::ifstream inj_in_value_1752819266797_854_file("input_inj_in_value_1752819266797_854.hex");
    if (!inj_in_value_1752819266797_854_file.is_open()) {
        std::cerr << "Failed to open input file for inj_in_value_1752819266797_854: input_inj_in_value_1752819266797_854.hex" << std::endl;
        return 1;
    }
    std::string inj_in_value_1752819266797_854_hex_str;
    inj_in_value_1752819266797_854_file >> inj_in_value_1752819266797_854_hex_str;
    if (inj_in_value_1752819266797_854_file.fail() && !inj_in_value_1752819266797_854_file.eof()) {
        std::cerr << "Failed to read hex string for inj_in_value_1752819266797_854 from input file: input_inj_in_value_1752819266797_854.hex" << std::endl;
        inj_in_value_1752819266797_854_file.close();
        return 1;
    }
    std::stringstream ss_inj_in_value_1752819266797_854;
    ss_inj_in_value_1752819266797_854 << std::hex << inj_in_value_1752819266797_854_hex_str;
    unsigned int temp_inj_in_value_1752819266797_854;
    if (!(ss_inj_in_value_1752819266797_854 >> temp_inj_in_value_1752819266797_854)) {
        std::cerr << "Failed to parse hex value for inj_in_value_1752819266797_854: " << inj_in_value_1752819266797_854_hex_str << std::endl;
        inj_in_value_1752819266797_854_file.close();
        return 1;
    }
    inj_in_value_1752819266797_854 = static_cast<uint8_t>(temp_inj_in_value_1752819266797_854);
    inj_in_value_1752819266797_854_file.close();

    std::ifstream inj_mode_1752819266763_150_file("input_inj_mode_1752819266763_150.hex");
    if (!inj_mode_1752819266763_150_file.is_open()) {
        std::cerr << "Failed to open input file for inj_mode_1752819266763_150: input_inj_mode_1752819266763_150.hex" << std::endl;
        return 1;
    }
    std::string inj_mode_1752819266763_150_hex_str;
    inj_mode_1752819266763_150_file >> inj_mode_1752819266763_150_hex_str;
    if (inj_mode_1752819266763_150_file.fail() && !inj_mode_1752819266763_150_file.eof()) {
        std::cerr << "Failed to read hex string for inj_mode_1752819266763_150 from input file: input_inj_mode_1752819266763_150.hex" << std::endl;
        inj_mode_1752819266763_150_file.close();
        return 1;
    }
    std::stringstream ss_inj_mode_1752819266763_150;
    ss_inj_mode_1752819266763_150 << std::hex << inj_mode_1752819266763_150_hex_str;
    unsigned int temp_inj_mode_1752819266763_150;
    if (!(ss_inj_mode_1752819266763_150 >> temp_inj_mode_1752819266763_150)) {
        std::cerr << "Failed to parse hex value for inj_mode_1752819266763_150: " << inj_mode_1752819266763_150_hex_str << std::endl;
        inj_mode_1752819266763_150_file.close();
        return 1;
    }
    inj_mode_1752819266763_150 = static_cast<uint8_t>(temp_inj_mode_1752819266763_150);
    inj_mode_1752819266763_150_file.close();

    std::ifstream inj_param_in_1752819266779_75_file("input_inj_param_in_1752819266779_75.hex");
    if (!inj_param_in_1752819266779_75_file.is_open()) {
        std::cerr << "Failed to open input file for inj_param_in_1752819266779_75: input_inj_param_in_1752819266779_75.hex" << std::endl;
        return 1;
    }
    std::string inj_param_in_1752819266779_75_hex_str;
    inj_param_in_1752819266779_75_file >> inj_param_in_1752819266779_75_hex_str;
    if (inj_param_in_1752819266779_75_file.fail() && !inj_param_in_1752819266779_75_file.eof()) {
        std::cerr << "Failed to read hex string for inj_param_in_1752819266779_75 from input file: input_inj_param_in_1752819266779_75.hex" << std::endl;
        inj_param_in_1752819266779_75_file.close();
        return 1;
    }
    std::stringstream ss_inj_param_in_1752819266779_75;
    ss_inj_param_in_1752819266779_75 << std::hex << inj_param_in_1752819266779_75_hex_str;
    unsigned int temp_inj_param_in_1752819266779_75;
    if (!(ss_inj_param_in_1752819266779_75 >> temp_inj_param_in_1752819266779_75)) {
        std::cerr << "Failed to parse hex value for inj_param_in_1752819266779_75: " << inj_param_in_1752819266779_75_hex_str << std::endl;
        inj_param_in_1752819266779_75_file.close();
        return 1;
    }
    inj_param_in_1752819266779_75 = static_cast<uint8_t>(temp_inj_param_in_1752819266779_75);
    inj_param_in_1752819266779_75_file.close();

    std::ifstream rst_file("input_rst.hex");
    if (!rst_file.is_open()) {
        std::cerr << "Failed to open input file for rst: input_rst.hex" << std::endl;
        return 1;
    }
    std::string rst_hex_str;
    rst_file >> rst_hex_str;
    if (rst_file.fail() && !rst_file.eof()) {
        std::cerr << "Failed to read hex string for rst from input file: input_rst.hex" << std::endl;
        rst_file.close();
        return 1;
    }
    std::stringstream ss_rst;
    ss_rst << std::hex << rst_hex_str;
    unsigned int temp_rst;
    if (!(ss_rst >> temp_rst)) {
        std::cerr << "Failed to parse hex value for rst: " << rst_hex_str << std::endl;
        rst_file.close();
        return 1;
    }
    rst = static_cast<bool>(temp_rst);
    rst_file.close();



    // Apply inputs to DUT
    _set_port_value<uint8_t>(simple_sub_i.p_a, a);
    _set_port_value<uint8_t>(simple_sub_i.p_b, b);
    _set_port_value<bool>(simple_sub_i.p_clk, clk);
    _set_port_value<uint32_t>(simple_sub_i.p_inj__b__1752819266756__987, inj_b_1752819266756_987);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__case__expr__1752819266746__805, inj_case_expr_1752819266746_805);
    _set_port_value<uint16_t>(simple_sub_i.p_inj__data__in__pa__1752819266766__541, inj_data_in_pa_1752819266766_541);
    _set_port_value<bool>(simple_sub_i.p_inj__g__ctrl__p__1752819266789__473, inj_g_ctrl_p_1752819266789_473);
    _set_port_value<bool>(simple_sub_i.p_inj__in1__1752819266737__561, inj_in1_1752819266737_561);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__in__value__1752819266797__854, inj_in_value_1752819266797_854);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__mode__1752819266763__150, inj_mode_1752819266763_150);
    _set_port_value<uint8_t>(simple_sub_i.p_inj__param__in__1752819266779__75, inj_param_in_1752819266779_75);
    _set_port_value<bool>(simple_sub_i.p_rst, rst);
    // Input application


    // Handle reset, clock toggling, and evaluation

    // Toggle reset signal p_rst
    simple_sub_i.p_rst.set<bool>(true); // Assert reset (active high)
    simple_sub_i.step(); // Step to propagate reset assertion
    simple_sub_i.p_rst.set<bool>(false); // De-assert reset
    simple_sub_i.step(); // Step to propagate reset de-assertion
    simple_sub_i.step(); // Extra step for settling after reset

    // Clock toggling with bounded cycles to prevent infinite loops
    for (int cycle = 0; cycle < 50; cycle++) {
        _set_port_value<bool>(simple_sub_i.p_clk, false);
        simple_sub_i.step(); // clock low
        _set_port_value<bool>(simple_sub_i.p_clk, true);
        simple_sub_i.step(); // clock high
    }

    // Bounded evaluation steps to ensure all logic settles (max 20 steps)
    for (int settle_step = 0; settle_step < 20; settle_step++) {
        simple_sub_i.step();
    }


    // Write outputs from DUT
    std::ofstream inj_bind_out_1752819266775_769_file("output_inj_bind_out_1752819266775_769.hex");
    if (!inj_bind_out_1752819266775_769_file.is_open()) {
        std::cerr << "Failed to open output file for inj_bind_out_1752819266775_769: output_inj_bind_out_1752819266775_769.hex" << std::endl;
        return 1;
    }
    inj_bind_out_1752819266775_769_file << (_get_port_value(simple_sub_i.p_inj__bind__out__1752819266775__769, 0) ? '1' : '0') << std::endl;
    inj_bind_out_1752819266775_769_file.close();

    std::ofstream inj_data_out_pa_1752819266766_827_file("output_inj_data_out_pa_1752819266766_827.hex");
    if (!inj_data_out_pa_1752819266766_827_file.is_open()) {
        std::cerr << "Failed to open output file for inj_data_out_pa_1752819266766_827: output_inj_data_out_pa_1752819266766_827.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_data_out_pa_1752819266766_827_file << (_get_port_value(simple_sub_i.p_inj__data__out__pa__1752819266766__827, i) ? '1' : '0');
    }
    inj_data_out_pa_1752819266766_827_file << std::endl;
    inj_data_out_pa_1752819266766_827_file.close();

    std::ofstream inj_data_out_pv_1752819266766_825_file("output_inj_data_out_pv_1752819266766_825.hex");
    if (!inj_data_out_pv_1752819266766_825_file.is_open()) {
        std::cerr << "Failed to open output file for inj_data_out_pv_1752819266766_825: output_inj_data_out_pv_1752819266766_825.hex" << std::endl;
        return 1;
    }
    for (int i = 3; i >= 0; --i) {
        inj_data_out_pv_1752819266766_825_file << (_get_port_value(simple_sub_i.p_inj__data__out__pv__1752819266766__825, i) ? '1' : '0');
    }
    inj_data_out_pv_1752819266766_825_file << std::endl;
    inj_data_out_pv_1752819266766_825_file.close();

    std::ofstream inj_g_out_and_1752819266788_695_file("output_inj_g_out_and_1752819266788_695.hex");
    if (!inj_g_out_and_1752819266788_695_file.is_open()) {
        std::cerr << "Failed to open output file for inj_g_out_and_1752819266788_695: output_inj_g_out_and_1752819266788_695.hex" << std::endl;
        return 1;
    }
    inj_g_out_and_1752819266788_695_file << (_get_port_value(simple_sub_i.p_inj__g__out__and__1752819266788__695, 0) ? '1' : '0') << std::endl;
    inj_g_out_and_1752819266788_695_file.close();

    std::ofstream inj_g_out_or_1752819266788_428_file("output_inj_g_out_or_1752819266788_428.hex");
    if (!inj_g_out_or_1752819266788_428_file.is_open()) {
        std::cerr << "Failed to open output file for inj_g_out_or_1752819266788_428: output_inj_g_out_or_1752819266788_428.hex" << std::endl;
        return 1;
    }
    inj_g_out_or_1752819266788_428_file << (_get_port_value(simple_sub_i.p_inj__g__out__or__1752819266788__428, 0) ? '1' : '0') << std::endl;
    inj_g_out_or_1752819266788_428_file.close();

    std::ofstream inj_internal_out_1752819266746_945_file("output_inj_internal_out_1752819266746_945.hex");
    if (!inj_internal_out_1752819266746_945_file.is_open()) {
        std::cerr << "Failed to open output file for inj_internal_out_1752819266746_945: output_inj_internal_out_1752819266746_945.hex" << std::endl;
        return 1;
    }
    for (int i = 4; i >= 0; --i) {
        inj_internal_out_1752819266746_945_file << (_get_port_value(simple_sub_i.p_inj__internal__out__1752819266746__945, i) ? '1' : '0');
    }
    inj_internal_out_1752819266746_945_file << std::endl;
    inj_internal_out_1752819266746_945_file.close();

    std::ofstream inj_main_out_1752819266737_718_file("output_inj_main_out_1752819266737_718.hex");
    if (!inj_main_out_1752819266737_718_file.is_open()) {
        std::cerr << "Failed to open output file for inj_main_out_1752819266737_718: output_inj_main_out_1752819266737_718.hex" << std::endl;
        return 1;
    }
    inj_main_out_1752819266737_718_file << (_get_port_value(simple_sub_i.p_inj__main__out__1752819266737__718, 0) ? '1' : '0') << std::endl;
    inj_main_out_1752819266737_718_file.close();

    std::ofstream inj_o_result_1752819266790_107_file("output_inj_o_result_1752819266790_107.hex");
    if (!inj_o_result_1752819266790_107_file.is_open()) {
        std::cerr << "Failed to open output file for inj_o_result_1752819266790_107: output_inj_o_result_1752819266790_107.hex" << std::endl;
        return 1;
    }
    inj_o_result_1752819266790_107_file << (_get_port_value(simple_sub_i.p_inj__o__result__1752819266790__107, 0) ? '1' : '0') << std::endl;
    inj_o_result_1752819266790_107_file.close();

    std::ofstream inj_out1_1752819266737_535_file("output_inj_out1_1752819266737_535.hex");
    if (!inj_out1_1752819266737_535_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out1_1752819266737_535: output_inj_out1_1752819266737_535.hex" << std::endl;
        return 1;
    }
    for (int i = 31; i >= 0; --i) {
        inj_out1_1752819266737_535_file << (_get_port_value(simple_sub_i.p_inj__out1__1752819266737__535, i) ? '1' : '0');
    }
    inj_out1_1752819266737_535_file << std::endl;
    inj_out1_1752819266737_535_file.close();

    std::ofstream inj_out1_bind_def_1752819266759_958_file("output_inj_out1_bind_def_1752819266759_958.hex");
    if (!inj_out1_bind_def_1752819266759_958_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out1_bind_def_1752819266759_958: output_inj_out1_bind_def_1752819266759_958.hex" << std::endl;
        return 1;
    }
    inj_out1_bind_def_1752819266759_958_file << (_get_port_value(simple_sub_i.p_inj__out1__bind__def__1752819266759__958, 0) ? '1' : '0') << std::endl;
    inj_out1_bind_def_1752819266759_958_file.close();

    std::ofstream inj_out1_z_1752819266783_68_file("output_inj_out1_z_1752819266783_68.hex");
    if (!inj_out1_z_1752819266783_68_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out1_z_1752819266783_68: output_inj_out1_z_1752819266783_68.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out1_z_1752819266783_68_file << (_get_port_value(simple_sub_i.p_inj__out1__z__1752819266783__68, i) ? '1' : '0');
    }
    inj_out1_z_1752819266783_68_file << std::endl;
    inj_out1_z_1752819266783_68_file.close();

    std::ofstream inj_out2_z_1752819266783_763_file("output_inj_out2_z_1752819266783_763.hex");
    if (!inj_out2_z_1752819266783_763_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out2_z_1752819266783_763: output_inj_out2_z_1752819266783_763.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out2_z_1752819266783_763_file << (_get_port_value(simple_sub_i.p_inj__out2__z__1752819266783__763, i) ? '1' : '0');
    }
    inj_out2_z_1752819266783_763_file << std::endl;
    inj_out2_z_1752819266783_763_file.close();

    std::ofstream inj_out_1752819266792_285_file("output_inj_out_1752819266792_285.hex");
    if (!inj_out_1752819266792_285_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_1752819266792_285: output_inj_out_1752819266792_285.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_1752819266792_285_file << (_get_port_value(simple_sub_i.p_inj__out__1752819266792__285, i) ? '1' : '0');
    }
    inj_out_1752819266792_285_file << std::endl;
    inj_out_1752819266792_285_file.close();

    std::ofstream inj_out_a_1752819266756_158_file("output_inj_out_a_1752819266756_158.hex");
    if (!inj_out_a_1752819266756_158_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_a_1752819266756_158: output_inj_out_a_1752819266756_158.hex" << std::endl;
        return 1;
    }
    inj_out_a_1752819266756_158_file << (_get_port_value(simple_sub_i.p_inj__out__a__1752819266756__158, 0) ? '1' : '0') << std::endl;
    inj_out_a_1752819266756_158_file.close();

    std::ofstream inj_out_b_1752819266756_116_file("output_inj_out_b_1752819266756_116.hex");
    if (!inj_out_b_1752819266756_116_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_b_1752819266756_116: output_inj_out_b_1752819266756_116.hex" << std::endl;
        return 1;
    }
    for (int i = 31; i >= 0; --i) {
        inj_out_b_1752819266756_116_file << (_get_port_value(simple_sub_i.p_inj__out__b__1752819266756__116, i) ? '1' : '0');
    }
    inj_out_b_1752819266756_116_file << std::endl;
    inj_out_b_1752819266756_116_file.close();

    std::ofstream inj_out_category_1752819266797_521_file("output_inj_out_category_1752819266797_521.hex");
    if (!inj_out_category_1752819266797_521_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_category_1752819266797_521: output_inj_out_category_1752819266797_521.hex" << std::endl;
        return 1;
    }
    for (int i = 2; i >= 0; --i) {
        inj_out_category_1752819266797_521_file << (_get_port_value(simple_sub_i.p_inj__out__category__1752819266797__521, i) ? '1' : '0');
    }
    inj_out_category_1752819266797_521_file << std::endl;
    inj_out_category_1752819266797_521_file.close();

    std::ofstream inj_out_diff_m2_1752819266800_46_file("output_inj_out_diff_m2_1752819266800_46.hex");
    if (!inj_out_diff_m2_1752819266800_46_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_diff_m2_1752819266800_46: output_inj_out_diff_m2_1752819266800_46.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_diff_m2_1752819266800_46_file << (_get_port_value(simple_sub_i.p_inj__out__diff__m2__1752819266800__46, i) ? '1' : '0');
    }
    inj_out_diff_m2_1752819266800_46_file << std::endl;
    inj_out_diff_m2_1752819266800_46_file.close();

    std::ofstream inj_out_reg_d_1752819266786_792_file("output_inj_out_reg_d_1752819266786_792.hex");
    if (!inj_out_reg_d_1752819266786_792_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_reg_d_1752819266786_792: output_inj_out_reg_d_1752819266786_792.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_reg_d_1752819266786_792_file << (_get_port_value(simple_sub_i.p_inj__out__reg__d__1752819266786__792, i) ? '1' : '0');
    }
    inj_out_reg_d_1752819266786_792_file << std::endl;
    inj_out_reg_d_1752819266786_792_file.close();

    std::ofstream inj_out_reg_p_1752819266754_760_file("output_inj_out_reg_p_1752819266754_760.hex");
    if (!inj_out_reg_p_1752819266754_760_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_reg_p_1752819266754_760: output_inj_out_reg_p_1752819266754_760.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_reg_p_1752819266754_760_file << (_get_port_value(simple_sub_i.p_inj__out__reg__p__1752819266754__760, i) ? '1' : '0');
    }
    inj_out_reg_p_1752819266754_760_file << std::endl;
    inj_out_reg_p_1752819266754_760_file.close();

    std::ofstream inj_out_val_o_1752819266750_870_file("output_inj_out_val_o_1752819266750_870.hex");
    if (!inj_out_val_o_1752819266750_870_file.is_open()) {
        std::cerr << "Failed to open output file for inj_out_val_o_1752819266750_870: output_inj_out_val_o_1752819266750_870.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_out_val_o_1752819266750_870_file << (_get_port_value(simple_sub_i.p_inj__out__val__o__1752819266750__870, i) ? '1' : '0');
    }
    inj_out_val_o_1752819266750_870_file << std::endl;
    inj_out_val_o_1752819266750_870_file.close();

    std::ofstream inj_param_out_1752819266779_584_file("output_inj_param_out_1752819266779_584.hex");
    if (!inj_param_out_1752819266779_584_file.is_open()) {
        std::cerr << "Failed to open output file for inj_param_out_1752819266779_584: output_inj_param_out_1752819266779_584.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_param_out_1752819266779_584_file << (_get_port_value(simple_sub_i.p_inj__param__out__1752819266779__584, i) ? '1' : '0');
    }
    inj_param_out_1752819266779_584_file << std::endl;
    inj_param_out_1752819266779_584_file.close();

    std::ofstream inj_q_out_1752819266770_633_file("output_inj_q_out_1752819266770_633.hex");
    if (!inj_q_out_1752819266770_633_file.is_open()) {
        std::cerr << "Failed to open output file for inj_q_out_1752819266770_633: output_inj_q_out_1752819266770_633.hex" << std::endl;
        return 1;
    }
    inj_q_out_1752819266770_633_file << (_get_port_value(simple_sub_i.p_inj__q__out__1752819266770__633, 0) ? '1' : '0') << std::endl;
    inj_q_out_1752819266770_633_file.close();

    std::ofstream inj_res_1752819266763_116_file("output_inj_res_1752819266763_116.hex");
    if (!inj_res_1752819266763_116_file.is_open()) {
        std::cerr << "Failed to open output file for inj_res_1752819266763_116: output_inj_res_1752819266763_116.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_res_1752819266763_116_file << (_get_port_value(simple_sub_i.p_inj__res__1752819266763__116, i) ? '1' : '0');
    }
    inj_res_1752819266763_116_file << std::endl;
    inj_res_1752819266763_116_file.close();

    std::ofstream inj_tok_out_1752819266743_425_file("output_inj_tok_out_1752819266743_425.hex");
    if (!inj_tok_out_1752819266743_425_file.is_open()) {
        std::cerr << "Failed to open output file for inj_tok_out_1752819266743_425: output_inj_tok_out_1752819266743_425.hex" << std::endl;
        return 1;
    }
    inj_tok_out_1752819266743_425_file << (_get_port_value(simple_sub_i.p_inj__tok__out__1752819266743__425, 0) ? '1' : '0') << std::endl;
    inj_tok_out_1752819266743_425_file.close();

    std::ofstream inj_var_out_m2_1752819266800_582_file("output_inj_var_out_m2_1752819266800_582.hex");
    if (!inj_var_out_m2_1752819266800_582_file.is_open()) {
        std::cerr << "Failed to open output file for inj_var_out_m2_1752819266800_582: output_inj_var_out_m2_1752819266800_582.hex" << std::endl;
        return 1;
    }
    for (int i = 7; i >= 0; --i) {
        inj_var_out_m2_1752819266800_582_file << (_get_port_value(simple_sub_i.p_inj__var__out__m2__1752819266800__582, i) ? '1' : '0');
    }
    inj_var_out_m2_1752819266800_582_file << std::endl;
    inj_var_out_m2_1752819266800_582_file.close();

    std::ofstream sum_file("output_sum.hex");
    if (!sum_file.is_open()) {
        std::cerr << "Failed to open output file for sum: output_sum.hex" << std::endl;
        return 1;
    }
    for (int i = 8; i >= 0; --i) {
        sum_file << (_get_port_value(simple_sub_i.p_sum, i) ? '1' : '0');
    }
    sum_file << std::endl;
    sum_file.close();



    return 0;
}
