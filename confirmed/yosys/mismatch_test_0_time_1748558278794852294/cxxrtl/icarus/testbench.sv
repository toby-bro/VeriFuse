// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
`include "../stmt_if_task.sv" // Include the mocked module file

module top;
    logic [7:0] out_val_m6;
    logic [7:0] in_val_m6;
    logic condition_m6;

    stmt_if_task dut (
        .out_val_m6(out_val_m6),
        .in_val_m6(in_val_m6),
        .condition_m6(condition_m6)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 2 input files

        fd = $fopen("input_in_val_m6.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_in_val_m6.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", in_val_m6);
        $fclose(fd);

        fd = $fopen("input_condition_m6.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_condition_m6.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", condition_m6);
        $fclose(fd);


        // Toggle reset if a reset signal was identified


        // Toggle clock signals

        // Allow module to process
        #20;


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 1 output files

        fd = $fopen("output_out_val_m6.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_out_val_m6.hex' for port 'out_val_m6'.", "output_out_val_m6.hex", "out_val_m6");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", out_val_m6[i]);
        end
        $fwrite(fd, "\n"); // Add a newline at the end of the bit string
        $fclose(fd);


        $finish;
    end
endmodule