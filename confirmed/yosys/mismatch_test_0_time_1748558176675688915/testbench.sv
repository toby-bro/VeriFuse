// Generated SystemVerilog testbench
// Do not edit this file directly : edit the template in internal/testgen/testbenches.go and generator.go
`include "../expr_postsub_comb.sv" // Include the mocked module file

module top;
    logic [7:0] sub_val_m2;
    logic [7:0] out_diff_m2;
    logic [7:0] var_out_m2;
    logic [7:0] in_val_m2;

    expr_postsub_comb dut (
        .sub_val_m2(sub_val_m2),
        .out_diff_m2(out_diff_m2),
        .var_out_m2(var_out_m2),
        .in_val_m2(in_val_m2)
    );


    initial begin
        string line;
        int fd;
        int status;

        // Read 2 input files

        fd = $fopen("input_sub_val_m2.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_sub_val_m2.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", sub_val_m2);
        $fclose(fd);

        fd = $fopen("input_in_val_m2.hex", "r");
        if (fd == 0) begin
            $display("Error: Unable to open input_in_val_m2.hex");
            $finish;
        end
        status = $fgets(line, fd);
        status = $sscanf(line, "%h", in_val_m2);
        $fclose(fd);


        // Toggle reset if a reset signal was identified


        // Toggle clock signals

        // Allow module to process
        #20;


        // Allow module to process and settle
        #10; // Increased delay for settling
        
        // Additional clock cycles to ensure all sequential logic settles
        #10;
        #10;

        // Write 2 output files

        fd = $fopen("output_out_diff_m2.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_out_diff_m2.hex' for port 'out_diff_m2'.", "output_out_diff_m2.hex", "out_diff_m2");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", out_diff_m2[i]);
        end
        $fwrite(fd, "\n"); // Add a newline at the end of the bit string
        $fclose(fd);

        fd = $fopen("output_var_out_m2.hex", "w");
        if (fd == 0) begin
            $display("Error: Unable to open output file 'output_var_out_m2.hex' for port 'var_out_m2'.", "output_var_out_m2.hex", "var_out_m2");
            $finish;
        end
        for (int i = 7; i >= 0; i--) begin
            $fwrite(fd, "%b", var_out_m2[i]);
        end
        $fwrite(fd, "\n"); // Add a newline at the end of the bit string
        $fclose(fd);


        $finish;
    end
endmodule